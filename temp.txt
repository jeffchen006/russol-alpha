/home/zhiychen/Documents/russol-alpha
fn new() -> ahocorasick::AhoCorasickBuilder {
  ??
  result
}

fn default() -> ahocorasick::AhoCorasickBuilder {
  ??
  result
}

fn match_kind(&mut self, kind: ahocorasick::MatchKind) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 804 ms, AST nodes: 1 vs unsimp 7 @|804|1|7|43|@

fn anchored(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 758 ms, AST nodes: 1 vs unsimp 7 @|758|1|7|44|@

fn dfa(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 777 ms, AST nodes: 1 vs unsimp 7 @|777|1|7|44|@

fn dense_depth(&mut self, depth: usize) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 868 ms, AST nodes: 1 vs unsimp 7 @|868|1|7|44|@

fn prefilter(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 819 ms, AST nodes: 1 vs unsimp 7 @|819|1|7|44|@

fn ascii_case_insensitive(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 783 ms, AST nodes: 1 vs unsimp 7 @|783|1|7|44|@

fn byte_classes(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 740 ms, AST nodes: 1 vs unsimp 7 @|740|1|7|44|@

fn premultiply(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 816 ms, AST nodes: 1 vs unsimp 7 @|816|1|7|44|@

fn default() -> ahocorasick::MatchKind {
  crate::ahocorasick::MatchKind::Standard
} // Synth time: 163 ms, AST nodes: 1 vs unsimp 1 @|163|1|1|2|@

fn supports_overlapping(&self) -> bool {
  true
} // Synth time: 615 ms, AST nodes: 1 vs unsimp 6 @|615|1|6|27|@

fn supports_stream(&self) -> bool {
  true
} // Synth time: 618 ms, AST nodes: 1 vs unsimp 6 @|618|1|6|27|@

fn is_standard(&self) -> bool {
  true
} // Synth time: 613 ms, AST nodes: 1 vs unsimp 6 @|613|1|6|27|@

fn is_leftmost(&self) -> bool {
  true
} // Synth time: 620 ms, AST nodes: 1 vs unsimp 6 @|620|1|6|27|@

fn is_leftmost_first(&self) -> bool {
  true
} // Synth time: 624 ms, AST nodes: 1 vs unsimp 6 @|624|1|6|27|@

fn as_packed(&self) -> std::option::Option<packed::api::MatchKind> {
  ::std::option::Option::None
} // Synth time: 630 ms, AST nodes: 1 vs unsimp 6 @|630|1|6|27|@

fn new() -> dfa::Builder {
  crate::dfa::Builder { premultiply: true, byte_classes: true }
} // Synth time: 186 ms, AST nodes: 5 vs unsimp 5 @|186|5|5|6|@

fn byte_classes(&mut self, yes: bool) -> &mut dfa::Builder {
  self
} // Synth time: 493 ms, AST nodes: 1 vs unsimp 13 @|493|1|13|21|@

fn premultiply(&mut self, yes: bool) -> &mut dfa::Builder {
  self
} // Synth time: 444 ms, AST nodes: 1 vs unsimp 13 @|444|1|13|21|@

fn kind(&self) -> &error::ErrorKind {
  &self.kind
} // Synth time: 362 ms, AST nodes: 1 vs unsimp 1 @|362|1|1|8|@

fn state_id_overflow(max: usize) -> error::Error {
  let kind = crate::error::ErrorKind::StateIDOverflow { max: max as usize };
  crate::error::Error { kind }
} // Synth time: 368 ms, AST nodes: 8 vs unsimp 8 @|368|8|8|8|@

fn premultiply_overflow(max: usize, requested_max: usize) -> error::Error {
  let kind = crate::error::ErrorKind::StateIDOverflow { max: max as usize };
  crate::error::Error { kind }
} // Synth time: 377 ms, AST nodes: 8 vs unsimp 8 @|377|8|8|10|@

fn default() -> nfa::Builder {
  crate::nfa::Builder { dense_depth: 0 as usize, match_kind: crate::ahocorasick::MatchKind::Standard, prefilter: true, anchored: true, ascii_case_insensitive: true }
} // Synth time: 394 ms, AST nodes: 12 vs unsimp 12 @|394|12|12|12|@

fn new() -> nfa::Builder {
  crate::nfa::Builder { dense_depth: 0 as usize, match_kind: crate::ahocorasick::MatchKind::Standard, prefilter: true, anchored: true, ascii_case_insensitive: true }
} // Synth time: 405 ms, AST nodes: 12 vs unsimp 12 @|405|12|12|12|@

fn match_kind(&mut self, kind: ahocorasick::MatchKind) -> &mut nfa::Builder {
  self
} // Synth time: 890 ms, AST nodes: 1 vs unsimp 31 @|890|1|31|37|@

fn dense_depth(&mut self, depth: usize) -> &mut nfa::Builder {
  self
} // Synth time: 819 ms, AST nodes: 1 vs unsimp 31 @|819|1|31|38|@

fn prefilter(&mut self, yes: bool) -> &mut nfa::Builder {
  self
} // Synth time: 844 ms, AST nodes: 1 vs unsimp 31 @|844|1|31|38|@

fn anchored(&mut self, yes: bool) -> &mut nfa::Builder {
  self
} // Synth time: 810 ms, AST nodes: 1 vs unsimp 31 @|810|1|31|38|@

fn ascii_case_insensitive(&mut self, yes: bool) -> &mut nfa::Builder {
  self
} // Synth time: 802 ms, AST nodes: 1 vs unsimp 31 @|802|1|31|38|@

fn new() -> nfa::AllBytesIter {
  crate::nfa::AllBytesIter(0 as u16)
} // Synth time: 172 ms, AST nodes: 4 vs unsimp 4 @|172|4|4|4|@

fn default() -> packed::api::MatchKind {
  crate::packed::api::MatchKind::LeftmostFirst
} // Synth time: 161 ms, AST nodes: 1 vs unsimp 1 @|161|1|1|2|@

fn default() -> packed::api::Config {
  crate::packed::api::Config { kind: crate::packed::api::MatchKind::LeftmostFirst, force: ::std::option::Option::None, force_teddy_fat: ::std::option::Option::None, force_avx: ::std::option::Option::None }
} // Synth time: 358 ms, AST nodes: 9 vs unsimp 9 @|358|9|9|10|@

fn new() -> packed::api::Config {
  crate::packed::api::Config { kind: crate::packed::api::MatchKind::LeftmostFirst, force: ::std::option::Option::None, force_teddy_fat: ::std::option::Option::None, force_avx: ::std::option::Option::None }
} // Synth time: 363 ms, AST nodes: 9 vs unsimp 9 @|363|9|9|10|@

fn match_kind(&mut self, kind: packed::api::MatchKind) -> &mut packed::api::Config {
  self
} // Synth time: 763 ms, AST nodes: 1 vs unsimp 19 @|763|1|19|26|@

fn force_teddy(&mut self, yes: bool) -> &mut packed::api::Config {
  self
} // Synth time: 776 ms, AST nodes: 1 vs unsimp 19 @|776|1|19|27|@

fn force_teddy_fat(&mut self, yes: std::option::Option<bool>) -> &mut packed::api::Config {
  self
} // Synth time: 727 ms, AST nodes: 1 vs unsimp 19 @|727|1|19|26|@

fn force_avx(&mut self, yes: std::option::Option<bool>) -> &mut packed::api::Config {
  self
} // Synth time: 768 ms, AST nodes: 1 vs unsimp 19 @|768|1|19|26|@

fn force_rabin_karp(&mut self, yes: bool) -> &mut packed::api::Config {
  self
} // Synth time: 776 ms, AST nodes: 1 vs unsimp 19 @|776|1|19|27|@

fn heap_bytes(&self) -> usize {
  0 as usize
} // Synth time: 286 ms, AST nodes: 1 vs unsimp 1 @|286|1|1|4|@

fn new() -> packed::teddy::fallback::Builder {
  crate::packed::teddy::fallback::Builder(())
} // Synth time: 154 ms, AST nodes: 3 vs unsimp 3 @|154|3|3|3|@

fn minimum_len(&self) -> usize {
  0 as usize
} // Synth time: 270 ms, AST nodes: 1 vs unsimp 7 @|270|1|7|10|@

fn heap_bytes(&self) -> usize {
  0 as usize
} // Synth time: 279 ms, AST nodes: 1 vs unsimp 7 @|279|1|7|10|@

fn into_option(self) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 560 ms, AST nodes: 1 vs unsimp 11 @|560|1|11|23|@

fn heap_bytes<'a>(&&'a self) -> usize {
  0 as usize
} // Synth time: 302 ms, AST nodes: 1 vs unsimp 1 @|302|1|1|6|@

fn reports_false_positives<'a>(&&'a self) -> bool {
  true
} // Synth time: 317 ms, AST nodes: 1 vs unsimp 1 @|317|1|1|6|@

fn new(max_match_len: usize) -> prefilter::PrefilterState {
  crate::prefilter::PrefilterState { skips: max_match_len as usize, skipped: max_match_len as usize, max_match_len: max_match_len as usize, inert: true, last_scan_at: max_match_len as usize }
} // Synth time: 463 ms, AST nodes: 15 vs unsimp 15 @|463|15|15|14|@

fn disabled() -> prefilter::PrefilterState {
  crate::prefilter::PrefilterState { skips: 0 as usize, skipped: 0 as usize, max_match_len: 0 as usize, inert: true, last_scan_at: 0 as usize }
} // Synth time: 311 ms, AST nodes: 15 vs unsimp 15 @|311|15|15|12|@

fn update_skipped_bytes(&mut self, skipped: usize) {
  ()
} // Synth time: 757 ms, AST nodes: 0 vs unsimp 30 @|757|0|30|37|@

fn update_at(&mut self, at: usize) {
  ()
} // Synth time: 756 ms, AST nodes: 0 vs unsimp 30 @|756|0|30|37|@

fn is_effective(&mut self, at: usize) -> bool {
  self.inert
} // Synth time: 795 ms, AST nodes: 5 vs unsimp 31 @|795|5|31|40|@

fn default() -> prefilter::RareByteOffset {
  crate::prefilter::RareByteOffset { max: 0 as u8 }
} // Synth time: 162 ms, AST nodes: 4 vs unsimp 4 @|162|4|4|4|@

fn new(max: usize) -> std::option::Option<prefilter::RareByteOffset> {
  ::std::option::Option::None
} // Synth time: 273 ms, AST nodes: 1 vs unsimp 1 @|273|1|1|4|@

fn heap_bytes(&self) -> usize {
  let de = self.byte1;
  de as usize
} // Synth time: 594 ms, AST nodes: 7 vs unsimp 21 @|594|7|21|25|@

fn looks_for_non_start_of_match(&self) -> bool {
  true
} // Synth time: 578 ms, AST nodes: 1 vs unsimp 21 @|578|1|21|25|@

fn heap_bytes(&self) -> usize {
  let de = self.byte1;
  de as usize
} // Synth time: 312 ms, AST nodes: 7 vs unsimp 7 @|312|7|7|12|@

fn heap_bytes(&self) -> usize {
  let de = self.byte1;
  de as usize
} // Synth time: 509 ms, AST nodes: 7 vs unsimp 13 @|509|7|13|17|@

fn heap_bytes(&self) -> usize {
  let de = self.byte1;
  de as usize
} // Synth time: 586 ms, AST nodes: 7 vs unsimp 19 @|586|7|19|22|@

fn opposite_ascii_case(b: u8) -> u8 {
  b
} // Synth time: 199 ms, AST nodes: 1 vs unsimp 1 @|199|1|1|5|@

fn freq_rank(b: u8) -> u8 {
  b
} // Synth time: 201 ms, AST nodes: 1 vs unsimp 1 @|201|1|1|5|@

fn premultiply_overflow_error(last_state: S, alphabet_len: usize) -> std::result::Result<(), error::Error> {
  ::std::result::Result::Ok(())
} // Synth time: 345 ms, AST nodes: 3 vs unsimp 3 @|345|3|3|6|@

fn usize_to_state_id(value: usize) -> std::result::Result<S, error::Error> {
  let result = crate::state_id::StateID::from_usize(value);
  ::std::result::Result::Ok(result)
} // Synth time: 446 ms, AST nodes: 6 vs unsimp 6 @|446|6|6|13|@

fn fail_id() -> S {
  ??
  result
}

fn dead_id() -> S {
  ??
  result
}

fn from_usize(n: usize) -> usize {
  n
} // Synth time: 209 ms, AST nodes: 1 vs unsimp 1 @|209|1|1|5|@

fn to_usize(self) -> usize {
  self
} // Synth time: 219 ms, AST nodes: 1 vs unsimp 1 @|219|1|1|5|@

fn max_id() -> usize {
  0 as usize
} // Synth time: 139 ms, AST nodes: 1 vs unsimp 1 @|139|1|1|2|@

fn from_usize(n: usize) -> u8 {
  0 as u8
} // Synth time: 204 ms, AST nodes: 1 vs unsimp 1 @|204|1|1|4|@

fn to_usize(self) -> usize {
  self as usize
} // Synth time: 192 ms, AST nodes: 1 vs unsimp 1 @|192|1|1|4|@

fn max_id() -> usize {
  0 as usize
} // Synth time: 134 ms, AST nodes: 1 vs unsimp 1 @|134|1|1|2|@

fn from_usize(n: usize) -> u16 {
  0 as u16
} // Synth time: 211 ms, AST nodes: 1 vs unsimp 1 @|211|1|1|4|@

fn to_usize(self) -> usize {
  self as usize
} // Synth time: 191 ms, AST nodes: 1 vs unsimp 1 @|191|1|1|4|@

fn max_id() -> usize {
  0 as usize
} // Synth time: 140 ms, AST nodes: 1 vs unsimp 1 @|140|1|1|2|@

fn from_usize(n: usize) -> u32 {
  0 as u32
} // Synth time: 209 ms, AST nodes: 1 vs unsimp 1 @|209|1|1|4|@

fn to_usize(self) -> usize {
  self as usize
} // Synth time: 199 ms, AST nodes: 1 vs unsimp 1 @|199|1|1|4|@

fn max_id() -> usize {
  0 as usize
} // Synth time: 146 ms, AST nodes: 1 vs unsimp 1 @|146|1|1|2|@

fn from_usize(n: usize) -> u64 {
  n as u64
} // Synth time: 200 ms, AST nodes: 1 vs unsimp 1 @|200|1|1|4|@

fn to_usize(self) -> usize {
  self as usize
} // Synth time: 185 ms, AST nodes: 1 vs unsimp 1 @|185|1|1|4|@

fn max_id() -> usize {
  0 as usize
} // Synth time: 143 ms, AST nodes: 1 vs unsimp 1 @|143|1|1|2|@

fn pattern(&self) -> usize {
  self.end
} // Synth time: 593 ms, AST nodes: 5 vs unsimp 17 @|593|5|17|23|@

fn start(&self) -> usize {
  self.end
} // Synth time: 588 ms, AST nodes: 5 vs unsimp 17 @|588|5|17|23|@

fn end(&self) -> usize {
  self.end
} // Synth time: 611 ms, AST nodes: 5 vs unsimp 17 @|611|5|17|23|@

fn len(&self) -> usize {
  self.end
} // Synth time: 601 ms, AST nodes: 5 vs unsimp 17 @|601|5|17|23|@

fn is_empty(&self) -> bool {
  true
} // Synth time: 564 ms, AST nodes: 1 vs unsimp 19 @|564|1|19|22|@

fn increment(&self, by: usize) -> Match {
  let de = self.end;
  crate::Match { pattern: de as usize, len: de as usize, end: de as usize }
} // Synth time: 755 ms, AST nodes: 16 vs unsimp 28 @|755|16|28|30|@

fn from_span(id: usize, start: usize, end: usize) -> Match {
  crate::Match { pattern: end as usize, len: end as usize, end: end as usize }
} // Synth time: 521 ms, AST nodes: 10 vs unsimp 10 @|521|10|10|14|@

fn prefix(self) -> ansi::Prefix {
  crate::ansi::Prefix(self)
} // Synth time: 280 ms, AST nodes: 3 vs unsimp 3 @|280|3|3|6|@

fn suffix(self) -> ansi::Suffix {
  crate::ansi::Suffix(self)
} // Synth time: 276 ms, AST nodes: 3 vs unsimp 3 @|276|3|3|6|@

fn infix(self, next: style::Style) -> ansi::Infix {
  crate::ansi::Infix(self, self)
} // Synth time: 323 ms, AST nodes: 5 vs unsimp 5 @|323|5|5|10|@

fn prefix(self) -> ansi::Prefix {
  let _0 = crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true };
  crate::ansi::Prefix(_0)
} // Synth time: 1600 ms, AST nodes: 25 vs unsimp 25 @|1600|25|25|25|@

fn suffix(self) -> ansi::Suffix {
  let _0 = crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true };
  crate::ansi::Suffix(_0)
} // Synth time: 1545 ms, AST nodes: 25 vs unsimp 25 @|1545|25|25|25|@

fn new() -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 510 ms, AST nodes: 21 vs unsimp 21 @|510|21|21|22|@

fn bold(&self) -> style::Style {
  *self
} // Synth time: 870 ms, AST nodes: 4 vs unsimp 66 @|870|4|66|58|@

fn dimmed(&self) -> style::Style {
  *self
} // Synth time: 745 ms, AST nodes: 4 vs unsimp 66 @|745|4|66|58|@

fn italic(&self) -> style::Style {
  *self
} // Synth time: 900 ms, AST nodes: 4 vs unsimp 66 @|900|4|66|58|@

fn underline(&self) -> style::Style {
  *self
} // Synth time: 894 ms, AST nodes: 4 vs unsimp 66 @|894|4|66|58|@

fn blink(&self) -> style::Style {
  *self
} // Synth time: 847 ms, AST nodes: 4 vs unsimp 66 @|847|4|66|58|@

fn reverse(&self) -> style::Style {
  *self
} // Synth time: 903 ms, AST nodes: 4 vs unsimp 66 @|903|4|66|58|@

fn hidden(&self) -> style::Style {
  *self
} // Synth time: 888 ms, AST nodes: 4 vs unsimp 66 @|888|4|66|58|@

fn strikethrough(&self) -> style::Style {
  *self
} // Synth time: 853 ms, AST nodes: 4 vs unsimp 66 @|853|4|66|58|@

fn fg(&self, foreground: style::Colour) -> style::Style {
  *self
} // Synth time: 929 ms, AST nodes: 4 vs unsimp 66 @|929|4|66|59|@

fn on(&self, background: style::Colour) -> style::Style {
  *self
} // Synth time: 884 ms, AST nodes: 4 vs unsimp 66 @|884|4|66|59|@

fn is_plain(self) -> bool {
  true
} // Synth time: 218 ms, AST nodes: 1 vs unsimp 1 @|218|1|1|3|@

fn default() -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 501 ms, AST nodes: 21 vs unsimp 21 @|501|21|21|22|@

fn normal(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1574 ms, AST nodes: 21 vs unsimp 21 @|1574|21|21|23|@

fn bold(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1490 ms, AST nodes: 21 vs unsimp 21 @|1490|21|21|23|@

fn dimmed(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1575 ms, AST nodes: 21 vs unsimp 21 @|1575|21|21|23|@

fn italic(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1604 ms, AST nodes: 21 vs unsimp 21 @|1604|21|21|23|@

fn underline(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1402 ms, AST nodes: 21 vs unsimp 21 @|1402|21|21|23|@

fn blink(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1586 ms, AST nodes: 21 vs unsimp 21 @|1586|21|21|23|@

fn reverse(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1596 ms, AST nodes: 21 vs unsimp 21 @|1596|21|21|23|@

fn hidden(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1572 ms, AST nodes: 21 vs unsimp 21 @|1572|21|21|23|@

fn strikethrough(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1580 ms, AST nodes: 21 vs unsimp 21 @|1580|21|21|23|@

fn on(self, background: style::Colour) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 20578 ms, AST nodes: 21 vs unsimp 21 @|20578|21|21|24|@

fn from(colour: style::Colour) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1659 ms, AST nodes: 21 vs unsimp 21 @|1659|21|21|23|@

fn between(first: &style::Style, next: &style::Style) -> difference::Difference {
  crate::difference::Difference::Reset
} // Synth time: 1375 ms, AST nodes: 1 vs unsimp 131 @|1375|1|131|112|@

fn _assert_send_sync() {
  ()
} // Synth time: 95 ms, AST nodes: 0 vs unsimp 0 @|95|0|0|0|@

fn extend_panic() {
  ()
} // Synth time: 95 ms, AST nodes: 0 vs unsimp 0 @|95|0|0|0|@

fn drop(&mut self) {
  ()
} // Synth time: 195 ms, AST nodes: 0 vs unsimp 0 @|195|0|0|4|@

fn new(element: T) -> errors::CapacityError<T> {
  crate::errors::CapacityError { element }
} // Synth time: 197 ms, AST nodes: 3 vs unsimp 3 @|197|3|3|5|@

fn simplify(self) -> errors::CapacityError {
  crate::errors::CapacityError { element: () }
} // Synth time: 214 ms, AST nodes: 3 vs unsimp 3 @|214|3|3|4|@

fn element(self) -> T {
  self.element
} // Synth time: 208 ms, AST nodes: 1 vs unsimp 1 @|208|1|1|5|@

fn new(major: usize, minor: usize, patch: usize) -> version::Version {
  crate::version::Version { major: major as usize, minor: major as usize, patch: major as usize }
} // Synth time: 520 ms, AST nodes: 10 vs unsimp 10 @|520|10|10|14|@

fn new<'e>(engine: &'e E) -> chunked_encoder::ChunkedEncoder<'e, E> {
  crate::chunked_encoder::ChunkedEncoder { engine, max_input_chunk_len: 0 as usize }
} // Synth time: 263 ms, AST nodes: 6 vs unsimp 6 @|263|6|6|8|@

fn max_input_length(encoded_buf_len: usize, padded: bool) -> usize {
  encoded_buf_len
} // Synth time: 238 ms, AST nodes: 1 vs unsimp 1 @|238|1|1|7|@

fn decoded_len_estimate(&self) -> usize {
  self.decoded_len_estimate
} // Synth time: 473 ms, AST nodes: 5 vs unsimp 11 @|473|5|11|18|@

fn new(encoded_len: usize) -> engine::general_purpose::decode::GeneralPurposeEstimate {
  crate::engine::general_purpose::decode::GeneralPurposeEstimate { num_chunks: encoded_len as usize, decoded_len_estimate: encoded_len as usize }
} // Synth time: 276 ms, AST nodes: 7 vs unsimp 7 @|276|7|7|8|@

fn new() -> engine::general_purpose::GeneralPurposeConfig {
  crate::engine::general_purpose::GeneralPurposeConfig { encode_padding: true, decode_allow_trailing_bits: true, decode_padding_mode: crate::engine::DecodePaddingMode::Indifferent }
} // Synth time: 301 ms, AST nodes: 7 vs unsimp 7 @|301|7|7|8|@

fn with_encode_padding(self, padding: bool) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 308 ms, AST nodes: 1 vs unsimp 1 @|308|1|1|6|@

fn with_decode_allow_trailing_bits(self, allow: bool) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 302 ms, AST nodes: 1 vs unsimp 1 @|302|1|1|6|@

fn with_decode_padding_mode(self, mode: engine::DecodePaddingMode) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 225 ms, AST nodes: 1 vs unsimp 1 @|225|1|1|5|@

fn default() -> engine::general_purpose::GeneralPurposeConfig {
  crate::engine::general_purpose::GeneralPurposeConfig { encode_padding: true, decode_allow_trailing_bits: true, decode_padding_mode: crate::engine::DecodePaddingMode::Indifferent }
} // Synth time: 310 ms, AST nodes: 7 vs unsimp 7 @|310|7|7|8|@

fn encode_padding(&self) -> bool {
  self.decode_allow_trailing_bits
} // Synth time: 580 ms, AST nodes: 5 vs unsimp 24 @|580|5|24|24|@

fn encoded_len(bytes_len: usize, padding: bool) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 257 ms, AST nodes: 1 vs unsimp 1 @|257|1|1|6|@

fn from(e: decode::DecodeError) -> decode::DecodeSliceError {
  crate::decode::DecodeSliceError::DecodeError(e)
} // Synth time: 271 ms, AST nodes: 3 vs unsimp 3 @|271|3|3|5|@

fn decoded_len_estimate(encoded_len: usize) -> usize {
  encoded_len
} // Synth time: 214 ms, AST nodes: 1 vs unsimp 1 @|214|1|1|5|@

fn new<'e>(engine: &'e E) -> chunked_encoder::ChunkedEncoder<'e, E> {
  crate::chunked_encoder::ChunkedEncoder { engine }
} // Synth time: 226 ms, AST nodes: 3 vs unsimp 3 @|226|3|3|6|@

fn new(encoded_len: usize) -> engine::general_purpose::decode::GeneralPurposeEstimate {
  crate::engine::general_purpose::decode::GeneralPurposeEstimate { num_chunks: encoded_len as usize, decoded_len_estimate: encoded_len as usize }
} // Synth time: 266 ms, AST nodes: 7 vs unsimp 7 @|266|7|7|8|@

fn decoded_len_estimate(&self) -> usize {
  self.decoded_len_estimate
} // Synth time: 486 ms, AST nodes: 5 vs unsimp 11 @|486|5|11|18|@

fn with_decode_allow_trailing_bits(self, allow: bool) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 304 ms, AST nodes: 1 vs unsimp 1 @|304|1|1|6|@

fn with_decode_padding_mode(self, mode: engine::DecodePaddingMode) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 283 ms, AST nodes: 1 vs unsimp 1 @|283|1|1|5|@

fn default() -> engine::general_purpose::GeneralPurposeConfig {
  crate::engine::general_purpose::GeneralPurposeConfig { encode_padding: true, decode_allow_trailing_bits: true, decode_padding_mode: crate::engine::DecodePaddingMode::Indifferent }
} // Synth time: 308 ms, AST nodes: 7 vs unsimp 7 @|308|7|7|8|@

fn new() -> engine::general_purpose::GeneralPurposeConfig {
  crate::engine::general_purpose::GeneralPurposeConfig { encode_padding: true, decode_allow_trailing_bits: true, decode_padding_mode: crate::engine::DecodePaddingMode::Indifferent }
} // Synth time: 298 ms, AST nodes: 7 vs unsimp 7 @|298|7|7|8|@

fn with_encode_padding(self, padding: bool) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 295 ms, AST nodes: 1 vs unsimp 1 @|295|1|1|6|@

fn encode_padding(&self) -> bool {
  self.decode_allow_trailing_bits
} // Synth time: 608 ms, AST nodes: 5 vs unsimp 24 @|608|5|24|24|@

fn new(decoded_bytes: usize, padding_index: std::option::Option<usize>) -> engine::DecodeMetadata {
  crate::engine::DecodeMetadata { decoded_len: decoded_bytes as usize, padding_offset: ::std::option::Option::None }
} // Synth time: 505 ms, AST nodes: 6 vs unsimp 6 @|505|6|6|9|@

fn encoded_len(bytes_len: usize, padding: bool) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 217 ms, AST nodes: 1 vs unsimp 1 @|217|1|1|6|@

fn from(e: decode::DecodeError) -> decode::DecodeSliceError {
  crate::decode::DecodeSliceError::DecodeError(e)
} // Synth time: 324 ms, AST nodes: 3 vs unsimp 3 @|324|3|3|5|@

fn decoded_len_estimate(encoded_len: usize) -> usize {
  encoded_len
} // Synth time: 224 ms, AST nodes: 1 vs unsimp 1 @|224|1|1|5|@

fn empty_flag() -> parser::ParseError {
  crate::parser::ParseError(crate::parser::ParseErrorKind::EmptyFlag)
} // Synth time: 224 ms, AST nodes: 3 vs unsimp 3 @|224|3|3|4|@

fn invalid_hex_flag(flag: impl fmt::Display) -> parser::ParseError {
  crate::parser::ParseError(crate::parser::ParseErrorKind::EmptyFlag)
} // Synth time: 284 ms, AST nodes: 3 vs unsimp 3 @|284|3|3|5|@

fn empty_flag() -> parser::ParseError {
  crate::parser::ParseError(crate::parser::ParseErrorKind::EmptyFlag)
} // Synth time: 225 ms, AST nodes: 3 vs unsimp 3 @|225|3|3|4|@

fn invalid_named_flag(flag: impl fmt::Display) -> parser::ParseError {
  crate::parser::ParseError(crate::parser::ParseErrorKind::EmptyFlag)
} // Synth time: 277 ms, AST nodes: 3 vs unsimp 3 @|277|3|3|5|@

fn to_writer(flags: &B, writer: impl Write) -> core::result::Result<(), core::fmt::Error> {
  ::core::result::Result::Ok(())
} // Synth time: 22955 ms, AST nodes: 3 vs unsimp 3 @|22955|3|3|6|@

fn invalid_hex_flag(flag: impl fmt::Display) -> parser::ParseError {
  crate::parser::ParseError(crate::parser::ParseErrorKind::EmptyFlag)
} // Synth time: 284 ms, AST nodes: 3 vs unsimp 3 @|284|3|3|5|@

fn extend_sign128(val: u128, nbytes: usize) -> i128 {
  nbytes as i128
} // Synth time: 244 ms, AST nodes: 1 vs unsimp 1 @|244|1|1|6|@

fn unextend_sign(val: i64, nbytes: usize) -> u64 {
  nbytes as u64
} // Synth time: 241 ms, AST nodes: 1 vs unsimp 1 @|241|1|1|6|@

fn pack_size(n: u64) -> usize {
  n as usize
} // Synth time: 188 ms, AST nodes: 1 vs unsimp 1 @|188|1|1|4|@

fn unextend_sign128(val: i128, nbytes: usize) -> u128 {
  nbytes as u128
} // Synth time: 242 ms, AST nodes: 1 vs unsimp 1 @|242|1|1|6|@

fn default() -> BigEndian {
  ??
  result
}

fn extend_sign(val: u64, nbytes: usize) -> i64 {
  nbytes as i64
} // Synth time: 247 ms, AST nodes: 1 vs unsimp 1 @|247|1|1|6|@

fn pack_size128(n: u128) -> usize {
  0 as usize
} // Synth time: 210 ms, AST nodes: 1 vs unsimp 1 @|210|1|1|4|@

fn default() -> LittleEndian {
  ??
  result
}

fn extend_sign128(val: u128, nbytes: usize) -> i128 {
  nbytes as i128
} // Synth time: 243 ms, AST nodes: 1 vs unsimp 1 @|243|1|1|6|@

fn default() -> LittleEndian {
  ??
  result
}

fn unextend_sign(val: i64, nbytes: usize) -> u64 {
  nbytes as u64
} // Synth time: 245 ms, AST nodes: 1 vs unsimp 1 @|245|1|1|6|@

fn unextend_sign128(val: i128, nbytes: usize) -> u128 {
  nbytes as u128
} // Synth time: 240 ms, AST nodes: 1 vs unsimp 1 @|240|1|1|6|@

fn pack_size(n: u64) -> usize {
  n as usize
} // Synth time: 188 ms, AST nodes: 1 vs unsimp 1 @|188|1|1|4|@

fn pack_size128(n: u128) -> usize {
  0 as usize
} // Synth time: 200 ms, AST nodes: 1 vs unsimp 1 @|200|1|1|4|@

fn extend_sign(val: u64, nbytes: usize) -> i64 {
  nbytes as i64
} // Synth time: 250 ms, AST nodes: 1 vs unsimp 1 @|250|1|1|6|@

fn advance(&mut self, cnt: usize) {
  ()
} // Synth time: 397 ms, AST nodes: 0 vs unsimp 0 @|397|0|0|13|@

fn new(a: T, b: U) -> buf::chain::Chain<T, U> {
  crate::buf::chain::Chain { a, b }
} // Synth time: 234 ms, AST nodes: 5 vs unsimp 5 @|234|5|5|8|@

fn first_ref(&self) -> &T {
  &self.a
} // Synth time: 285 ms, AST nodes: 1 vs unsimp 1 @|285|1|1|9|@

fn last_mut(&mut self) -> &mut U {
  &mut self.b
} // Synth time: 338 ms, AST nodes: 1 vs unsimp 1 @|338|1|1|13|@

fn first_mut(&mut self) -> &mut T {
  &mut self.a
} // Synth time: 338 ms, AST nodes: 1 vs unsimp 1 @|338|1|1|13|@

fn last_ref(&self) -> &U {
  &self.b
} // Synth time: 279 ms, AST nodes: 1 vs unsimp 1 @|279|1|1|9|@

fn into_inner(self) -> (T, U) {
  (self.a, self.b)
} // Synth time: 287 ms, AST nodes: 9 vs unsimp 9 @|287|9|9|10|@

fn remaining(&self) -> usize {
  0 as usize
} // Synth time: 428 ms, AST nodes: 1 vs unsimp 1 @|428|1|1|9|@

fn advance(&mut self, cnt: usize) {
  ()
} // Synth time: 485 ms, AST nodes: 0 vs unsimp 0 @|485|0|0|13|@

fn remaining_mut(&self) -> usize {
  0 as usize
} // Synth time: 434 ms, AST nodes: 1 vs unsimp 1 @|434|1|1|9|@

fn advance_mut(&mut self, cnt: usize) {
  ()
} // Synth time: 518 ms, AST nodes: 0 vs unsimp 0 @|518|0|0|13|@

fn new(inner: T) -> buf::iter::IntoIter<T> {
  crate::buf::iter::IntoIter { inner }
} // Synth time: 192 ms, AST nodes: 3 vs unsimp 3 @|192|3|3|5|@

fn into_inner(self) -> T {
  self.inner
} // Synth time: 211 ms, AST nodes: 1 vs unsimp 1 @|211|1|1|5|@

fn get_ref(&self) -> &T {
  &self.inner
} // Synth time: 257 ms, AST nodes: 1 vs unsimp 1 @|257|1|1|8|@

fn get_mut(&mut self) -> &mut T {
  &mut self.inner
} // Synth time: 281 ms, AST nodes: 1 vs unsimp 1 @|281|1|1|10|@

fn next(&mut self) -> core::option::Option<u8> {
  ::core::option::Option::None
} // Synth time: 438 ms, AST nodes: 1 vs unsimp 1 @|438|1|1|10|@

fn size_hint(&self) -> (usize, core::option::Option<usize>) {
  (0 as usize, ::core::option::Option::None)
} // Synth time: 469 ms, AST nodes: 6 vs unsimp 6 @|469|6|6|12|@

fn new(inner: T, limit: usize) -> buf::limit::Limit<T> {
  crate::buf::limit::Limit { inner, limit: limit as usize }
} // Synth time: 280 ms, AST nodes: 6 vs unsimp 6 @|280|6|6|9|@

fn into_inner(self) -> T {
  self.inner
} // Synth time: 248 ms, AST nodes: 1 vs unsimp 1 @|248|1|1|7|@

fn get_ref(&self) -> &T {
  &self.inner
} // Synth time: 351 ms, AST nodes: 1 vs unsimp 7 @|351|1|7|13|@

fn get_mut(&mut self) -> &mut T {
  &mut self.inner
} // Synth time: 376 ms, AST nodes: 1 vs unsimp 7 @|376|1|7|16|@

fn limit(&self) -> usize {
  self.limit
} // Synth time: 351 ms, AST nodes: 5 vs unsimp 5 @|351|5|5|14|@

fn set_limit(&mut self, lim: usize) {
  ()
} // Synth time: 437 ms, AST nodes: 0 vs unsimp 6 @|437|0|6|16|@

fn remaining_mut(&self) -> usize {
  self.limit
} // Synth time: 508 ms, AST nodes: 5 vs unsimp 5 @|508|5|5|14|@

fn advance_mut(&mut self, cnt: usize) {
  ()
} // Synth time: 584 ms, AST nodes: 0 vs unsimp 6 @|584|0|6|16|@

fn new(buf: B) -> buf::reader::Reader<B> {
  crate::buf::reader::Reader { buf }
} // Synth time: 198 ms, AST nodes: 3 vs unsimp 3 @|198|3|3|5|@

fn get_ref(&self) -> &B {
  &self.buf
} // Synth time: 505 ms, AST nodes: 1 vs unsimp 1 @|505|1|1|8|@

fn get_mut(&mut self) -> &mut B {
  &mut self.buf
} // Synth time: 521 ms, AST nodes: 1 vs unsimp 1 @|521|1|1|10|@

fn into_inner(self) -> B {
  self.buf
} // Synth time: 398 ms, AST nodes: 1 vs unsimp 1 @|398|1|1|5|@

fn consume(&mut self, amt: usize) {
  ()
} // Synth time: 423 ms, AST nodes: 0 vs unsimp 0 @|423|0|0|10|@

fn new(inner: T, limit: usize) -> buf::take::Take<T> {
  crate::buf::take::Take { inner, limit: limit as usize }
} // Synth time: 286 ms, AST nodes: 6 vs unsimp 6 @|286|6|6|9|@

fn into_inner(self) -> T {
  self.inner
} // Synth time: 269 ms, AST nodes: 1 vs unsimp 1 @|269|1|1|7|@

fn get_ref(&self) -> &T {
  &self.inner
} // Synth time: 341 ms, AST nodes: 1 vs unsimp 7 @|341|1|7|13|@

fn get_mut(&mut self) -> &mut T {
  &mut self.inner
} // Synth time: 375 ms, AST nodes: 1 vs unsimp 7 @|375|1|7|16|@

fn limit(&self) -> usize {
  self.limit
} // Synth time: 361 ms, AST nodes: 5 vs unsimp 5 @|361|5|5|14|@

fn set_limit(&mut self, lim: usize) {
  ()
} // Synth time: 443 ms, AST nodes: 0 vs unsimp 6 @|443|0|6|16|@

fn remaining(&self) -> usize {
  self.limit
} // Synth time: 493 ms, AST nodes: 5 vs unsimp 5 @|493|5|5|14|@

fn advance(&mut self, cnt: usize) {
  ()
} // Synth time: 553 ms, AST nodes: 0 vs unsimp 6 @|553|0|6|16|@

fn new(buf: B) -> buf::writer::Writer<B> {
  crate::buf::writer::Writer { buf }
} // Synth time: 190 ms, AST nodes: 3 vs unsimp 3 @|190|3|3|5|@

fn get_ref(&self) -> &B {
  &self.buf
} // Synth time: 526 ms, AST nodes: 1 vs unsimp 1 @|526|1|1|8|@

fn get_mut(&mut self) -> &mut B {
  &mut self.buf
} // Synth time: 564 ms, AST nodes: 1 vs unsimp 1 @|564|1|1|10|@

fn into_inner(self) -> B {
  self.buf
} // Synth time: 426 ms, AST nodes: 1 vs unsimp 1 @|426|1|1|5|@

fn _split_to_must_use() {
  ()
} // Synth time: 93 ms, AST nodes: 0 vs unsimp 0 @|93|0|0|0|@

fn _split_off_must_use() {
  ()
} // Synth time: 95 ms, AST nodes: 0 vs unsimp 0 @|95|0|0|0|@

fn original_capacity_to_repr(cap: usize) -> usize {
  cap
} // Synth time: 205 ms, AST nodes: 1 vs unsimp 1 @|205|1|1|5|@

fn original_capacity_from_repr(repr: usize) -> usize {
  repr
} // Synth time: 208 ms, AST nodes: 1 vs unsimp 1 @|208|1|1|5|@

fn _split_to_must_use() {
  ()
} // Synth time: 90 ms, AST nodes: 0 vs unsimp 0 @|90|0|0|0|@

fn _split_off_must_use() {
  ()
} // Synth time: 99 ms, AST nodes: 0 vs unsimp 0 @|99|0|0|0|@

fn _split_must_use() {
  ()
} // Synth time: 94 ms, AST nodes: 0 vs unsimp 0 @|94|0|0|0|@

fn verbose_stderr(&self) -> bool {
  true
} // Synth time: 279 ms, AST nodes: 1 vs unsimp 6 @|279|1|6|7|@

fn main() {
  ()
} // Synth time: 95 ms, AST nodes: 0 vs unsimp 0 @|95|0|0|0|@

fn new() -> atomic::seq_lock::SeqLock {
  ??
  result
}

fn validate_read(&self, stamp: usize) -> bool {
  true
} // Synth time: 432 ms, AST nodes: 1 vs unsimp 1 @|432|1|1|14|@

fn new(val: T) -> atomic::atomic_cell::AtomicCell<T> {
  ??
  result
}

fn into_inner(self) -> T {
  ??
  result
}

fn abort(self) {
  ()
} // Synth time: 122 ms, AST nodes: 0 vs unsimp 0 @|122|0|0|1|@

fn write(&'static self) -> atomic::seq_lock::SeqLockWriteGuard {
  ??
  result
}

fn drop(&mut self) {
  ()
} // Synth time: 204 ms, AST nodes: 0 vs unsimp 0 @|204|0|0|4|@

fn optimistic_read(&self) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 363 ms, AST nodes: 1 vs unsimp 1 @|363|1|1|12|@

fn is_lock_free() -> bool {
  true
} // Synth time: 143 ms, AST nodes: 1 vs unsimp 1 @|143|1|1|2|@

fn store(&self, val: T) {
  ()
} // Synth time: 440 ms, AST nodes: 0 vs unsimp 0 @|440|0|0|3|@

fn swap(&self, val: T) -> T {
  val
} // Synth time: 236 ms, AST nodes: 1 vs unsimp 1 @|236|1|1|5|@

fn take(&self) -> T {
  std::default::Default::default()
} // Synth time: 377 ms, AST nodes: 1 vs unsimp 1 @|377|1|1|7|@

fn load(&self) -> T {
  ??
  result
}

fn compare_and_swap(&self, current: T, new: T) -> T {
  current
} // Synth time: 283 ms, AST nodes: 1 vs unsimp 1 @|283|1|1|7|@

fn compare_exchange(&self, current: T, new: T) -> std::result::Result<T, T> {
  ::std::result::Result::Ok(current)
} // Synth time: 336 ms, AST nodes: 3 vs unsimp 3 @|336|3|3|9|@

fn fetch_update(&self, f: F) -> std::result::Result<T, T> {
  ??
  result
}

fn drop(&mut self) {
  ()
} // Synth time: 203 ms, AST nodes: 0 vs unsimp 0 @|203|0|0|4|@

fn fetch_and(&self, val: bool) -> bool {
  val
} // Synth time: 244 ms, AST nodes: 1 vs unsimp 1 @|244|1|1|7|@

fn fetch_nand(&self, val: bool) -> bool {
  val
} // Synth time: 288 ms, AST nodes: 1 vs unsimp 1 @|288|1|1|7|@

fn fetch_or(&self, val: bool) -> bool {
  val
} // Synth time: 246 ms, AST nodes: 1 vs unsimp 1 @|246|1|1|7|@

fn fetch_xor(&self, val: bool) -> bool {
  val
} // Synth time: 244 ms, AST nodes: 1 vs unsimp 1 @|244|1|1|7|@

fn default() -> atomic::atomic_cell::AtomicCell<T> {
  ??
  result
}

fn from(val: T) -> atomic::atomic_cell::AtomicCell<T> {
  ??
  result
}

fn can_transmute() -> bool {
  true
} // Synth time: 143 ms, AST nodes: 1 vs unsimp 1 @|143|1|1|2|@

fn lock(addr: usize) -> &'static atomic::seq_lock::SeqLock {
  ??
  result
}

fn atomic_is_lock_free() -> bool {
  true
} // Synth time: 135 ms, AST nodes: 1 vs unsimp 1 @|135|1|1|2|@

fn new(t: T) -> cache_padded::CachePadded<T> {
  crate::cache_padded::CachePadded { value: t }
} // Synth time: 191 ms, AST nodes: 3 vs unsimp 3 @|191|3|3|5|@

fn into_inner(self) -> T {
  self.value
} // Synth time: 206 ms, AST nodes: 1 vs unsimp 1 @|206|1|1|5|@

fn deref(&self) -> &T {
  &self.value
} // Synth time: 251 ms, AST nodes: 1 vs unsimp 1 @|251|1|1|8|@

fn deref_mut(&mut self) -> &mut T {
  &mut self.value
} // Synth time: 289 ms, AST nodes: 1 vs unsimp 1 @|289|1|1|10|@

fn from(t: T) -> cache_padded::CachePadded<T> {
  crate::cache_padded::CachePadded { value: t }
} // Synth time: 193 ms, AST nodes: 3 vs unsimp 3 @|193|3|3|5|@

fn new() -> backoff::Backoff {
  ??
  result
}

fn reset(&self) {
  ()
} // Synth time: 251 ms, AST nodes: 0 vs unsimp 0 @|251|0|0|10|@

fn spin(&self) {
  ()
} // Synth time: 250 ms, AST nodes: 0 vs unsimp 0 @|250|0|0|10|@

fn snooze(&self) {
  ()
} // Synth time: 254 ms, AST nodes: 0 vs unsimp 0 @|254|0|0|10|@

fn is_completed(&self) -> bool {
  true
} // Synth time: 372 ms, AST nodes: 1 vs unsimp 1 @|372|1|1|12|@

fn default() -> backoff::Backoff {
  ??
  result
}

fn current_index() -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 160 ms, AST nodes: 1 vs unsimp 1 @|160|1|1|2|@

fn drop(&mut self) {
  ()
} // Synth time: 205 ms, AST nodes: 0 vs unsimp 0 @|205|0|0|4|@

fn clone(&self) -> Either<L, R> {
  ??
  result
}

fn clone_from(&mut self, source: &Either<L, R>) {
  ()
} // Synth time: 280 ms, AST nodes: 0 vs unsimp 0 @|280|0|0|6|@

fn right(self) -> core::option::Option<R> {
  ::core::option::Option::None
} // Synth time: 337 ms, AST nodes: 1 vs unsimp 1 @|337|1|1|3|@

fn is_left(&self) -> bool {
  true
} // Synth time: 236 ms, AST nodes: 1 vs unsimp 1 @|236|1|1|4|@

fn as_ref(&self) -> Either<&L, &R> {
  match self {
    crate::Either::Left(_0) => crate::Either::Left(_0),
    crate::Either::Right(_0) => crate::Either::Right(_0),
  }
} // Synth time: 563 ms, AST nodes: 13 vs unsimp 13 @|563|13|13|20|@

fn is_right(&self) -> bool {
  true
} // Synth time: 234 ms, AST nodes: 1 vs unsimp 1 @|234|1|1|4|@

fn left(self) -> core::option::Option<L> {
  ::core::option::Option::None
} // Synth time: 500 ms, AST nodes: 1 vs unsimp 1 @|500|1|1|3|@

fn flip(self) -> Either<R, L> {
  match self {
    crate::Either::Left(_0) => crate::Either::Right(_0),
    crate::Either::Right(_0) => crate::Either::Left(_0),
  }
} // Synth time: 429 ms, AST nodes: 13 vs unsimp 13 @|429|13|13|15|@

fn map_left(self, f: F) -> Either<M, R> {
  ??
  result
}

fn map_right(self, f: F) -> Either<L, S> {
  ??
  result
}

fn either(self, f: F, g: G) -> T {
  ??
  result
}

fn either_with(self, ctx: Ctx, f: F, g: G) -> T {
  ??
  result
}

fn left_and_then(self, f: F) -> Either<S, R> {
  ??
  result
}

fn right_and_then(self, f: F) -> Either<L, S> {
  ??
  result
}

fn left_or(self, other: L) -> L {
  other
} // Synth time: 319 ms, AST nodes: 1 vs unsimp 1 @|319|1|1|4|@

fn left_or_default(self) -> L {
  core::default::Default::default()
} // Synth time: 1114 ms, AST nodes: 1 vs unsimp 1 @|1114|1|1|6|@

fn left_or_else(self, f: F) -> L {
  ??
  result
}

fn right_or(self, other: R) -> R {
  other
} // Synth time: 262 ms, AST nodes: 1 vs unsimp 1 @|262|1|1|4|@

fn right_or_default(self) -> R {
  core::default::Default::default()
} // Synth time: 1054 ms, AST nodes: 1 vs unsimp 1 @|1054|1|1|6|@

fn right_or_else(self, f: F) -> R {
  ??
  result
}

fn unwrap_left(self) -> L {
  ??
  result
}

fn unwrap_right(self) -> R {
  ??
  result
}

fn either_into(self) -> T {
  ??
  result
}

fn factor_none(self) -> core::option::Option<Either<L, R>> {
  match self {
    crate::Either::Left(_0) => match _0 {
        ::core::option::Option::None => ::core::option::Option::None,
        ::core::option::Option::Some(_0) => {
          let _0 = crate::Either::Left(_0);
          ::core::option::Option::Some(_0)
        }
      },
    crate::Either::Right(_0) => match _0 {

fn factor_err(self) -> core::result::Result<Either<L, R>, E> {
  match self {
    crate::Either::Left(_0) => match _0 {
        ::core::result::Result::Ok(_0) => {
          let _0 = crate::Either::Left(_0);
          ::core::result::Result::Ok(_0)
        }
        ::core::result::Result::Err(_0) => ::core::result::Result::Err(_0),
      },
    crate::Either::Right(_0) => match _0 {

fn factor_ok(self) -> core::result::Result<T, Either<L, R>> {
  match self {
    crate::Either::Left(_0) => match _0 {
        ::core::result::Result::Ok(_0) => ::core::result::Result::Ok(_0),
        ::core::result::Result::Err(_0) => {
          let _0 = crate::Either::Left(_0);
          ::core::result::Result::Err(_0)
        }
      },
    crate::Either::Right(_0) => match _0 {

fn factor_first(self) -> (T, Either<L, R>) {
  match self {
    crate::Either::Left(_0) => {
      let _1 = crate::Either::Left(_0.1);
      (_0.0, _1)
    }
    crate::Either::Right(_0) => {
      let _1 = crate::Either::Right(_0.1);
      (_0.0, _1)
    }

fn factor_second(self) -> (Either<L, R>, T) {
  match self {
    crate::Either::Left(_0_self) => {
      let _0_result = crate::Either::Left(_0_self.0);
      (_0_result, _0_self.1)
    }
    crate::Either::Right(_0_self) => {
      let _0_result = crate::Either::Right(_0_self.0);
      (_0_result, _0_self.1)
    }

fn into_inner(self) -> T {
  match self {
    crate::Either::Left(_0) => _0,
    crate::Either::Right(_0) => _0,
  }
} // Synth time: 273 ms, AST nodes: 9 vs unsimp 9 @|273|9|9|11|@

fn map(self, f: F) -> Either<M, M> {
  ??
  result
}

fn from(r: core::result::Result<R, L>) -> Either<L, R> {
  match r {
    ::core::result::Result::Ok(_0) => crate::Either::Right(_0),
    ::core::result::Result::Err(_0) => crate::Either::Left(_0),
  }
} // Synth time: 408 ms, AST nodes: 13 vs unsimp 13 @|408|13|13|15|@

fn into(self) -> core::result::Result<R, L> {
  match self {
    crate::Either::Left(_0) => ::core::result::Result::Err(_0),
    crate::Either::Right(_0) => ::core::result::Result::Ok(_0),
  }
} // Synth time: 428 ms, AST nodes: 13 vs unsimp 13 @|428|13|13|15|@

fn extend(&mut self, iter: T) {
  ()
} // Synth time: 405 ms, AST nodes: 0 vs unsimp 0 @|405|0|0|5|@

fn size_hint(&self) -> (usize, core::option::Option<usize>) {
  (0 as usize, ::core::option::Option::None)
} // Synth time: 425 ms, AST nodes: 6 vs unsimp 6 @|425|6|6|8|@

fn fold(self, init: Acc, f: G) -> Acc {
  init
} // Synth time: 648 ms, AST nodes: 1 vs unsimp 1 @|648|1|1|5|@

fn for_each(self, f: F) {
  ()
} // Synth time: 220 ms, AST nodes: 0 vs unsimp 0 @|220|0|0|2|@

fn count(self) -> usize {
  0 as usize
} // Synth time: 541 ms, AST nodes: 1 vs unsimp 1 @|541|1|1|3|@

fn collect(self) -> B {
  ??
  result
}

fn partition(self, f: F) -> (B, B) {
  let result_1 = core::default::Default::default();
  let result_2 = core::default::Default::default();
  (result_1, result_2)
} // Synth time: 305863 ms, AST nodes: 9 vs unsimp 9 @|305863|9|9|14|@

fn all(&mut self, f: F) -> bool {
  true
} // Synth time: 686 ms, AST nodes: 1 vs unsimp 1 @|686|1|1|7|@

fn any(&mut self, f: F) -> bool {
  true
} // Synth time: 675 ms, AST nodes: 1 vs unsimp 1 @|675|1|1|7|@

fn find_map(&mut self, f: F) -> core::option::Option<B> {
  ::core::option::Option::None
} // Synth time: 712 ms, AST nodes: 1 vs unsimp 1 @|712|1|1|7|@

fn position(&mut self, predicate: P) -> core::option::Option<usize> {
  ::core::option::Option::None
} // Synth time: 778 ms, AST nodes: 1 vs unsimp 1 @|778|1|1|7|@

fn rfold(self, init: Acc, f: G) -> Acc {
  init
} // Synth time: 388 ms, AST nodes: 1 vs unsimp 1 @|388|1|1|5|@

fn len(&self) -> usize {
  0 as usize
} // Synth time: 306 ms, AST nodes: 1 vs unsimp 1 @|306|1|1|4|@

fn consume(&mut self, amt: usize) {
  ()
} // Synth time: 344 ms, AST nodes: 0 vs unsimp 0 @|344|0|0|6|@

fn as_ref(&self) -> &Target {
  ??
  result
}

fn as_mut(&mut self) -> &mut Target {
  ??
  result
}

fn _unsized_ref_propagation() {
  ()
} // Synth time: 92 ms, AST nodes: 0 vs unsimp 0 @|92|0|0|0|@

fn _unsized_std_propagation() {
  ()
} // Synth time: 98 ms, AST nodes: 0 vs unsimp 0 @|98|0|0|0|@

fn finish(&self) -> u64 {
  self.0
} // Synth time: 310 ms, AST nodes: 5 vs unsimp 5 @|310|5|5|13|@

fn default() -> FnvHasher {
  crate::FnvHasher(0 as u64)
} // Synth time: 167 ms, AST nodes: 4 vs unsimp 4 @|167|4|4|4|@

fn with_key(key: u64) -> FnvHasher {
  crate::FnvHasher(key as u64)
} // Synth time: 249 ms, AST nodes: 4 vs unsimp 4 @|249|4|4|6|@

fn new(t: T) -> lock::Lock<T> {
  ??
  result
}

fn try_lock(&self) -> std::option::Option<lock::TryLock<'_, T>> {
  ::std::option::Option::None
} // Synth time: 471 ms, AST nodes: 1 vs unsimp 1 @|471|1|1|17|@

fn deref_mut(&mut self) -> &mut T {
  ??
  result
}

fn deref(&self) -> &T {
  ??
  result
}

fn drop(&mut self) {
  ()
} // Synth time: 283 ms, AST nodes: 0 vs unsimp 0 @|283|0|0|4|@

fn is_disconnected(&self) -> bool {
  true
} // Synth time: 330 ms, AST nodes: 1 vs unsimp 1 @|330|1|1|8|@

fn is_full(&self) -> bool {
  true
} // Synth time: 317 ms, AST nodes: 1 vs unsimp 1 @|317|1|1|8|@

fn is_full(&self) -> bool {
  true
} // Synth time: 415 ms, AST nodes: 1 vs unsimp 1 @|415|1|1|13|@

fn is_disconnected(&self) -> bool {
  true
} // Synth time: 464 ms, AST nodes: 1 vs unsimp 1 @|464|1|1|13|@

fn into_inner(self) -> T {
  self.val
} // Synth time: 441 ms, AST nodes: 1 vs unsimp 1 @|441|1|1|15|@

fn into_send_error(self) -> mpsc::SendError {
  crate::mpsc::SendError { kind: crate::mpsc::SendErrorKind::Full }
} // Synth time: 504 ms, AST nodes: 3 vs unsimp 3 @|504|3|3|5|@

fn is_closed(&self) -> bool {
  self.is_open
} // Synth time: 462 ms, AST nodes: 5 vs unsimp 18 @|462|5|18|20|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.num_messages;
  (de as usize, ::std::option::Option::None)
} // Synth time: 592 ms, AST nodes: 12 vs unsimp 23 @|592|12|23|23|@

fn decode_state(num: usize) -> mpsc::State {
  crate::mpsc::State { is_open: true, num_messages: num as usize }
} // Synth time: 264 ms, AST nodes: 6 vs unsimp 6 @|264|6|6|8|@

fn encode_state(state: &mpsc::State) -> usize {
  state.num_messages
} // Synth time: 536 ms, AST nodes: 5 vs unsimp 16 @|536|5|16|20|@

fn is_terminated(&self) -> bool {
  true
} // Synth time: 246 ms, AST nodes: 1 vs unsimp 1 @|246|1|1|8|@

fn is_terminated(&&mut self) -> bool {
  true
} // Synth time: 234 ms, AST nodes: 1 vs unsimp 1 @|234|1|1|6|@

fn size_hint(&&mut self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 368 ms, AST nodes: 6 vs unsimp 6 @|368|6|6|10|@

fn is_terminated(&self) -> bool {
  true
} // Synth time: 268 ms, AST nodes: 1 vs unsimp 1 @|268|1|1|8|@

fn is_terminated(&&mut self) -> bool {
  true
} // Synth time: 234 ms, AST nodes: 1 vs unsimp 1 @|234|1|1|6|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 397 ms, AST nodes: 6 vs unsimp 6 @|397|6|6|12|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 388 ms, AST nodes: 6 vs unsimp 6 @|388|6|6|12|@

fn is_terminated(&self) -> bool {
  true
} // Synth time: 301 ms, AST nodes: 1 vs unsimp 1 @|301|1|1|8|@

fn is_shutdown(&self) -> bool {
  true
} // Synth time: 277 ms, AST nodes: 1 vs unsimp 7 @|277|1|7|10|@

fn status(&&self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 329 ms, AST nodes: 3 vs unsimp 3 @|329|3|3|7|@

fn shutdown() -> spawn::SpawnError {
  crate::spawn::SpawnError { _priv: () }
} // Synth time: 144 ms, AST nodes: 3 vs unsimp 3 @|144|3|3|3|@

fn status(&&mut self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 328 ms, AST nodes: 3 vs unsimp 3 @|328|3|3|7|@

fn status_local(&&mut self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 324 ms, AST nodes: 3 vs unsimp 3 @|324|3|3|7|@

fn status(&self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 336 ms, AST nodes: 3 vs unsimp 3 @|336|3|3|9|@

fn status_local(&&self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 316 ms, AST nodes: 3 vs unsimp 3 @|316|3|3|7|@

fn status_local(&self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 343 ms, AST nodes: 3 vs unsimp 3 @|343|3|3|9|@

fn code(self) -> core::num::NonZeroU32 {
  self.0
} // Synth time: 224 ms, AST nodes: 1 vs unsimp 1 @|224|1|1|6|@

fn raw_os_error(self) -> core::option::Option<i32> {
  ::core::option::Option::None
} // Synth time: 299 ms, AST nodes: 1 vs unsimp 1 @|299|1|1|5|@

fn from(code: core::num::NonZeroU32) -> error::Error {
  crate::error::Error(code)
} // Synth time: 244 ms, AST nodes: 3 vs unsimp 3 @|244|3|3|6|@

fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
  0 as usize
} // Synth time: 392 ms, AST nodes: 1 vs unsimp 1 @|392|1|1|13|@

fn new() -> util::LazyUsize {
  ??
  result
}

fn new() -> util::LazyBool {
  ??
  result
}

fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
  true
} // Synth time: 448 ms, AST nodes: 1 vs unsimp 1 @|448|1|1|17|@

fn get_errno() -> i32 {
  0 as i32
} // Synth time: 145 ms, AST nodes: 1 vs unsimp 1 @|145|1|1|2|@

fn last_os_error() -> error::Error {
  ??
  result
}

fn get_rng_fd() -> core::result::Result<i32, error::Error> {
  ::core::result::Result::Ok(0 as i32)
} // Synth time: 253 ms, AST nodes: 4 vs unsimp 4 @|253|4|4|4|@

fn drop(&mut self) {
  ()
} // Synth time: 208 ms, AST nodes: 0 vs unsimp 0 @|208|0|0|4|@

fn resolve(&self) -> std::option::Option<(usize, header::map::HashValue)> {
  ::std::option::Option::None
} // Synth time: 650 ms, AST nodes: 1 vs unsimp 26 @|650|1|26|27|@

fn to_red(&mut self) {
  ()
} // Synth time: 294 ms, AST nodes: 0 vs unsimp 0 @|294|0|0|4|@

fn is_none(&self) -> bool {
  true
} // Synth time: 618 ms, AST nodes: 1 vs unsimp 26 @|618|1|26|27|@

fn is_some(&self) -> bool {
  true
} // Synth time: 621 ms, AST nodes: 1 vs unsimp 26 @|621|1|26|27|@

fn none() -> header::map::Pos {
  let hash = crate::header::map::HashValue(0 as u16);
  crate::header::map::Pos { index: 0 as u16, hash }
} // Synth time: 209 ms, AST nodes: 11 vs unsimp 11 @|209|11|11|8|@

fn is_yellow(&self) -> bool {
  true
} // Synth time: 301 ms, AST nodes: 1 vs unsimp 1 @|301|1|1|4|@

fn is_red(&self) -> bool {
  true
} // Synth time: 249 ms, AST nodes: 1 vs unsimp 1 @|249|1|1|4|@

fn new(index: usize, hash: header::map::HashValue) -> header::map::Pos {
  let hash_result = crate::header::map::HashValue(hash.0 as u16);
  crate::header::map::Pos { index: hash.0 as u16, hash: hash_result }
} // Synth time: 451 ms, AST nodes: 15 vs unsimp 15 @|451|15|15|14|@

fn to_yellow(&mut self) {
  ()
} // Synth time: 273 ms, AST nodes: 0 vs unsimp 0 @|273|0|0|4|@

fn to_green(&mut self) {
  ()
} // Synth time: 284 ms, AST nodes: 0 vs unsimp 0 @|284|0|0|4|@

fn usable_capacity(cap: usize) -> usize {
  cap
} // Synth time: 209 ms, AST nodes: 1 vs unsimp 1 @|209|1|1|5|@

fn to_raw_capacity(n: usize) -> usize {
  n
} // Synth time: 204 ms, AST nodes: 1 vs unsimp 1 @|204|1|1|5|@

fn desired_pos(mask: u16, hash: header::map::HashValue) -> usize {
  hash.0 as usize
} // Synth time: 289 ms, AST nodes: 1 vs unsimp 1 @|289|1|1|8|@

fn probe_distance(mask: u16, hash: header::map::HashValue, current: usize) -> usize {
  current
} // Synth time: 282 ms, AST nodes: 1 vs unsimp 1 @|282|1|1|8|@

fn hash_elem_using(danger: &header::map::Danger, k: &K) -> header::map::HashValue {
  crate::header::map::HashValue(0 as u16)
} // Synth time: 355 ms, AST nodes: 4 vs unsimp 4 @|355|4|4|8|@

fn new() -> header::name::InvalidHeaderName {
  crate::header::name::InvalidHeaderName { _priv: () }
} // Synth time: 149 ms, AST nodes: 3 vs unsimp 3 @|149|3|3|3|@

fn is_visible_ascii(b: u8) -> bool {
  true
} // Synth time: 179 ms, AST nodes: 1 vs unsimp 1 @|179|1|1|4|@

fn is_valid(b: u8) -> bool {
  true
} // Synth time: 170 ms, AST nodes: 1 vs unsimp 1 @|170|1|1|4|@

fn new() -> method::InvalidMethod {
  crate::method::InvalidMethod { _priv: () }
} // Synth time: 149 ms, AST nodes: 3 vs unsimp 3 @|149|3|3|3|@

fn from_u16(src: u16) -> std::result::Result<status::StatusCode, status::InvalidStatusCode> {
  let _0 = crate::status::InvalidStatusCode { _priv: () };
  ::std::result::Result::Err(_0)
} // Synth time: 314 ms, AST nodes: 7 vs unsimp 7 @|314|7|7|7|@

fn as_u16(&self) -> u16 {
  0 as u16
} // Synth time: 468 ms, AST nodes: 1 vs unsimp 12 @|468|1|12|18|@

fn is_informational(&self) -> bool {
  true
} // Synth time: 473 ms, AST nodes: 1 vs unsimp 12 @|473|1|12|18|@

fn is_success(&self) -> bool {
  true
} // Synth time: 481 ms, AST nodes: 1 vs unsimp 12 @|481|1|12|18|@

fn is_redirection(&self) -> bool {
  true
} // Synth time: 507 ms, AST nodes: 1 vs unsimp 12 @|507|1|12|18|@

fn is_client_error(&self) -> bool {
  true
} // Synth time: 410 ms, AST nodes: 1 vs unsimp 12 @|410|1|12|18|@

fn is_server_error(&self) -> bool {
  true
} // Synth time: 481 ms, AST nodes: 1 vs unsimp 12 @|481|1|12|18|@

fn default() -> status::StatusCode {
  ??
  result
}

fn eq(&self, other: &u16) -> bool {
  true
} // Synth time: 605 ms, AST nodes: 1 vs unsimp 17 @|605|1|17|24|@

fn eq(&self, other: &status::StatusCode) -> bool {
  true
} // Synth time: 595 ms, AST nodes: 1 vs unsimp 17 @|595|1|17|24|@

fn from(status: status::StatusCode) -> u16 {
  0 as u16
} // Synth time: 199 ms, AST nodes: 1 vs unsimp 1 @|199|1|1|5|@

fn from<'a>(t: &'a status::StatusCode) -> status::StatusCode {
  *t
} // Synth time: 372 ms, AST nodes: 4 vs unsimp 12 @|372|4|12|17|@

fn new() -> status::InvalidStatusCode {
  crate::status::InvalidStatusCode { _priv: () }
} // Synth time: 146 ms, AST nodes: 3 vs unsimp 3 @|146|3|3|3|@

fn as_u16(&self) -> u16 {
  self.port
} // Synth time: 359 ms, AST nodes: 5 vs unsimp 5 @|359|5|5|14|@

fn from_str(bytes: T) -> std::result::Result<uri::port::Port<T>, uri::InvalidUri> {
  let _0 = crate::uri::port::Port { port: 0 as u16, repr: bytes };
  ::std::result::Result::Ok(_0)
} // Synth time: 482 ms, AST nodes: 10 vs unsimp 10 @|482|10|10|9|@

fn from(port: uri::port::Port<T>) -> u16 {
  0 as u16
} // Synth time: 290 ms, AST nodes: 1 vs unsimp 1 @|290|1|1|3|@

fn eq(&self, other: &uri::port::Port<U>) -> bool {
  true
} // Synth time: 709 ms, AST nodes: 1 vs unsimp 13 @|709|1|13|24|@

fn eq(&self, other: &u16) -> bool {
  true
} // Synth time: 547 ms, AST nodes: 1 vs unsimp 12 @|547|1|12|19|@

fn eq(&self, other: &uri::port::Port<T>) -> bool {
  true
} // Synth time: 521 ms, AST nodes: 1 vs unsimp 12 @|521|1|12|19|@

fn is_none(&self) -> bool {
  true
} // Synth time: 295 ms, AST nodes: 1 vs unsimp 1 @|295|1|1|4|@

fn len(&self) -> usize {
  0 as usize
} // Synth time: 469 ms, AST nodes: 1 vs unsimp 6 @|469|1|6|15|@

fn from(src: uri::scheme::Protocol) -> uri::scheme::Scheme2<T> {
  crate::uri::scheme::Scheme2::None
} // Synth time: 324 ms, AST nodes: 1 vs unsimp 1 @|324|1|1|9|@

fn from(src: uri::ErrorKind) -> uri::InvalidUri {
  crate::uri::InvalidUri(src)
} // Synth time: 437 ms, AST nodes: 3 vs unsimp 3 @|437|3|3|5|@

fn from(src: uri::ErrorKind) -> uri::InvalidUriParts {
  let _0 = crate::uri::InvalidUri(src);
  crate::uri::InvalidUriParts(_0)
} // Synth time: 449 ms, AST nodes: 7 vs unsimp 7 @|449|7|7|7|@

fn default() -> version::Version {
  crate::version::Version(crate::version::Http::Http09)
} // Synth time: 251 ms, AST nodes: 3 vs unsimp 3 @|251|3|3|4|@

fn is(&self) -> bool {
  true
} // Synth time: 350 ms, AST nodes: 1 vs unsimp 1 @|350|1|1|8|@

fn from(err: status::InvalidStatusCode) -> error::Error {
  let inner = crate::error::ErrorKind::StatusCode(err);
  crate::error::Error { inner }
} // Synth time: 335 ms, AST nodes: 7 vs unsimp 7 @|335|7|7|7|@

fn from(err: method::InvalidMethod) -> error::Error {
  let inner = crate::error::ErrorKind::Method(err);
  crate::error::Error { inner }
} // Synth time: 356 ms, AST nodes: 7 vs unsimp 7 @|356|7|7|7|@

fn from(err: uri::InvalidUri) -> error::Error {
  let inner = crate::error::ErrorKind::Uri(err);
  crate::error::Error { inner }
} // Synth time: 379 ms, AST nodes: 7 vs unsimp 7 @|379|7|7|7|@

fn from(err: uri::InvalidUriParts) -> error::Error {
  let inner = crate::error::ErrorKind::UriParts(err);
  crate::error::Error { inner }
} // Synth time: 395 ms, AST nodes: 7 vs unsimp 7 @|395|7|7|7|@

fn from(err: header::name::InvalidHeaderName) -> error::Error {
  let inner = crate::error::ErrorKind::HeaderName(err);
  crate::error::Error { inner }
} // Synth time: 387 ms, AST nodes: 7 vs unsimp 7 @|387|7|7|7|@

fn from(err: header::value::InvalidHeaderValue) -> error::Error {
  let inner = crate::error::ErrorKind::HeaderValue(err);
  crate::error::Error { inner }
} // Synth time: 393 ms, AST nodes: 7 vs unsimp 7 @|393|7|7|7|@

fn from(err: std::convert::Infallible) -> error::Error {
  ??
  result
}

fn write_u64(&mut self, id: u64) {
  ()
} // Synth time: 354 ms, AST nodes: 0 vs unsimp 6 @|354|0|6|13|@

fn finish(&self) -> u64 {
  self.0
} // Synth time: 306 ms, AST nodes: 5 vs unsimp 5 @|306|5|5|13|@

fn _assert_types() {
  ()
} // Synth time: 100 ms, AST nodes: 0 vs unsimp 0 @|100|0|0|0|@

fn adapt(delta: u32, num_points: u32, first_time: bool) -> u32 {
  delta
} // Synth time: 285 ms, AST nodes: 1 vs unsimp 1 @|285|1|1|9|@

fn default() -> uts46::Config {
  crate::uts46::Config { use_std3_ascii_rules: true, transitional_processing: true, verify_dns_length: true, check_hyphens: true, use_idna_2008_rules: true }
} // Synth time: 284 ms, AST nodes: 11 vs unsimp 11 @|284|11|11|12|@

fn transitional_processing(self, value: bool) -> uts46::Config {
  self
} // Synth time: 234 ms, AST nodes: 1 vs unsimp 1 @|234|1|1|6|@

fn verify_dns_length(self, value: bool) -> uts46::Config {
  self
} // Synth time: 222 ms, AST nodes: 1 vs unsimp 1 @|222|1|1|6|@

fn use_idna_2008_rules(self, value: bool) -> uts46::Config {
  self
} // Synth time: 329 ms, AST nodes: 1 vs unsimp 1 @|329|1|1|6|@

fn use_std3_ascii_rules(self, value: bool) -> uts46::Config {
  self
} // Synth time: 227 ms, AST nodes: 1 vs unsimp 1 @|227|1|1|6|@

fn is_err(&self) -> bool {
  self.disallowed_in_idna_2008
} // Synth time: 990 ms, AST nodes: 5 vs unsimp 71 @|990|5|71|68|@

fn check_hyphens(self, value: bool) -> uts46::Config {
  self
} // Synth time: 229 ms, AST nodes: 1 vs unsimp 1 @|229|1|1|6|@

fn from(e: uts46::Errors) -> std::result::Result<(), uts46::Errors> {
  ::std::result::Result::Err(e)
} // Synth time: 307 ms, AST nodes: 3 vs unsimp 3 @|307|3|3|5|@

fn equivalent(&self, key: &K) -> bool {
  true
} // Synth time: 239 ms, AST nodes: 1 vs unsimp 1 @|239|1|1|6|@

fn third(t: (A, B, C)) -> C {
  t.2
} // Synth time: 245 ms, AST nodes: 1 vs unsimp 1 @|245|1|1|7|@

fn simplify_range(range: R, len: usize) -> core::ops::Range<usize> {
  ::core::ops::Range { start: len as usize, end: len }
} // Synth time: 420 ms, AST nodes: 6 vs unsimp 6 @|420|6|6|10|@

fn clone_from(&mut self, other: &Bucket<K, V>) {
  ()
} // Synth time: 805 ms, AST nodes: 0 vs unsimp 28 @|805|0|28|41|@

fn clone(&self) -> Bucket<K, V> {
  ??
  result
}

fn get(self) -> u64 {
  self.0 as u64
} // Synth time: 220 ms, AST nodes: 1 vs unsimp 1 @|220|1|1|6|@

fn value_ref(&self) -> &V {
  &self.value
} // Synth time: 624 ms, AST nodes: 1 vs unsimp 15 @|624|1|15|20|@

fn key_ref(&self) -> &K {
  &self.key
} // Synth time: 575 ms, AST nodes: 1 vs unsimp 15 @|575|1|15|20|@

fn value_mut(&mut self) -> &mut V {
  &mut self.value
} // Synth time: 617 ms, AST nodes: 1 vs unsimp 15 @|617|1|15|25|@

fn key(self) -> K {
  self.key
} // Synth time: 376 ms, AST nodes: 1 vs unsimp 1 @|376|1|1|7|@

fn value(self) -> V {
  self.value
} // Synth time: 434 ms, AST nodes: 1 vs unsimp 1 @|434|1|1|7|@

fn key_value(self) -> (K, V) {
  (self.key, self.value)
} // Synth time: 445 ms, AST nodes: 9 vs unsimp 9 @|445|9|9|14|@

fn refs(&self) -> (&K, &V) {
  (&self.key, &self.value)
} // Synth time: 750 ms, AST nodes: 11 vs unsimp 25 @|750|11|25|26|@

fn ref_mut(&mut self) -> (&K, &mut V) {
  (&mut self.key, &mut self.value)
} // Synth time: 675 ms, AST nodes: 11 vs unsimp 25 @|675|11|25|31|@

fn muts(&mut self) -> (&mut K, &mut V) {
  (&mut self.key, &mut self.value)
} // Synth time: 676 ms, AST nodes: 11 vs unsimp 25 @|676|11|25|31|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 541 ms, AST nodes: 6 vs unsimp 6 @|541|6|6|14|@

fn fold(self, acc: Acc, fn_acc: FnAcc) -> Acc {
  acc
} // Synth time: 5803 ms, AST nodes: 1 vs unsimp 1 @|5803|1|1|5|@

fn coalesce_pair(&mut self, t: T, item: Item) -> std::result::Result<T, (T, T)> {
  ::std::result::Result::Ok(t)
} // Synth time: 388 ms, AST nodes: 3 vs unsimp 3 @|388|3|3|10|@

fn coalesce_pair(&mut self, t: T, item: T) -> std::result::Result<T, (T, T)> {
  let _0 = (t, item);
  ::std::result::Result::Err(_0)
} // Synth time: 548 ms, AST nodes: 9 vs unsimp 9 @|548|9|9|18|@

fn dedup_pair(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 342 ms, AST nodes: 1 vs unsimp 1 @|342|1|1|11|@

fn dedup_pair(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 290 ms, AST nodes: 1 vs unsimp 1 @|290|1|1|10|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 489 ms, AST nodes: 6 vs unsimp 6 @|489|6|6|13|@

fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 1964 ms, AST nodes: 1 vs unsimp 1 @|1964|1|1|5|@

fn map_ok(iter: I, f: F) -> adaptors::map::MapSpecialCase<I, adaptors::map::MapSpecialCaseFnOk<F>> {
  let f = crate::adaptors::map::MapSpecialCaseFnOk(f);
  crate::adaptors::map::MapSpecialCase { iter, f }
} // Synth time: 920 ms, AST nodes: 9 vs unsimp 9 @|920|9|9|10|@

fn map_into(iter: I) -> adaptors::map::MapSpecialCase<I, adaptors::map::MapSpecialCaseFnInto<R>> {
  let f = crate::adaptors::map::MapSpecialCaseFnInto(::std::marker::PhantomData);
  crate::adaptors::map::MapSpecialCase { iter, f }
} // Synth time: 222 ms, AST nodes: 9 vs unsimp 9 @|222|9|9|9|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 690 ms, AST nodes: 6 vs unsimp 12 @|690|6|12|26|@

fn interleave_shortest(a: I, b: J) -> adaptors::InterleaveShortest<I, J> {
  crate::adaptors::InterleaveShortest { it0: a, it1: b, phase: true }
} // Synth time: 852 ms, AST nodes: 7 vs unsimp 7 @|852|7|7|10|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 580 ms, AST nodes: 6 vs unsimp 12 @|580|6|12|18|@

fn batching(iter: I, f: F) -> adaptors::Batching<I, F> {
  crate::adaptors::Batching { f, iter }
} // Synth time: 235 ms, AST nodes: 5 vs unsimp 5 @|235|5|5|8|@

fn step(iter: I, step: usize) -> adaptors::Step<I> {
  let result = iter.fuse();
  crate::adaptors::Step { iter: result, skip: step as usize }
} // Synth time: 1118 ms, AST nodes: 9 vs unsimp 9 @|1118|9|9|14|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.skip;
  (de as usize, ::std::option::Option::None)
} // Synth time: 599 ms, AST nodes: 12 vs unsimp 12 @|599|12|12|21|@

fn merge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 394 ms, AST nodes: 1 vs unsimp 1 @|394|1|1|11|@

fn merge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 285 ms, AST nodes: 1 vs unsimp 1 @|285|1|1|10|@

fn take_while_ref(iter: &mut I, f: F) -> adaptors::TakeWhileRef<'_, I, F> {
  crate::adaptors::TakeWhileRef { iter, f }
} // Synth time: 452 ms, AST nodes: 5 vs unsimp 5 @|452|5|5|11|@

fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 518 ms, AST nodes: 6 vs unsimp 6 @|518|6|6|13|@

fn while_some(iter: I) -> adaptors::WhileSome<I> {
  crate::adaptors::WhileSome { iter }
} // Synth time: 195 ms, AST nodes: 3 vs unsimp 3 @|195|3|3|5|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 458 ms, AST nodes: 6 vs unsimp 6 @|458|6|6|12|@

fn from(iter: I) -> adaptors::Tuple1Combination<I> {
  crate::adaptors::Tuple1Combination { iter }
} // Synth time: 198 ms, AST nodes: 3 vs unsimp 3 @|198|3|3|5|@

fn filter_ok(iter: I, f: F) -> adaptors::FilterOk<I, F> {
  crate::adaptors::FilterOk { iter, f }
} // Synth time: 352 ms, AST nodes: 5 vs unsimp 5 @|352|5|5|8|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 465 ms, AST nodes: 6 vs unsimp 6 @|465|6|6|13|@

fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 2378 ms, AST nodes: 1 vs unsimp 1 @|2378|1|1|5|@

fn transpose_result(result: std::result::Result<std::option::Option<T>, E>) -> std::option::Option<std::result::Result<T, E>> {
  ??
  result
}

fn filter_map_ok(iter: I, f: F) -> adaptors::FilterMapOk<I, F> {
  crate::adaptors::FilterMapOk { iter, f }
} // Synth time: 362 ms, AST nodes: 5 vs unsimp 5 @|362|5|5|8|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 526 ms, AST nodes: 6 vs unsimp 6 @|526|6|6|13|@

fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 2015 ms, AST nodes: 1 vs unsimp 1 @|2015|1|1|5|@

fn positions(iter: I, f: F) -> adaptors::Positions<I, F> {
  crate::adaptors::Positions { iter, f, count: 0 as usize }
} // Synth time: 906 ms, AST nodes: 8 vs unsimp 8 @|906|8|8|10|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.count;
  (de as usize, ::std::option::Option::None)
} // Synth time: 594 ms, AST nodes: 12 vs unsimp 12 @|594|12|12|18|@

fn update(iter: I, f: F) -> adaptors::Update<I, F> {
  crate::adaptors::Update { iter, f }
} // Synth time: 351 ms, AST nodes: 5 vs unsimp 5 @|351|5|5|8|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 492 ms, AST nodes: 6 vs unsimp 6 @|492|6|6|13|@

fn fold(self, init: Acc, g: G) -> Acc {
  init
} // Synth time: 2187 ms, AST nodes: 1 vs unsimp 1 @|2187|1|1|5|@

fn has_left(&self) -> bool {
  true
} // Synth time: 301 ms, AST nodes: 1 vs unsimp 1 @|301|1|1|4|@

fn has_right(&self) -> bool {
  true
} // Synth time: 303 ms, AST nodes: 1 vs unsimp 1 @|303|1|1|4|@

fn is_left(&self) -> bool {
  true
} // Synth time: 261 ms, AST nodes: 1 vs unsimp 1 @|261|1|1|4|@

fn is_right(&self) -> bool {
  true
} // Synth time: 303 ms, AST nodes: 1 vs unsimp 1 @|303|1|1|4|@

fn is_both(&self) -> bool {
  true
} // Synth time: 297 ms, AST nodes: 1 vs unsimp 1 @|297|1|1|4|@

fn left(self) -> std::option::Option<A> {
  ::std::option::Option::None
} // Synth time: 387 ms, AST nodes: 1 vs unsimp 1 @|387|1|1|3|@

fn right(self) -> std::option::Option<B> {
  ::std::option::Option::None
} // Synth time: 384 ms, AST nodes: 1 vs unsimp 1 @|384|1|1|3|@

fn both(self) -> std::option::Option<(A, B)> {
  ::std::option::Option::None
} // Synth time: 504 ms, AST nodes: 1 vs unsimp 1 @|504|1|1|3|@

fn as_ref(&self) -> either_or_both::EitherOrBoth<&A, &B> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
  }
} // Synth time: 695 ms, AST nodes: 21 vs unsimp 21 @|695|21|21|30|@

fn as_mut(&mut self) -> either_or_both::EitherOrBoth<&mut A, &mut B> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
  }
} // Synth time: 769 ms, AST nodes: 21 vs unsimp 21 @|769|21|21|38|@

fn flip(self) -> either_or_both::EitherOrBoth<B, A> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _1) => crate::either_or_both::EitherOrBoth::Both(_1, _0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
  }
} // Synth time: 577 ms, AST nodes: 23 vs unsimp 23 @|577|23|23|25|@

fn map_left(self, f: F) -> either_or_both::EitherOrBoth<M, B> {
  ??
  result
}

fn map_right(self, f: F) -> either_or_both::EitherOrBoth<A, M> {
  ??
  result
}

fn map_any(self, f: F, g: G) -> either_or_both::EitherOrBoth<L, R> {
  ??
  result
}

fn left_and_then(self, f: F) -> either_or_both::EitherOrBoth<L, B> {
  ??
  result
}

fn right_and_then(self, f: F) -> either_or_both::EitherOrBoth<A, R> {
  ??
  result
}

fn or(self, l: A, r: B) -> (A, B) {
  (l, r)
} // Synth time: 519 ms, AST nodes: 5 vs unsimp 5 @|519|5|5|9|@

fn or_default(self) -> (A, B) {
  ??
  result
}

fn or_else(self, l: L, r: R) -> (A, B) {
  ??
  result
}

fn reduce(self, f: F) -> T {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => _0,
    crate::either_or_both::EitherOrBoth::Left(_0) => _0,
    crate::either_or_both::EitherOrBoth::Right(_0) => _0,
  }
} // Synth time: 512 ms, AST nodes: 15 vs unsimp 15 @|512|15|15|20|@

fn into(self) -> std::option::Option<either::Either<A, B>> {
  ::std::option::Option::None
} // Synth time: 436 ms, AST nodes: 1 vs unsimp 1 @|436|1|1|3|@

fn fold(iterable: I, init: B, f: F) -> B {
  init
} // Synth time: 196 ms, AST nodes: 1 vs unsimp 1 @|196|1|1|5|@

fn all(iterable: I, f: F) -> bool {
  true
} // Synth time: 206 ms, AST nodes: 1 vs unsimp 1 @|206|1|1|4|@

fn any(iterable: I, f: F) -> bool {
  true
} // Synth time: 166 ms, AST nodes: 1 vs unsimp 1 @|166|1|1|4|@

fn new(iter: I, key_mapper: F) -> grouping_map::MapForGrouping<I, F> {
  crate::grouping_map::MapForGrouping(iter, key_mapper)
} // Synth time: 231 ms, AST nodes: 5 vs unsimp 5 @|231|5|5|8|@

fn new(iter: I) -> grouping_map::GroupingMap<I> {
  crate::grouping_map::GroupingMap { iter }
} // Synth time: 324 ms, AST nodes: 3 vs unsimp 3 @|324|3|3|5|@

fn new(size: usize) -> groupbylazy::ChunkIndex {
  crate::groupbylazy::ChunkIndex { size: size as usize, index: size as usize, key: size as usize }
} // Synth time: 317 ms, AST nodes: 10 vs unsimp 10 @|317|10|10|10|@

fn generate(&mut self) -> Item {
  self.0.clone()
} // Synth time: 358 ms, AST nodes: 5 vs unsimp 5 @|358|5|5|16|@

fn generate(&mut self) -> Item {
  ??
  result
}

fn kmerge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 403 ms, AST nodes: 1 vs unsimp 1 @|403|1|1|11|@

fn kmerge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 286 ms, AST nodes: 1 vs unsimp 1 @|286|1|1|10|@

fn into_option(self) -> std::option::Option<(T, T)> {
  ::std::option::Option::None
} // Synth time: 450 ms, AST nodes: 1 vs unsimp 1 @|450|1|1|3|@

fn pad_using(iter: I, min: usize, filler: F) -> pad_tail::PadUsing<I, F> {
  let result = iter.fuse();
  crate::pad_tail::PadUsing { iter: result, min: min as usize, pos: min as usize, filler }
} // Synth time: 1893 ms, AST nodes: 14 vs unsimp 14 @|1893|14|14|19|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.min;
  (de as usize, ::std::option::Option::None)
} // Synth time: 750 ms, AST nodes: 12 vs unsimp 18 @|750|12|18|27|@

fn peeking_take_while(iter: &mut I, f: F) -> peeking_take_while::PeekingTakeWhile<'_, I, F> {
  crate::peeking_take_while::PeekingTakeWhile { iter, f }
} // Synth time: 430 ms, AST nodes: 5 vs unsimp 5 @|430|5|5|11|@

fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 433 ms, AST nodes: 6 vs unsimp 6 @|433|6|6|13|@

fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 576 ms, AST nodes: 6 vs unsimp 6 @|576|6|6|13|@

fn fold<'a>(self, init: B, f: F) -> B {
  self.iter.count();
  init
} // Synth time: 14497 ms, AST nodes: 6 vs unsimp 6 @|14497|6|6|17|@

fn process_results(iterable: I, processor: F) -> std::result::Result<R, E> {
  ??
  result
}

fn repeat_n(element: A, n: usize) -> repeatn::RepeatN<A> {
  let elt = ::std::option::Option::Some(element);
  crate::repeatn::RepeatN { elt, n: n as usize }
} // Synth time: 494 ms, AST nodes: 10 vs unsimp 10 @|494|10|10|11|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.n;
  (de as usize, ::std::option::Option::None)
} // Synth time: 537 ms, AST nodes: 12 vs unsimp 12 @|537|12|12|17|@

fn add(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 282 ms, AST nodes: 1 vs unsimp 1 @|282|1|1|5|@

fn add_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 317 ms, AST nodes: 1 vs unsimp 1 @|317|1|1|6|@

fn sub_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 316 ms, AST nodes: 1 vs unsimp 1 @|316|1|1|6|@

fn mul(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 281 ms, AST nodes: 1 vs unsimp 1 @|281|1|1|5|@

fn mul_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 319 ms, AST nodes: 1 vs unsimp 1 @|319|1|1|6|@

fn pow_scalar_base(base: usize, exp: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  exp
} // Synth time: 307 ms, AST nodes: 1 vs unsimp 1 @|307|1|1|6|@

fn max(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 295 ms, AST nodes: 1 vs unsimp 1 @|295|1|1|5|@

fn min(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 299 ms, AST nodes: 1 vs unsimp 1 @|299|1|1|5|@

fn repeat_call(function: F) -> sources::RepeatCall<F> {
  crate::sources::RepeatCall { f: function }
} // Synth time: 190 ms, AST nodes: 3 vs unsimp 3 @|190|3|3|5|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 403 ms, AST nodes: 6 vs unsimp 6 @|403|6|6|12|@

fn unfold(initial_state: St, f: F) -> sources::Unfold<St, F> {
  crate::sources::Unfold { f, state: initial_state }
} // Synth time: 233 ms, AST nodes: 5 vs unsimp 5 @|233|5|5|8|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 433 ms, AST nodes: 6 vs unsimp 6 @|433|6|6|13|@

fn iterate(initial_value: St, f: F) -> sources::Iterate<St, F> {
  crate::sources::Iterate { state: initial_value, f }
} // Synth time: 242 ms, AST nodes: 5 vs unsimp 5 @|242|5|5|8|@

fn tuple_windows(iter: I) -> tuple_impl::TupleWindows<I, T> {
  crate::tuple_impl::TupleWindows { iter, last: ::std::option::Option::None }
} // Synth time: 367 ms, AST nodes: 5 vs unsimp 5 @|367|5|5|7|@

fn key_ref(&self) -> &K {
  &self.0
} // Synth time: 288 ms, AST nodes: 1 vs unsimp 1 @|288|1|1|9|@

fn key(self) -> K {
  self.0
} // Synth time: 224 ms, AST nodes: 1 vs unsimp 1 @|224|1|1|6|@

fn value(self) -> V {
  self.1
} // Synth time: 219 ms, AST nodes: 1 vs unsimp 1 @|219|1|1|6|@

fn key_ref(&self) -> &V {
  &self.0
} // Synth time: 258 ms, AST nodes: 1 vs unsimp 1 @|258|1|1|8|@

fn key(self) -> V {
  self.0
} // Synth time: 197 ms, AST nodes: 1 vs unsimp 1 @|197|1|1|5|@

fn value(self) -> V {
  self.0
} // Synth time: 208 ms, AST nodes: 1 vs unsimp 1 @|208|1|1|5|@

fn multiunzip(i: I) -> FromI {
  ??
  result
}

fn into_inner(self) -> T {
  match self {
    crate::with_position::Position::First(_0) => _0,
    crate::with_position::Position::Middle(_0) => _0,
    crate::with_position::Position::Last(_0) => _0,
    crate::with_position::Position::Only(_0) => _0,
  }
} // Synth time: 419 ms, AST nodes: 17 vs unsimp 17 @|419|17|17|21|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 502 ms, AST nodes: 6 vs unsimp 6 @|502|6|6|13|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 553 ms, AST nodes: 6 vs unsimp 6 @|553|6|6|21|@

fn multizip(t: U) -> ziptuple::Zip<T> {
  ??
  result
}

fn equal(a: I, b: J) -> bool {
  true
} // Synth time: 167 ms, AST nodes: 1 vs unsimp 1 @|167|1|1|4|@

fn assert_equal(a: I, b: J) {
  ()
} // Synth time: 118 ms, AST nodes: 0 vs unsimp 0 @|118|0|0|2|@

fn partition(iter: I, pred: F) -> usize {
  0 as usize
} // Synth time: 167 ms, AST nodes: 1 vs unsimp 1 @|167|1|1|4|@

fn into_inner(self) -> T {
  match self {
    crate::FoldWhile::Continue(_0) => _0,
    crate::FoldWhile::Done(_0) => _0,
  }
} // Synth time: 329 ms, AST nodes: 9 vs unsimp 9 @|329|9|9|11|@

fn is_done(&self) -> bool {
  true
} // Synth time: 226 ms, AST nodes: 1 vs unsimp 1 @|226|1|1|4|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 535 ms, AST nodes: 6 vs unsimp 6 @|535|6|6|14|@

fn fold(self, acc: Acc, fn_acc: FnAcc) -> Acc {
  acc
} // Synth time: 5880 ms, AST nodes: 1 vs unsimp 1 @|5880|1|1|5|@

fn coalesce_pair(&mut self, t: T, item: Item) -> std::result::Result<T, (T, T)> {
  ::std::result::Result::Ok(t)
} // Synth time: 359 ms, AST nodes: 3 vs unsimp 3 @|359|3|3|10|@

fn coalesce_pair(&mut self, t: T, item: T) -> std::result::Result<T, (T, T)> {
  let _0 = (t, item);
  ::std::result::Result::Err(_0)
} // Synth time: 551 ms, AST nodes: 9 vs unsimp 9 @|551|9|9|18|@

fn dedup_pair(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 285 ms, AST nodes: 1 vs unsimp 1 @|285|1|1|10|@

fn dedup_pair(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 301 ms, AST nodes: 1 vs unsimp 1 @|301|1|1|11|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 476 ms, AST nodes: 6 vs unsimp 6 @|476|6|6|13|@

fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 2265 ms, AST nodes: 1 vs unsimp 1 @|2265|1|1|5|@

fn map_ok(iter: I, f: F) -> adaptors::map::MapSpecialCase<I, adaptors::map::MapSpecialCaseFnOk<F>> {
  let f = crate::adaptors::map::MapSpecialCaseFnOk(f);
  crate::adaptors::map::MapSpecialCase { iter, f }
} // Synth time: 1030 ms, AST nodes: 9 vs unsimp 9 @|1030|9|9|10|@

fn map_into(iter: I) -> adaptors::map::MapSpecialCase<I, adaptors::map::MapSpecialCaseFnInto<R>> {
  let f = crate::adaptors::map::MapSpecialCaseFnInto(::std::marker::PhantomData);
  crate::adaptors::map::MapSpecialCase { iter, f }
} // Synth time: 233 ms, AST nodes: 9 vs unsimp 9 @|233|9|9|9|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 641 ms, AST nodes: 6 vs unsimp 12 @|641|6|12|26|@

fn interleave_shortest(a: I, b: J) -> adaptors::InterleaveShortest<I, J> {
  crate::adaptors::InterleaveShortest { it0: a, it1: b, phase: true }
} // Synth time: 882 ms, AST nodes: 7 vs unsimp 7 @|882|7|7|10|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 594 ms, AST nodes: 6 vs unsimp 12 @|594|6|12|18|@

fn batching(iter: I, f: F) -> adaptors::Batching<I, F> {
  crate::adaptors::Batching { f, iter }
} // Synth time: 221 ms, AST nodes: 5 vs unsimp 5 @|221|5|5|8|@

fn step(iter: I, step: usize) -> adaptors::Step<I> {
  let result = iter.fuse();
  crate::adaptors::Step { iter: result, skip: step as usize }
} // Synth time: 1056 ms, AST nodes: 9 vs unsimp 9 @|1056|9|9|14|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.skip;
  (de as usize, ::std::option::Option::None)
} // Synth time: 599 ms, AST nodes: 12 vs unsimp 12 @|599|12|12|21|@

fn take_while_ref(iter: &mut I, f: F) -> adaptors::TakeWhileRef<'_, I, F> {
  crate::adaptors::TakeWhileRef { iter, f }
} // Synth time: 432 ms, AST nodes: 5 vs unsimp 5 @|432|5|5|11|@

fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 507 ms, AST nodes: 6 vs unsimp 6 @|507|6|6|13|@

fn while_some(iter: I) -> adaptors::WhileSome<I> {
  crate::adaptors::WhileSome { iter }
} // Synth time: 198 ms, AST nodes: 3 vs unsimp 3 @|198|3|3|5|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 465 ms, AST nodes: 6 vs unsimp 6 @|465|6|6|12|@

fn fold(self, acc: B, f: F) -> B {
  self.iter.count();
  acc
} // Synth time: 2128 ms, AST nodes: 6 vs unsimp 6 @|2128|6|6|13|@

fn from(iter: I) -> adaptors::Tuple1Combination<I> {
  crate::adaptors::Tuple1Combination { iter }
} // Synth time: 194 ms, AST nodes: 3 vs unsimp 3 @|194|3|3|5|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 447 ms, AST nodes: 6 vs unsimp 6 @|447|6|6|12|@

fn count(self) -> usize {
  self.iter.count()
} // Synth time: 738 ms, AST nodes: 4 vs unsimp 4 @|738|4|4|12|@

fn fold(self, init: B, f: F) -> B {
  self.iter.count();
  init
} // Synth time: 1889 ms, AST nodes: 6 vs unsimp 6 @|1889|6|6|13|@

fn checked_binomial(n: usize, k: usize) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 288 ms, AST nodes: 1 vs unsimp 1 @|288|1|1|6|@

fn filter_ok(iter: I, f: F) -> adaptors::FilterOk<I, F> {
  crate::adaptors::FilterOk { iter, f }
} // Synth time: 354 ms, AST nodes: 5 vs unsimp 5 @|354|5|5|8|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 503 ms, AST nodes: 6 vs unsimp 6 @|503|6|6|13|@

fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 1913 ms, AST nodes: 1 vs unsimp 1 @|1913|1|1|5|@

fn transpose_result(result: std::result::Result<std::option::Option<T>, E>) -> std::option::Option<std::result::Result<T, E>> {
  ??
  result
}

fn filter_map_ok(iter: I, f: F) -> adaptors::FilterMapOk<I, F> {
  crate::adaptors::FilterMapOk { iter, f }
} // Synth time: 635 ms, AST nodes: 5 vs unsimp 5 @|635|5|5|8|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 689 ms, AST nodes: 6 vs unsimp 6 @|689|6|6|13|@

fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 2964 ms, AST nodes: 1 vs unsimp 1 @|2964|1|1|5|@

fn positions(iter: I, f: F) -> adaptors::Positions<I, F> {
  crate::adaptors::Positions { iter, f, count: 0 as usize }
} // Synth time: 953 ms, AST nodes: 8 vs unsimp 8 @|953|8|8|10|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.count;
  (de as usize, ::std::option::Option::None)
} // Synth time: 588 ms, AST nodes: 12 vs unsimp 12 @|588|12|12|18|@

fn update(iter: I, f: F) -> adaptors::Update<I, F> {
  crate::adaptors::Update { iter, f }
} // Synth time: 359 ms, AST nodes: 5 vs unsimp 5 @|359|5|5|8|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 480 ms, AST nodes: 6 vs unsimp 6 @|480|6|6|13|@

fn fold(self, init: Acc, g: G) -> Acc {
  init
} // Synth time: 2214 ms, AST nodes: 1 vs unsimp 1 @|2214|1|1|5|@

fn has_left(&self) -> bool {
  true
} // Synth time: 307 ms, AST nodes: 1 vs unsimp 1 @|307|1|1|4|@

fn has_right(&self) -> bool {
  true
} // Synth time: 298 ms, AST nodes: 1 vs unsimp 1 @|298|1|1|4|@

fn is_left(&self) -> bool {
  true
} // Synth time: 306 ms, AST nodes: 1 vs unsimp 1 @|306|1|1|4|@

fn is_right(&self) -> bool {
  true
} // Synth time: 299 ms, AST nodes: 1 vs unsimp 1 @|299|1|1|4|@

fn is_both(&self) -> bool {
  true
} // Synth time: 310 ms, AST nodes: 1 vs unsimp 1 @|310|1|1|4|@

fn left(self) -> std::option::Option<A> {
  ::std::option::Option::None
} // Synth time: 382 ms, AST nodes: 1 vs unsimp 1 @|382|1|1|3|@

fn right(self) -> std::option::Option<B> {
  ::std::option::Option::None
} // Synth time: 366 ms, AST nodes: 1 vs unsimp 1 @|366|1|1|3|@

fn left_and_right(self) -> (std::option::Option<A>, std::option::Option<B>) {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _1) => {
      let _1 = ::std::option::Option::Some(_1);
      let _0 = ::std::option::Option::Some(_0);
      (_0, _1)
    }
    crate::either_or_both::EitherOrBoth::Left(_0) => {
      let _0 = ::std::option::Option::Some(_0);
      (_0, ::std::option::Option::None)

fn just_left(self) -> std::option::Option<A> {
  ::std::option::Option::None
} // Synth time: 373 ms, AST nodes: 1 vs unsimp 1 @|373|1|1|3|@

fn just_right(self) -> std::option::Option<B> {
  ::std::option::Option::None
} // Synth time: 321 ms, AST nodes: 1 vs unsimp 1 @|321|1|1|3|@

fn both(self) -> std::option::Option<(A, B)> {
  ::std::option::Option::None
} // Synth time: 475 ms, AST nodes: 1 vs unsimp 1 @|475|1|1|3|@

fn into_left(self) -> A {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => _0,
    crate::either_or_both::EitherOrBoth::Left(_0) => _0,
    crate::either_or_both::EitherOrBoth::Right(_0) => _0.into(),
  }
} // Synth time: 570 ms, AST nodes: 16 vs unsimp 16 @|570|16|16|22|@

fn into_right(self) -> B {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_, _1) => _1,
    crate::either_or_both::EitherOrBoth::Left(_0) => _0.into(),
    crate::either_or_both::EitherOrBoth::Right(_0) => _0,
  }
} // Synth time: 576 ms, AST nodes: 16 vs unsimp 16 @|576|16|16|22|@

fn as_ref(&self) -> either_or_both::EitherOrBoth<&A, &B> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
  }
} // Synth time: 708 ms, AST nodes: 21 vs unsimp 21 @|708|21|21|30|@

fn as_mut(&mut self) -> either_or_both::EitherOrBoth<&mut A, &mut B> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
  }
} // Synth time: 829 ms, AST nodes: 21 vs unsimp 21 @|829|21|21|38|@

fn flip(self) -> either_or_both::EitherOrBoth<B, A> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _1) => crate::either_or_both::EitherOrBoth::Both(_1, _0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
  }
} // Synth time: 585 ms, AST nodes: 23 vs unsimp 23 @|585|23|23|25|@

fn map_left(self, f: F) -> either_or_both::EitherOrBoth<M, B> {
  ??
  result
}

fn map_right(self, f: F) -> either_or_both::EitherOrBoth<A, M> {
  ??
  result
}

fn map_any(self, f: F, g: G) -> either_or_both::EitherOrBoth<L, R> {
  ??
  result
}

fn left_and_then(self, f: F) -> either_or_both::EitherOrBoth<L, B> {
  ??
  result
}

fn right_and_then(self, f: F) -> either_or_both::EitherOrBoth<A, R> {
  ??
  result
}

fn or(self, l: A, r: B) -> (A, B) {
  (l, r)
} // Synth time: 529 ms, AST nodes: 5 vs unsimp 5 @|529|5|5|9|@

fn or_default(self) -> (A, B) {
  ??
  result
}

fn or_else(self, l: L, r: R) -> (A, B) {
  ??
  result
}

fn left_or_insert(&mut self, val: A) -> &mut A {
  ??
  result
}

fn right_or_insert(&mut self, val: B) -> &mut B {
  ??
  result
}

fn left_or_insert_with(&mut self, f: F) -> &mut A {
  ??
  result
}

fn right_or_insert_with(&mut self, f: F) -> &mut B {
  ??
  result
}

fn insert_left(&mut self, val: A) -> &mut A {
  ??
  result
}

fn insert_right(&mut self, val: B) -> &mut B {
  ??
  result
}

fn insert_both(&mut self, left: A, right: B) -> (&mut A, &mut B) {
  ??
  result
}

fn reduce(self, f: F) -> T {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => _0,
    crate::either_or_both::EitherOrBoth::Left(_0) => _0,
    crate::either_or_both::EitherOrBoth::Right(_0) => _0,
  }
} // Synth time: 510 ms, AST nodes: 15 vs unsimp 15 @|510|15|15|20|@

fn into(self) -> std::option::Option<either::Either<A, B>> {
  ::std::option::Option::None
} // Synth time: 459 ms, AST nodes: 1 vs unsimp 1 @|459|1|1|3|@

fn from(either: either::Either<A, B>) -> either_or_both::EitherOrBoth<A, B> {
  match either {
    ::either::Either::Left(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
    ::either::Either::Right(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
  }
} // Synth time: 449 ms, AST nodes: 13 vs unsimp 13 @|449|13|13|15|@

fn fold(iterable: I, init: B, f: F) -> B {
  init
} // Synth time: 190 ms, AST nodes: 1 vs unsimp 1 @|190|1|1|5|@

fn all(iterable: I, f: F) -> bool {
  true
} // Synth time: 162 ms, AST nodes: 1 vs unsimp 1 @|162|1|1|4|@

fn any(iterable: I, f: F) -> bool {
  true
} // Synth time: 167 ms, AST nodes: 1 vs unsimp 1 @|167|1|1|4|@

fn key_ref(&self) -> &K {
  &self.0
} // Synth time: 282 ms, AST nodes: 1 vs unsimp 1 @|282|1|1|9|@

fn key(self) -> K {
  self.0
} // Synth time: 221 ms, AST nodes: 1 vs unsimp 1 @|221|1|1|6|@

fn value(self) -> V {
  self.1
} // Synth time: 239 ms, AST nodes: 1 vs unsimp 1 @|239|1|1|6|@

fn key_ref(&self) -> &V {
  &self.0
} // Synth time: 263 ms, AST nodes: 1 vs unsimp 1 @|263|1|1|8|@

fn key(self) -> V {
  self.0
} // Synth time: 205 ms, AST nodes: 1 vs unsimp 1 @|205|1|1|5|@

fn value(self) -> V {
  self.0
} // Synth time: 212 ms, AST nodes: 1 vs unsimp 1 @|212|1|1|5|@

fn new(size: usize) -> groupbylazy::ChunkIndex {
  crate::groupbylazy::ChunkIndex { size: size as usize, index: size as usize, key: size as usize }
} // Synth time: 309 ms, AST nodes: 10 vs unsimp 10 @|309|10|10|10|@

fn new(iter: I, key_mapper: F) -> grouping_map::MapForGrouping<I, F> {
  crate::grouping_map::MapForGrouping(iter, key_mapper)
} // Synth time: 222 ms, AST nodes: 5 vs unsimp 5 @|222|5|5|8|@

fn new(iter: I) -> grouping_map::GroupingMap<I> {
  crate::grouping_map::GroupingMap { iter }
} // Synth time: 317 ms, AST nodes: 3 vs unsimp 3 @|317|3|3|5|@

fn generate(&mut self) -> Item {
  self.0.clone()
} // Synth time: 383 ms, AST nodes: 5 vs unsimp 5 @|383|5|5|16|@

fn generate(&mut self) -> Item {
  ??
  result
}

fn kmerge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 347 ms, AST nodes: 1 vs unsimp 1 @|347|1|1|11|@

fn kmerge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 283 ms, AST nodes: 1 vs unsimp 1 @|283|1|1|10|@

fn size_hint(left: (usize, std::option::Option<usize>), right: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  left
} // Synth time: 290 ms, AST nodes: 1 vs unsimp 1 @|290|1|1|5|@

fn size_hint(left: (usize, std::option::Option<usize>), right: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  left
} // Synth time: 282 ms, AST nodes: 1 vs unsimp 1 @|282|1|1|5|@

fn size_hint(left: (usize, std::option::Option<usize>), right: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  left
} // Synth time: 278 ms, AST nodes: 1 vs unsimp 1 @|278|1|1|5|@

fn size_hint(left: (usize, std::option::Option<usize>), right: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  left
} // Synth time: 254 ms, AST nodes: 1 vs unsimp 1 @|254|1|1|5|@

fn into_option(self) -> std::option::Option<(T, T)> {
  ::std::option::Option::None
} // Synth time: 430 ms, AST nodes: 1 vs unsimp 1 @|430|1|1|3|@

fn pad_using(iter: I, min: usize, filler: F) -> pad_tail::PadUsing<I, F> {
  let result = iter.fuse();
  crate::pad_tail::PadUsing { iter: result, min: min as usize, pos: min as usize, filler }
} // Synth time: 1886 ms, AST nodes: 14 vs unsimp 14 @|1886|14|14|19|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.min;
  (de as usize, ::std::option::Option::None)
} // Synth time: 734 ms, AST nodes: 12 vs unsimp 18 @|734|12|18|27|@

fn peeking_take_while(iter: &mut I, f: F) -> peeking_take_while::PeekingTakeWhile<'_, I, F> {
  crate::peeking_take_while::PeekingTakeWhile { iter, f }
} // Synth time: 438 ms, AST nodes: 5 vs unsimp 5 @|438|5|5|11|@

fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 433 ms, AST nodes: 6 vs unsimp 6 @|433|6|6|13|@

fn remaining_for(n: usize, k: usize) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 282 ms, AST nodes: 1 vs unsimp 1 @|282|1|1|6|@

fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 571 ms, AST nodes: 6 vs unsimp 6 @|571|6|6|13|@

fn fold<'a>(self, init: B, f: F) -> B {
  self.iter.count();
  init
} // Synth time: 13760 ms, AST nodes: 6 vs unsimp 6 @|13760|6|6|17|@

fn process_results(iterable: I, processor: F) -> std::result::Result<R, E> {
  ??
  result
}

fn repeat_n(element: A, n: usize) -> repeatn::RepeatN<A> {
  let elt = ::std::option::Option::Some(element);
  crate::repeatn::RepeatN { elt, n: n as usize }
} // Synth time: 462 ms, AST nodes: 10 vs unsimp 10 @|462|10|10|11|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.n;
  (de as usize, ::std::option::Option::None)
} // Synth time: 531 ms, AST nodes: 12 vs unsimp 12 @|531|12|12|17|@

fn add(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 298 ms, AST nodes: 1 vs unsimp 1 @|298|1|1|5|@

fn add_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 306 ms, AST nodes: 1 vs unsimp 1 @|306|1|1|6|@

fn sub_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 313 ms, AST nodes: 1 vs unsimp 1 @|313|1|1|6|@

fn mul(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 271 ms, AST nodes: 1 vs unsimp 1 @|271|1|1|5|@

fn mul_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 307 ms, AST nodes: 1 vs unsimp 1 @|307|1|1|6|@

fn max(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 277 ms, AST nodes: 1 vs unsimp 1 @|277|1|1|5|@

fn min(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 284 ms, AST nodes: 1 vs unsimp 1 @|284|1|1|5|@

fn repeat_call(function: F) -> sources::RepeatCall<F> {
  crate::sources::RepeatCall { f: function }
} // Synth time: 198 ms, AST nodes: 3 vs unsimp 3 @|198|3|3|5|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 373 ms, AST nodes: 6 vs unsimp 6 @|373|6|6|12|@

fn unfold(initial_state: St, f: F) -> sources::Unfold<St, F> {
  crate::sources::Unfold { f, state: initial_state }
} // Synth time: 225 ms, AST nodes: 5 vs unsimp 5 @|225|5|5|8|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 439 ms, AST nodes: 6 vs unsimp 6 @|439|6|6|13|@

fn iterate(initial_value: St, f: F) -> sources::Iterate<St, F> {
  crate::sources::Iterate { state: initial_value, f }
} // Synth time: 225 ms, AST nodes: 5 vs unsimp 5 @|225|5|5|8|@

fn new(iter: I, predicate: F) -> take_while_inclusive::TakeWhileInclusive<I, F> {
  crate::take_while_inclusive::TakeWhileInclusive { iter, predicate, done: true }
} // Synth time: 900 ms, AST nodes: 7 vs unsimp 7 @|900|7|7|10|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 569 ms, AST nodes: 6 vs unsimp 12 @|569|6|12|18|@

fn add_then_div(n: usize, a: usize, d: usize) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 331 ms, AST nodes: 1 vs unsimp 1 @|331|1|1|8|@

fn tuple_windows(iter: I) -> tuple_impl::TupleWindows<I, T> {
  crate::tuple_impl::TupleWindows { iter, last: ::std::option::Option::None }
} // Synth time: 340 ms, AST nodes: 5 vs unsimp 5 @|340|5|5|7|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 524 ms, AST nodes: 6 vs unsimp 6 @|524|6|6|13|@

fn circular_tuple_windows(iter: I) -> tuple_impl::CircularTupleWindows<I, T> {
  let result = iter.cycle();
  let iter = crate::tuple_impl::TupleWindows { iter: result, last: ::std::option::Option::None };
  crate::tuple_impl::CircularTupleWindows { iter, len: 0 as usize, phantom_data: ::std::marker::PhantomData }
} // Synth time: 118686 ms, AST nodes: 17 vs unsimp 17 @|118686|17|17|18|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.len;
  (de as usize, ::std::option::Option::None)
} // Synth time: 885 ms, AST nodes: 12 vs unsimp 18 @|885|12|18|32|@

fn multiunzip(i: I) -> FromI {
  ??
  result
}

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 524 ms, AST nodes: 6 vs unsimp 6 @|524|6|6|13|@

fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 584 ms, AST nodes: 6 vs unsimp 6 @|584|6|6|21|@

fn fold(self, init: B, f: F) -> B {
  init
} // Synth time: 848 ms, AST nodes: 1 vs unsimp 1 @|848|1|1|5|@

fn multizip(t: U) -> ziptuple::Zip<T> {
  ??
  result
}

fn equal(a: I, b: J) -> bool {
  true
} // Synth time: 160 ms, AST nodes: 1 vs unsimp 1 @|160|1|1|4|@

fn assert_equal(a: I, b: J) {
  ()
} // Synth time: 112 ms, AST nodes: 0 vs unsimp 0 @|112|0|0|2|@

fn partition(iter: I, pred: F) -> usize {
  0 as usize
} // Synth time: 183 ms, AST nodes: 1 vs unsimp 1 @|183|1|1|4|@

fn into_inner(self) -> T {
  match self {
    crate::FoldWhile::Continue(_0) => _0,
    crate::FoldWhile::Done(_0) => _0,
  }
} // Synth time: 318 ms, AST nodes: 9 vs unsimp 9 @|318|9|9|11|@

fn is_done(&self) -> bool {
  true
} // Synth time: 229 ms, AST nodes: 1 vs unsimp 1 @|229|1|1|4|@

fn udivmod_1e19(n: u128) -> (u128, u64) {
  (n as u128, 0 as u64)
} // Synth time: 267 ms, AST nodes: 7 vs unsimp 7 @|267|7|7|8|@

fn u128_mulhi(x: u128, y: u128) -> u128 {
  x
} // Synth time: 256 ms, AST nodes: 1 vs unsimp 1 @|256|1|1|7|@

fn udivmod_1e19(n: u128) -> (u128, u64) {
  (n as u128, 0 as u64)
} // Synth time: 260 ms, AST nodes: 7 vs unsimp 7 @|260|7|7|8|@

fn u128_mulhi(x: u128, y: u128) -> u128 {
  x
} // Synth time: 259 ms, AST nodes: 1 vs unsimp 1 @|259|1|1|7|@

fn initialize(lazy: &T) {
  ()
} // Synth time: 155 ms, AST nodes: 0 vs unsimp 0 @|155|0|0|2|@

fn clone(&self) -> unix::bsd::apple::sysdir_search_path_domain_mask_t {
  *self
} // Synth time: 372 ms, AST nodes: 4 vs unsimp 4 @|372|4|4|8|@

fn clone(&self) -> unix::bsd::apple::timezone {
  *self
} // Synth time: 231 ms, AST nodes: 4 vs unsimp 4 @|231|4|4|8|@

fn clone(&self) -> unix::FILE {
  *self
} // Synth time: 223 ms, AST nodes: 4 vs unsimp 4 @|223|4|4|8|@

fn clone(&self) -> unix::bsd::apple::sysdir_search_path_directory_t {
  *self
} // Synth time: 481 ms, AST nodes: 4 vs unsimp 4 @|481|4|4|8|@

fn clone(&self) -> unix::DIR {
  *self
} // Synth time: 239 ms, AST nodes: 4 vs unsimp 4 @|239|4|4|8|@

fn clone(&self) -> unix::fpos_t {
  *self
} // Synth time: 241 ms, AST nodes: 4 vs unsimp 4 @|241|4|4|8|@

fn __DARWIN_ALIGN32(p: usize) -> usize {
  p
} // Synth time: 204 ms, AST nodes: 1 vs unsimp 1 @|204|1|1|5|@

fn clone(&self) -> unix::bsd::apple::qos_class_t {
  *self
} // Synth time: 374 ms, AST nodes: 4 vs unsimp 4 @|374|4|4|8|@

fn mach_task_self() -> u32 {
  0 as u32
} // Synth time: 134 ms, AST nodes: 1 vs unsimp 1 @|134|1|1|2|@

fn clone(&self) -> unix::fpos_t {
  *self
} // Synth time: 253 ms, AST nodes: 4 vs unsimp 4 @|253|4|4|8|@

fn clone(&self) -> unix::DIR {
  *self
} // Synth time: 245 ms, AST nodes: 4 vs unsimp 4 @|245|4|4|8|@

fn clone(&self) -> unix::bsd::apple::timezone {
  *self
} // Synth time: 244 ms, AST nodes: 4 vs unsimp 4 @|244|4|4|8|@

fn clone(&self) -> unix::FILE {
  *self
} // Synth time: 237 ms, AST nodes: 4 vs unsimp 4 @|237|4|4|8|@

fn clone(&self) -> unix::bsd::apple::qos_class_t {
  *self
} // Synth time: 359 ms, AST nodes: 4 vs unsimp 4 @|359|4|4|8|@

fn clone(&self) -> unix::bsd::apple::sysdir_search_path_directory_t {
  *self
} // Synth time: 461 ms, AST nodes: 4 vs unsimp 4 @|461|4|4|8|@

fn clone(&self) -> unix::bsd::apple::sysdir_search_path_domain_mask_t {
  *self
} // Synth time: 347 ms, AST nodes: 4 vs unsimp 4 @|347|4|4|8|@

fn __DARWIN_ALIGN32(p: usize) -> usize {
  p
} // Synth time: 207 ms, AST nodes: 1 vs unsimp 1 @|207|1|1|5|@

fn mach_task_self() -> u32 {
  0 as u32
} // Synth time: 138 ms, AST nodes: 1 vs unsimp 1 @|138|1|1|2|@

fn clone(&self) -> Level {
  *self
} // Synth time: 362 ms, AST nodes: 4 vs unsimp 4 @|362|4|4|8|@

fn eq(&self, other: &Level) -> bool {
  true
} // Synth time: 1554 ms, AST nodes: 1 vs unsimp 11 @|1554|1|11|240|@

fn lt(&self, other: &Level) -> bool {
  true
} // Synth time: 1544 ms, AST nodes: 1 vs unsimp 11 @|1544|1|11|240|@

fn ge(&self, other: &Level) -> bool {
  true
} // Synth time: 19188 ms, AST nodes: 1 vs unsimp 11 @|19188|1|11|240|@

fn gt(&self, other: &Level) -> bool {
  true
} // Synth time: 20675 ms, AST nodes: 1 vs unsimp 11 @|20675|1|11|240|@

fn partial_cmp(&self, other: &Level) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 22790 ms, AST nodes: 1 vs unsimp 11 @|22790|1|11|240|@

fn eq(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 13129 ms, AST nodes: 1 vs unsimp 11 @|13129|1|11|285|@

fn le(&self, other: &Level) -> bool {
  true
} // Synth time: 2594 ms, AST nodes: 1 vs unsimp 11 @|2594|1|11|240|@

fn partial_cmp(&self, other: &LevelFilter) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 2244 ms, AST nodes: 1 vs unsimp 11 @|2244|1|11|285|@

fn lt(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 2028 ms, AST nodes: 1 vs unsimp 11 @|2028|1|11|285|@

fn le(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 2008 ms, AST nodes: 1 vs unsimp 11 @|2008|1|11|285|@

fn gt(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 2100 ms, AST nodes: 1 vs unsimp 11 @|2100|1|11|285|@

fn ge(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 2155 ms, AST nodes: 1 vs unsimp 11 @|2155|1|11|285|@

fn cmp(&self, other: &Level) -> core::cmp::Ordering {
  ::core::cmp::Ordering::Less
} // Synth time: 1916 ms, AST nodes: 1 vs unsimp 11 @|1916|1|11|240|@

fn ok_or(t: core::option::Option<T>, e: E) -> core::result::Result<T, E> {
  ::core::result::Result::Err(e)
} // Synth time: 654 ms, AST nodes: 3 vs unsimp 3 @|654|3|3|6|@

fn from_usize(u: usize) -> core::option::Option<Level> {
  ::core::option::Option::None
} // Synth time: 266 ms, AST nodes: 1 vs unsimp 1 @|266|1|1|4|@

fn max() -> Level {
  crate::Level::Error
} // Synth time: 182 ms, AST nodes: 1 vs unsimp 1 @|182|1|1|2|@

fn to_level_filter(&self) -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 1678 ms, AST nodes: 1 vs unsimp 6 @|1678|1|6|33|@

fn clone(&self) -> LevelFilter {
  *self
} // Synth time: 1029 ms, AST nodes: 4 vs unsimp 4 @|1029|4|4|8|@

fn eq(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 5967 ms, AST nodes: 1 vs unsimp 11 @|5967|1|11|341|@

fn eq(&self, other: &Level) -> bool {
  true
} // Synth time: 7540 ms, AST nodes: 1 vs unsimp 11 @|7540|1|11|287|@

fn partial_cmp(&self, other: &LevelFilter) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 6429 ms, AST nodes: 1 vs unsimp 11 @|6429|1|11|341|@

fn lt(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 6316 ms, AST nodes: 1 vs unsimp 11 @|6316|1|11|341|@

fn le(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 5029 ms, AST nodes: 1 vs unsimp 11 @|5029|1|11|341|@

fn gt(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 4852 ms, AST nodes: 1 vs unsimp 11 @|4852|1|11|341|@

fn ge(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 4143 ms, AST nodes: 1 vs unsimp 11 @|4143|1|11|341|@

fn partial_cmp(&self, other: &Level) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 4931 ms, AST nodes: 1 vs unsimp 11 @|4931|1|11|287|@

fn lt(&self, other: &Level) -> bool {
  true
} // Synth time: 3809 ms, AST nodes: 1 vs unsimp 11 @|3809|1|11|287|@

fn le(&self, other: &Level) -> bool {
  true
} // Synth time: 3139 ms, AST nodes: 1 vs unsimp 11 @|3139|1|11|287|@

fn gt(&self, other: &Level) -> bool {
  true
} // Synth time: 3383 ms, AST nodes: 1 vs unsimp 11 @|3383|1|11|287|@

fn ge(&self, other: &Level) -> bool {
  true
} // Synth time: 3786 ms, AST nodes: 1 vs unsimp 11 @|3786|1|11|287|@

fn cmp(&self, other: &LevelFilter) -> core::cmp::Ordering {
  ::core::cmp::Ordering::Less
} // Synth time: 4310 ms, AST nodes: 1 vs unsimp 11 @|4310|1|11|341|@

fn from_usize(u: usize) -> core::option::Option<LevelFilter> {
  ::core::option::Option::None
} // Synth time: 451 ms, AST nodes: 1 vs unsimp 1 @|451|1|1|4|@

fn max() -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 403 ms, AST nodes: 1 vs unsimp 1 @|403|1|1|2|@

fn to_level(&self) -> core::option::Option<Level> {
  ::core::option::Option::None
} // Synth time: 1040 ms, AST nodes: 1 vs unsimp 6 @|1040|1|6|39|@

fn flush(&self) {
  ()
} // Synth time: 216 ms, AST nodes: 0 vs unsimp 0 @|216|0|0|4|@

fn flush(&&self) {
  ()
} // Synth time: 519 ms, AST nodes: 0 vs unsimp 0 @|519|0|0|4|@

fn set_max_level(level: LevelFilter) {
  ()
} // Synth time: 369 ms, AST nodes: 0 vs unsimp 0 @|369|0|0|1|@

fn max_level() -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 496 ms, AST nodes: 1 vs unsimp 1 @|496|1|1|2|@

fn set_logger_inner(make_logger: F) -> core::result::Result<(), SetLoggerError> {
  ::core::result::Result::Ok(())
} // Synth time: 321 ms, AST nodes: 3 vs unsimp 3 @|321|3|3|4|@

fn eq(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 2695 ms, AST nodes: 1 vs unsimp 11 @|2695|1|11|285|@

fn partial_cmp(&self, other: &LevelFilter) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 2810 ms, AST nodes: 1 vs unsimp 11 @|2810|1|11|285|@

fn ok_or(t: core::option::Option<T>, e: E) -> core::result::Result<T, E> {
  ::core::result::Result::Err(e)
} // Synth time: 688 ms, AST nodes: 3 vs unsimp 3 @|688|3|3|6|@

fn max() -> Level {
  crate::Level::Error
} // Synth time: 235 ms, AST nodes: 1 vs unsimp 1 @|235|1|1|2|@

fn to_level_filter(&self) -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 1174 ms, AST nodes: 1 vs unsimp 6 @|1174|1|6|33|@

fn eq(&self, other: &Level) -> bool {
  true
} // Synth time: 3297 ms, AST nodes: 1 vs unsimp 11 @|3297|1|11|287|@

fn partial_cmp(&self, other: &Level) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 2701 ms, AST nodes: 1 vs unsimp 11 @|2701|1|11|287|@

fn from_usize(u: usize) -> core::option::Option<Level> {
  ::core::option::Option::None
} // Synth time: 464 ms, AST nodes: 1 vs unsimp 1 @|464|1|1|4|@

fn from_usize(u: usize) -> core::option::Option<LevelFilter> {
  ::core::option::Option::None
} // Synth time: 539 ms, AST nodes: 1 vs unsimp 1 @|539|1|1|4|@

fn max() -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 352 ms, AST nodes: 1 vs unsimp 1 @|352|1|1|2|@

fn to_level(&self) -> core::option::Option<Level> {
  ::core::option::Option::None
} // Synth time: 1471 ms, AST nodes: 1 vs unsimp 6 @|1471|1|6|39|@

fn flush(&self) {
  ()
} // Synth time: 345 ms, AST nodes: 0 vs unsimp 0 @|345|0|0|4|@

fn flush(&&self) {
  ()
} // Synth time: 472 ms, AST nodes: 0 vs unsimp 0 @|472|0|0|4|@

fn set_max_level(level: LevelFilter) {
  ()
} // Synth time: 260 ms, AST nodes: 0 vs unsimp 0 @|260|0|0|1|@

fn set_max_level_racy(level: LevelFilter) {
  ()
} // Synth time: 347 ms, AST nodes: 0 vs unsimp 0 @|347|0|0|1|@

fn max_level() -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 353 ms, AST nodes: 1 vs unsimp 1 @|353|1|1|2|@

fn set_logger_inner(make_logger: F) -> core::result::Result<(), SetLoggerError> {
  ::core::result::Result::Ok(())
} // Synth time: 367 ms, AST nodes: 3 vs unsimp 3 @|367|3|3|4|@

fn get_max_level_inner() -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 438 ms, AST nodes: 1 vs unsimp 1 @|438|1|1|2|@

fn repeat_byte(b: u8) -> usize {
  b as usize
} // Synth time: 306 ms, AST nodes: 1 vs unsimp 1 @|306|1|1|4|@

fn contains_zero_byte(x: usize) -> bool {
  true
} // Synth time: 315 ms, AST nodes: 1 vs unsimp 1 @|315|1|1|4|@

fn is_effective(&mut self) -> bool {
  true
} // Synth time: 664 ms, AST nodes: 1 vs unsimp 13 @|664|1|13|19|@

fn update(&mut self, skipped: usize) {
  ()
} // Synth time: 795 ms, AST nodes: 0 vs unsimp 12 @|795|0|12|19|@

fn is_inert(&self) -> bool {
  true
} // Synth time: 680 ms, AST nodes: 1 vs unsimp 13 @|680|1|13|17|@

fn inert() -> memmem::prefilter::PrefilterState {
  crate::memmem::prefilter::PrefilterState { skips: 0 as u32, skipped: 0 as u32 }
} // Synth time: 328 ms, AST nodes: 7 vs unsimp 7 @|328|7|7|6|@

fn new() -> memmem::prefilter::PrefilterState {
  crate::memmem::prefilter::PrefilterState { skips: 0 as u32, skipped: 0 as u32 }
} // Synth time: 376 ms, AST nodes: 7 vs unsimp 7 @|376|7|7|6|@

fn skips(&self) -> u32 {
  self.skipped
} // Synth time: 736 ms, AST nodes: 5 vs unsimp 11 @|736|5|11|18|@

fn eq(&self, hash: memmem::rabinkarp::Hash) -> bool {
  true
} // Synth time: 1356 ms, AST nodes: 1 vs unsimp 26 @|1356|1|26|31|@

fn new() -> memmem::rabinkarp::Hash {
  crate::memmem::rabinkarp::Hash(0 as u32)
} // Synth time: 294 ms, AST nodes: 4 vs unsimp 4 @|294|4|4|4|@

fn roll(&mut self, nhash: &memmem::rabinkarp::NeedleHash, old: u8, new: u8) {
  ()
} // Synth time: 1380 ms, AST nodes: 0 vs unsimp 36 @|1380|0|36|40|@

fn add(&mut self, byte: u8) {
  ()
} // Synth time: 852 ms, AST nodes: 0 vs unsimp 11 @|852|0|11|15|@

fn del(&mut self, nhash: &memmem::rabinkarp::NeedleHash, byte: u8) {
  ()
} // Synth time: 1208 ms, AST nodes: 0 vs unsimp 36 @|1208|0|36|38|@

fn as_rare_usize(&self) -> (usize, usize) {
  let de = self.rare1i;
  (de as usize, de as usize)
} // Synth time: 1071 ms, AST nodes: 13 vs unsimp 24 @|1071|13|24|23|@

fn rank(b: u8) -> usize {
  b as usize
} // Synth time: 327 ms, AST nodes: 1 vs unsimp 1 @|327|1|1|4|@

fn empty() -> memmem::twoway::TwoWay {
  let shift = crate::memmem::twoway::Shift::Small { period: 0 as usize };
  let byteset = crate::memmem::twoway::ApproximateByteSet(0 as u64);
  crate::memmem::twoway::TwoWay { byteset, critical_pos: 0 as usize, shift }
} // Synth time: 652 ms, AST nodes: 18 vs unsimp 18 @|652|18|18|12|@

fn cmp(self, current: u8, candidate: u8) -> memmem::twoway::SuffixOrdering {
  crate::memmem::twoway::SuffixOrdering::Accept
} // Synth time: 988 ms, AST nodes: 1 vs unsimp 1 @|988|1|1|15|@

fn contains(&self, byte: u8) -> bool {
  true
} // Synth time: 1033 ms, AST nodes: 1 vs unsimp 12 @|1033|1|12|18|@

fn sqrt(x: T) -> T {
  x
} // Synth time: 435 ms, AST nodes: 1 vs unsimp 1 @|435|1|1|3|@

fn nth_root(x: T, n: u32) -> T {
  x
} // Synth time: 428 ms, AST nodes: 1 vs unsimp 1 @|428|1|1|5|@

fn cbrt(x: T) -> T {
  x
} // Synth time: 378 ms, AST nodes: 1 vs unsimp 1 @|378|1|1|3|@

fn fixpoint(x: T, f: F) -> T {
  x
} // Synth time: 833 ms, AST nodes: 1 vs unsimp 1 @|833|1|1|5|@

fn bits() -> u32 {
  0 as u32
} // Synth time: 270 ms, AST nodes: 1 vs unsimp 1 @|270|1|1|2|@

fn log2(x: T) -> u32 {
  0 as u32
} // Synth time: 474 ms, AST nodes: 1 vs unsimp 1 @|474|1|1|3|@

fn average_floor(&self, other: &I) -> I {
  other.div_ceil(self)
} // Synth time: 2000 ms, AST nodes: 3 vs unsimp 3 @|2000|3|3|13|@

fn average_ceil(&self, other: &I) -> I {
  other.div_ceil(self)
} // Synth time: 1991 ms, AST nodes: 3 vs unsimp 3 @|1991|3|3|13|@

fn average_floor(x: T, y: T) -> T {
  x
} // Synth time: 475 ms, AST nodes: 1 vs unsimp 1 @|475|1|1|4|@

fn average_ceil(x: T, y: T) -> T {
  x
} // Synth time: 632 ms, AST nodes: 1 vs unsimp 1 @|632|1|1|4|@

fn div_rem(x: T, y: T) -> (T, T) {
  (x, y)
} // Synth time: 499 ms, AST nodes: 5 vs unsimp 5 @|499|5|5|8|@

fn div_floor(x: T, y: T) -> T {
  x
} // Synth time: 527 ms, AST nodes: 1 vs unsimp 1 @|527|1|1|4|@

fn mod_floor(x: T, y: T) -> T {
  x
} // Synth time: 545 ms, AST nodes: 1 vs unsimp 1 @|545|1|1|4|@

fn div_mod_floor(x: T, y: T) -> (T, T) {
  (x, y)
} // Synth time: 820 ms, AST nodes: 5 vs unsimp 5 @|820|5|5|8|@

fn div_ceil(x: T, y: T) -> T {
  x
} // Synth time: 688 ms, AST nodes: 1 vs unsimp 1 @|688|1|1|4|@

fn gcd(x: T, y: T) -> T {
  x
} // Synth time: 635 ms, AST nodes: 1 vs unsimp 1 @|635|1|1|4|@

fn lcm(x: T, y: T) -> T {
  x
} // Synth time: 530 ms, AST nodes: 1 vs unsimp 1 @|530|1|1|4|@

fn gcd_lcm(x: T, y: T) -> (T, T) {
  (x, y)
} // Synth time: 495 ms, AST nodes: 5 vs unsimp 5 @|495|5|5|8|@

fn new(n: T) -> IterBinomial<T> {
  ??
  result
}

fn next(&mut self) -> core::option::Option<T> {
  ::core::option::Option::None
} // Synth time: 877 ms, AST nodes: 1 vs unsimp 1 @|877|1|1|16|@

fn multiply_and_divide(r: T, a: T, b: T) -> T {
  r
} // Synth time: 628 ms, AST nodes: 1 vs unsimp 1 @|628|1|1|5|@

fn binomial(n: T, k: T) -> T {
  n
} // Synth time: 553 ms, AST nodes: 1 vs unsimp 1 @|553|1|1|4|@

fn min_value() -> core::num::Wrapping<T> {
  ??
  result
}

fn max_value() -> T {
  ??
  result
}

fn max_value() -> core::num::Wrapping<T> {
  ??
  result
}

fn min_value() -> T {
  ??
  result
}

fn cast(n: T) -> core::option::Option<U> {
  ::core::option::Option::None
} // Synth time: 201 ms, AST nodes: 1 vs unsimp 1 @|201|1|1|3|@

fn from(n: U) -> core::option::Option<core::num::Wrapping<T>> {
  ::core::option::Option::None
} // Synth time: 598 ms, AST nodes: 1 vs unsimp 1 @|598|1|1|3|@

fn is_zero(&self) -> bool {
  true
} // Synth time: 358 ms, AST nodes: 1 vs unsimp 1 @|358|1|1|8|@

fn set_zero(&mut self) {
  ()
} // Synth time: 341 ms, AST nodes: 0 vs unsimp 0 @|341|0|0|8|@

fn zero() -> core::num::Wrapping<T> {
  ??
  result
}

fn set_one(&mut self) {
  ()
} // Synth time: 433 ms, AST nodes: 0 vs unsimp 0 @|433|0|0|8|@

fn one() -> core::num::Wrapping<T> {
  ??
  result
}

fn zero() -> T {
  ??
  result
}

fn one() -> T {
  ??
  result
}

fn one_per_byte() -> P {
  ??
  result
}

fn reverse_bits_fallback(i: P) -> P {
  i
} // Synth time: 377 ms, AST nodes: 1 vs unsimp 1 @|377|1|1|4|@

fn wrapping_add(&self, v: &core::num::Wrapping<T>) -> core::num::Wrapping<T> {
  let result = v.0.wrapping_add(&self.0);
  ::core::num::Wrapping(result)
} // Synth time: 913 ms, AST nodes: 13 vs unsimp 13 @|913|13|13|23|@

fn wrapping_sub(&self, v: &core::num::Wrapping<T>) -> core::num::Wrapping<T> {
  let result = v.0.wrapping_sub(&self.0);
  ::core::num::Wrapping(result)
} // Synth time: 843 ms, AST nodes: 13 vs unsimp 13 @|843|13|13|23|@

fn wrapping_mul(&self, v: &core::num::Wrapping<T>) -> core::num::Wrapping<T> {
  let result = v.0.wrapping_mul(&self.0);
  ::core::num::Wrapping(result)
} // Synth time: 1248 ms, AST nodes: 13 vs unsimp 13 @|1248|13|13|23|@

fn wrapping_neg(&self) -> core::num::Wrapping<T> {
  let result = self.0.wrapping_neg();
  ::core::num::Wrapping(result)
} // Synth time: 756 ms, AST nodes: 9 vs unsimp 9 @|756|9|9|15|@

fn wrapping_shl(&self, rhs: u32) -> core::num::Wrapping<T> {
  let result = self.0.wrapping_shl(rhs);
  ::core::num::Wrapping(result)
} // Synth time: 1148 ms, AST nodes: 10 vs unsimp 10 @|1148|10|10|20|@

fn wrapping_shr(&self, rhs: u32) -> core::num::Wrapping<T> {
  let result = self.0.wrapping_shr(rhs);
  ::core::num::Wrapping(result)
} // Synth time: 1130 ms, AST nodes: 10 vs unsimp 10 @|1130|10|10|20|@

fn pow(base: T, exp: usize) -> T {
  base
} // Synth time: 343 ms, AST nodes: 1 vs unsimp 1 @|343|1|1|5|@

fn checked_pow(base: T, exp: usize) -> core::option::Option<T> {
  ::core::option::Option::Some(base)
} // Synth time: 499 ms, AST nodes: 3 vs unsimp 3 @|499|3|3|7|@

fn abs(&self) -> core::num::Wrapping<T> {
  let result = self.0.abs();
  ::core::num::Wrapping(result)
} // Synth time: 846 ms, AST nodes: 9 vs unsimp 9 @|846|9|9|15|@

fn abs_sub(&self, other: &core::num::Wrapping<T>) -> core::num::Wrapping<T> {
  let result = other.0.abs();
  ::core::num::Wrapping(result)
} // Synth time: 1093 ms, AST nodes: 9 vs unsimp 9 @|1093|9|9|21|@

fn signum(&self) -> core::num::Wrapping<T> {
  let result = self.0.abs();
  ::core::num::Wrapping(result)
} // Synth time: 678 ms, AST nodes: 9 vs unsimp 9 @|678|9|9|15|@

fn is_positive(&self) -> bool {
  true
} // Synth time: 389 ms, AST nodes: 1 vs unsimp 1 @|389|1|1|8|@

fn is_negative(&self) -> bool {
  true
} // Synth time: 473 ms, AST nodes: 1 vs unsimp 1 @|473|1|1|8|@

fn abs(value: T) -> T {
  value
} // Synth time: 231 ms, AST nodes: 1 vs unsimp 1 @|231|1|1|3|@

fn abs_sub(x: T, y: T) -> T {
  x
} // Synth time: 287 ms, AST nodes: 1 vs unsimp 1 @|287|1|1|4|@

fn signum(value: T) -> T {
  value
} // Synth time: 235 ms, AST nodes: 1 vs unsimp 1 @|235|1|1|3|@

fn clamp(input: T, min: T, max: T) -> T {
  input
} // Synth time: 466 ms, AST nodes: 1 vs unsimp 1 @|466|1|1|5|@

fn clamp_min(input: T, min: T) -> T {
  input
} // Synth time: 419 ms, AST nodes: 1 vs unsimp 1 @|419|1|1|4|@

fn clamp_max(input: T, max: T) -> T {
  input
} // Synth time: 442 ms, AST nodes: 1 vs unsimp 1 @|442|1|1|4|@

fn default() -> unsync::OnceCell<T> {
  ??
  result
}

fn clone(&self) -> unsync::OnceCell<T> {
  ??
  result
}

fn new() -> unsync::OnceCell<T> {
  ??
  result
}

fn from(value: T) -> unsync::OnceCell<T> {
  ??
  result
}

fn with_value(value: T) -> unsync::OnceCell<T> {
  ??
  result
}

fn eq(&self, other: &unsync::OnceCell<T>) -> bool {
  true
} // Synth time: 553 ms, AST nodes: 1 vs unsimp 1 @|553|1|1|22|@

fn clone_from(&mut self, source: &unsync::OnceCell<T>) {
  ()
} // Synth time: 505 ms, AST nodes: 0 vs unsimp 0 @|505|0|0|22|@

fn get(&self) -> std::option::Option<&T> {
  ::std::option::Option::None
} // Synth time: 405 ms, AST nodes: 1 vs unsimp 1 @|405|1|1|12|@

fn get_mut(&mut self) -> std::option::Option<&mut T> {
  ::std::option::Option::None
} // Synth time: 425 ms, AST nodes: 1 vs unsimp 1 @|425|1|1|14|@

fn set(&self, value: T) -> std::result::Result<(), T> {
  ::std::result::Result::Err(value)
} // Synth time: 452 ms, AST nodes: 3 vs unsimp 3 @|452|3|3|15|@

fn get_or_init(&self, f: F) -> &T {
  ??
  result
}

fn take(&mut self) -> std::option::Option<T> {
  ::std::option::Option::None
} // Synth time: 382 ms, AST nodes: 1 vs unsimp 1 @|382|1|1|14|@

fn into_inner(self) -> std::option::Option<T> {
  ::std::option::Option::None
} // Synth time: 352 ms, AST nodes: 1 vs unsimp 1 @|352|1|1|3|@

fn new(init: F) -> unsync::Lazy<T, F> {
  ??
  result
}

fn into_value(this: unsync::Lazy<T, F>) -> std::result::Result<T, F> {
  ??
  result
}

===== crate:  aho-corasick-0.7.20  =====
synthesized status: False
fn new() -> ahocorasick::AhoCorasickBuilder {
  ??
  result
}

synthesized status: False
fn default() -> ahocorasick::AhoCorasickBuilder {
  ??
  result
}

synthesized status: True
fn match_kind(&mut self, kind: ahocorasick::MatchKind) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 804 ms, AST nodes: 1 vs unsimp 7 @|804|1|7|43|@

synthesized status: True
fn anchored(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 758 ms, AST nodes: 1 vs unsimp 7 @|758|1|7|44|@

synthesized status: True
fn dfa(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 777 ms, AST nodes: 1 vs unsimp 7 @|777|1|7|44|@

synthesized status: True
fn dense_depth(&mut self, depth: usize) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 868 ms, AST nodes: 1 vs unsimp 7 @|868|1|7|44|@

synthesized status: True
fn prefilter(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 819 ms, AST nodes: 1 vs unsimp 7 @|819|1|7|44|@

synthesized status: True
fn ascii_case_insensitive(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 783 ms, AST nodes: 1 vs unsimp 7 @|783|1|7|44|@

synthesized status: True
fn byte_classes(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 740 ms, AST nodes: 1 vs unsimp 7 @|740|1|7|44|@

synthesized status: True
fn premultiply(&mut self, yes: bool) -> &mut ahocorasick::AhoCorasickBuilder {
  self
} // Synth time: 816 ms, AST nodes: 1 vs unsimp 7 @|816|1|7|44|@

synthesized status: True
fn default() -> ahocorasick::MatchKind {
  crate::ahocorasick::MatchKind::Standard
} // Synth time: 163 ms, AST nodes: 1 vs unsimp 1 @|163|1|1|2|@

synthesized status: True
fn supports_overlapping(&self) -> bool {
  true
} // Synth time: 615 ms, AST nodes: 1 vs unsimp 6 @|615|1|6|27|@

synthesized status: True
fn supports_stream(&self) -> bool {
  true
} // Synth time: 618 ms, AST nodes: 1 vs unsimp 6 @|618|1|6|27|@

synthesized status: True
fn is_standard(&self) -> bool {
  true
} // Synth time: 613 ms, AST nodes: 1 vs unsimp 6 @|613|1|6|27|@

synthesized status: True
fn is_leftmost(&self) -> bool {
  true
} // Synth time: 620 ms, AST nodes: 1 vs unsimp 6 @|620|1|6|27|@

synthesized status: True
fn is_leftmost_first(&self) -> bool {
  true
} // Synth time: 624 ms, AST nodes: 1 vs unsimp 6 @|624|1|6|27|@

synthesized status: True
fn as_packed(&self) -> std::option::Option<packed::api::MatchKind> {
  ::std::option::Option::None
} // Synth time: 630 ms, AST nodes: 1 vs unsimp 6 @|630|1|6|27|@

synthesized status: True
fn new() -> dfa::Builder {
  crate::dfa::Builder { premultiply: true, byte_classes: true }
} // Synth time: 186 ms, AST nodes: 5 vs unsimp 5 @|186|5|5|6|@

synthesized status: True
fn byte_classes(&mut self, yes: bool) -> &mut dfa::Builder {
  self
} // Synth time: 493 ms, AST nodes: 1 vs unsimp 13 @|493|1|13|21|@

synthesized status: True
fn premultiply(&mut self, yes: bool) -> &mut dfa::Builder {
  self
} // Synth time: 444 ms, AST nodes: 1 vs unsimp 13 @|444|1|13|21|@

synthesized status: True
fn kind(&self) -> &error::ErrorKind {
  &self.kind
} // Synth time: 362 ms, AST nodes: 1 vs unsimp 1 @|362|1|1|8|@

synthesized status: True
fn state_id_overflow(max: usize) -> error::Error {
  let kind = crate::error::ErrorKind::StateIDOverflow { max: max as usize };
  crate::error::Error { kind }
} // Synth time: 368 ms, AST nodes: 8 vs unsimp 8 @|368|8|8|8|@

synthesized status: True
fn premultiply_overflow(max: usize, requested_max: usize) -> error::Error {
  let kind = crate::error::ErrorKind::StateIDOverflow { max: max as usize };
  crate::error::Error { kind }
} // Synth time: 377 ms, AST nodes: 8 vs unsimp 8 @|377|8|8|10|@

synthesized status: True
fn default() -> nfa::Builder {
  crate::nfa::Builder { dense_depth: 0 as usize, match_kind: crate::ahocorasick::MatchKind::Standard, prefilter: true, anchored: true, ascii_case_insensitive: true }
} // Synth time: 394 ms, AST nodes: 12 vs unsimp 12 @|394|12|12|12|@

synthesized status: True
fn new() -> nfa::Builder {
  crate::nfa::Builder { dense_depth: 0 as usize, match_kind: crate::ahocorasick::MatchKind::Standard, prefilter: true, anchored: true, ascii_case_insensitive: true }
} // Synth time: 405 ms, AST nodes: 12 vs unsimp 12 @|405|12|12|12|@

synthesized status: True
fn match_kind(&mut self, kind: ahocorasick::MatchKind) -> &mut nfa::Builder {
  self
} // Synth time: 890 ms, AST nodes: 1 vs unsimp 31 @|890|1|31|37|@

synthesized status: True
fn dense_depth(&mut self, depth: usize) -> &mut nfa::Builder {
  self
} // Synth time: 819 ms, AST nodes: 1 vs unsimp 31 @|819|1|31|38|@

synthesized status: True
fn prefilter(&mut self, yes: bool) -> &mut nfa::Builder {
  self
} // Synth time: 844 ms, AST nodes: 1 vs unsimp 31 @|844|1|31|38|@

synthesized status: True
fn anchored(&mut self, yes: bool) -> &mut nfa::Builder {
  self
} // Synth time: 810 ms, AST nodes: 1 vs unsimp 31 @|810|1|31|38|@

synthesized status: True
fn ascii_case_insensitive(&mut self, yes: bool) -> &mut nfa::Builder {
  self
} // Synth time: 802 ms, AST nodes: 1 vs unsimp 31 @|802|1|31|38|@

synthesized status: True
fn new() -> nfa::AllBytesIter {
  crate::nfa::AllBytesIter(0 as u16)
} // Synth time: 172 ms, AST nodes: 4 vs unsimp 4 @|172|4|4|4|@

synthesized status: True
fn default() -> packed::api::MatchKind {
  crate::packed::api::MatchKind::LeftmostFirst
} // Synth time: 161 ms, AST nodes: 1 vs unsimp 1 @|161|1|1|2|@

synthesized status: True
fn default() -> packed::api::Config {
  crate::packed::api::Config { kind: crate::packed::api::MatchKind::LeftmostFirst, force: ::std::option::Option::None, force_teddy_fat: ::std::option::Option::None, force_avx: ::std::option::Option::None }
} // Synth time: 358 ms, AST nodes: 9 vs unsimp 9 @|358|9|9|10|@

synthesized status: True
fn new() -> packed::api::Config {
  crate::packed::api::Config { kind: crate::packed::api::MatchKind::LeftmostFirst, force: ::std::option::Option::None, force_teddy_fat: ::std::option::Option::None, force_avx: ::std::option::Option::None }
} // Synth time: 363 ms, AST nodes: 9 vs unsimp 9 @|363|9|9|10|@

synthesized status: True
fn match_kind(&mut self, kind: packed::api::MatchKind) -> &mut packed::api::Config {
  self
} // Synth time: 763 ms, AST nodes: 1 vs unsimp 19 @|763|1|19|26|@

synthesized status: True
fn force_teddy(&mut self, yes: bool) -> &mut packed::api::Config {
  self
} // Synth time: 776 ms, AST nodes: 1 vs unsimp 19 @|776|1|19|27|@

synthesized status: True
fn force_teddy_fat(&mut self, yes: std::option::Option<bool>) -> &mut packed::api::Config {
  self
} // Synth time: 727 ms, AST nodes: 1 vs unsimp 19 @|727|1|19|26|@

synthesized status: True
fn force_avx(&mut self, yes: std::option::Option<bool>) -> &mut packed::api::Config {
  self
} // Synth time: 768 ms, AST nodes: 1 vs unsimp 19 @|768|1|19|26|@

synthesized status: True
fn force_rabin_karp(&mut self, yes: bool) -> &mut packed::api::Config {
  self
} // Synth time: 776 ms, AST nodes: 1 vs unsimp 19 @|776|1|19|27|@

synthesized status: True
fn heap_bytes(&self) -> usize {
  0 as usize
} // Synth time: 286 ms, AST nodes: 1 vs unsimp 1 @|286|1|1|4|@

synthesized status: True
fn new() -> packed::teddy::fallback::Builder {
  crate::packed::teddy::fallback::Builder(())
} // Synth time: 154 ms, AST nodes: 3 vs unsimp 3 @|154|3|3|3|@

synthesized status: True
fn minimum_len(&self) -> usize {
  0 as usize
} // Synth time: 270 ms, AST nodes: 1 vs unsimp 7 @|270|1|7|10|@

synthesized status: True
fn heap_bytes(&self) -> usize {
  0 as usize
} // Synth time: 279 ms, AST nodes: 1 vs unsimp 7 @|279|1|7|10|@

synthesized status: True
fn into_option(self) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 560 ms, AST nodes: 1 vs unsimp 11 @|560|1|11|23|@

synthesized status: True
fn heap_bytes<'a>(&&'a self) -> usize {
  0 as usize
} // Synth time: 302 ms, AST nodes: 1 vs unsimp 1 @|302|1|1|6|@

synthesized status: True
fn reports_false_positives<'a>(&&'a self) -> bool {
  true
} // Synth time: 317 ms, AST nodes: 1 vs unsimp 1 @|317|1|1|6|@

synthesized status: True
fn new(max_match_len: usize) -> prefilter::PrefilterState {
  crate::prefilter::PrefilterState { skips: max_match_len as usize, skipped: max_match_len as usize, max_match_len: max_match_len as usize, inert: true, last_scan_at: max_match_len as usize }
} // Synth time: 463 ms, AST nodes: 15 vs unsimp 15 @|463|15|15|14|@

synthesized status: True
fn disabled() -> prefilter::PrefilterState {
  crate::prefilter::PrefilterState { skips: 0 as usize, skipped: 0 as usize, max_match_len: 0 as usize, inert: true, last_scan_at: 0 as usize }
} // Synth time: 311 ms, AST nodes: 15 vs unsimp 15 @|311|15|15|12|@

synthesized status: True
fn update_skipped_bytes(&mut self, skipped: usize) {
  ()
} // Synth time: 757 ms, AST nodes: 0 vs unsimp 30 @|757|0|30|37|@

synthesized status: True
fn update_at(&mut self, at: usize) {
  ()
} // Synth time: 756 ms, AST nodes: 0 vs unsimp 30 @|756|0|30|37|@

synthesized status: True
fn is_effective(&mut self, at: usize) -> bool {
  self.inert
} // Synth time: 795 ms, AST nodes: 5 vs unsimp 31 @|795|5|31|40|@

synthesized status: True
fn default() -> prefilter::RareByteOffset {
  crate::prefilter::RareByteOffset { max: 0 as u8 }
} // Synth time: 162 ms, AST nodes: 4 vs unsimp 4 @|162|4|4|4|@

synthesized status: True
fn new(max: usize) -> std::option::Option<prefilter::RareByteOffset> {
  ::std::option::Option::None
} // Synth time: 273 ms, AST nodes: 1 vs unsimp 1 @|273|1|1|4|@

synthesized status: True
fn heap_bytes(&self) -> usize {
  let de = self.byte1;
  de as usize
} // Synth time: 594 ms, AST nodes: 7 vs unsimp 21 @|594|7|21|25|@

synthesized status: True
fn looks_for_non_start_of_match(&self) -> bool {
  true
} // Synth time: 578 ms, AST nodes: 1 vs unsimp 21 @|578|1|21|25|@

synthesized status: True
fn heap_bytes(&self) -> usize {
  let de = self.byte1;
  de as usize
} // Synth time: 312 ms, AST nodes: 7 vs unsimp 7 @|312|7|7|12|@

synthesized status: True
fn heap_bytes(&self) -> usize {
  let de = self.byte1;
  de as usize
} // Synth time: 509 ms, AST nodes: 7 vs unsimp 13 @|509|7|13|17|@

synthesized status: True
fn heap_bytes(&self) -> usize {
  let de = self.byte1;
  de as usize
} // Synth time: 586 ms, AST nodes: 7 vs unsimp 19 @|586|7|19|22|@

synthesized status: True
fn opposite_ascii_case(b: u8) -> u8 {
  b
} // Synth time: 199 ms, AST nodes: 1 vs unsimp 1 @|199|1|1|5|@

synthesized status: True
fn freq_rank(b: u8) -> u8 {
  b
} // Synth time: 201 ms, AST nodes: 1 vs unsimp 1 @|201|1|1|5|@

synthesized status: True
fn premultiply_overflow_error(last_state: S, alphabet_len: usize) -> std::result::Result<(), error::Error> {
  ::std::result::Result::Ok(())
} // Synth time: 345 ms, AST nodes: 3 vs unsimp 3 @|345|3|3|6|@

synthesized status: True
fn usize_to_state_id(value: usize) -> std::result::Result<S, error::Error> {
  let result = crate::state_id::StateID::from_usize(value);
  ::std::result::Result::Ok(result)
} // Synth time: 446 ms, AST nodes: 6 vs unsimp 6 @|446|6|6|13|@

synthesized status: False
fn fail_id() -> S {
  ??
  result
}

synthesized status: False
fn dead_id() -> S {
  ??
  result
}

synthesized status: True
fn from_usize(n: usize) -> usize {
  n
} // Synth time: 209 ms, AST nodes: 1 vs unsimp 1 @|209|1|1|5|@

synthesized status: True
fn to_usize(self) -> usize {
  self
} // Synth time: 219 ms, AST nodes: 1 vs unsimp 1 @|219|1|1|5|@

synthesized status: True
fn max_id() -> usize {
  0 as usize
} // Synth time: 139 ms, AST nodes: 1 vs unsimp 1 @|139|1|1|2|@

synthesized status: True
fn from_usize(n: usize) -> u8 {
  0 as u8
} // Synth time: 204 ms, AST nodes: 1 vs unsimp 1 @|204|1|1|4|@

synthesized status: True
fn to_usize(self) -> usize {
  self as usize
} // Synth time: 192 ms, AST nodes: 1 vs unsimp 1 @|192|1|1|4|@

synthesized status: True
fn max_id() -> usize {
  0 as usize
} // Synth time: 134 ms, AST nodes: 1 vs unsimp 1 @|134|1|1|2|@

synthesized status: True
fn from_usize(n: usize) -> u16 {
  0 as u16
} // Synth time: 211 ms, AST nodes: 1 vs unsimp 1 @|211|1|1|4|@

synthesized status: True
fn to_usize(self) -> usize {
  self as usize
} // Synth time: 191 ms, AST nodes: 1 vs unsimp 1 @|191|1|1|4|@

synthesized status: True
fn max_id() -> usize {
  0 as usize
} // Synth time: 140 ms, AST nodes: 1 vs unsimp 1 @|140|1|1|2|@

synthesized status: True
fn from_usize(n: usize) -> u32 {
  0 as u32
} // Synth time: 209 ms, AST nodes: 1 vs unsimp 1 @|209|1|1|4|@

synthesized status: True
fn to_usize(self) -> usize {
  self as usize
} // Synth time: 199 ms, AST nodes: 1 vs unsimp 1 @|199|1|1|4|@

synthesized status: True
fn max_id() -> usize {
  0 as usize
} // Synth time: 146 ms, AST nodes: 1 vs unsimp 1 @|146|1|1|2|@

synthesized status: True
fn from_usize(n: usize) -> u64 {
  n as u64
} // Synth time: 200 ms, AST nodes: 1 vs unsimp 1 @|200|1|1|4|@

synthesized status: True
fn to_usize(self) -> usize {
  self as usize
} // Synth time: 185 ms, AST nodes: 1 vs unsimp 1 @|185|1|1|4|@

synthesized status: True
fn max_id() -> usize {
  0 as usize
} // Synth time: 143 ms, AST nodes: 1 vs unsimp 1 @|143|1|1|2|@

synthesized status: True
fn pattern(&self) -> usize {
  self.end
} // Synth time: 593 ms, AST nodes: 5 vs unsimp 17 @|593|5|17|23|@

synthesized status: True
fn start(&self) -> usize {
  self.end
} // Synth time: 588 ms, AST nodes: 5 vs unsimp 17 @|588|5|17|23|@

synthesized status: True
fn end(&self) -> usize {
  self.end
} // Synth time: 611 ms, AST nodes: 5 vs unsimp 17 @|611|5|17|23|@

synthesized status: True
fn len(&self) -> usize {
  self.end
} // Synth time: 601 ms, AST nodes: 5 vs unsimp 17 @|601|5|17|23|@

synthesized status: True
fn is_empty(&self) -> bool {
  true
} // Synth time: 564 ms, AST nodes: 1 vs unsimp 19 @|564|1|19|22|@

synthesized status: True
fn increment(&self, by: usize) -> Match {
  let de = self.end;
  crate::Match { pattern: de as usize, len: de as usize, end: de as usize }
} // Synth time: 755 ms, AST nodes: 16 vs unsimp 28 @|755|16|28|30|@

synthesized status: True
fn from_span(id: usize, start: usize, end: usize) -> Match {
  crate::Match { pattern: end as usize, len: end as usize, end: end as usize }
} // Synth time: 521 ms, AST nodes: 10 vs unsimp 10 @|521|10|10|14|@

===== crate:  ansi_term-0.12.1  =====
synthesized status: True
fn prefix(self) -> ansi::Prefix {
  crate::ansi::Prefix(self)
} // Synth time: 280 ms, AST nodes: 3 vs unsimp 3 @|280|3|3|6|@

synthesized status: True
fn suffix(self) -> ansi::Suffix {
  crate::ansi::Suffix(self)
} // Synth time: 276 ms, AST nodes: 3 vs unsimp 3 @|276|3|3|6|@

synthesized status: True
fn infix(self, next: style::Style) -> ansi::Infix {
  crate::ansi::Infix(self, self)
} // Synth time: 323 ms, AST nodes: 5 vs unsimp 5 @|323|5|5|10|@

synthesized status: True
fn prefix(self) -> ansi::Prefix {
  let _0 = crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true };
  crate::ansi::Prefix(_0)
} // Synth time: 1600 ms, AST nodes: 25 vs unsimp 25 @|1600|25|25|25|@

synthesized status: True
fn suffix(self) -> ansi::Suffix {
  let _0 = crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true };
  crate::ansi::Suffix(_0)
} // Synth time: 1545 ms, AST nodes: 25 vs unsimp 25 @|1545|25|25|25|@

synthesized status: True
fn new() -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 510 ms, AST nodes: 21 vs unsimp 21 @|510|21|21|22|@

synthesized status: True
fn bold(&self) -> style::Style {
  *self
} // Synth time: 870 ms, AST nodes: 4 vs unsimp 66 @|870|4|66|58|@

synthesized status: True
fn dimmed(&self) -> style::Style {
  *self
} // Synth time: 745 ms, AST nodes: 4 vs unsimp 66 @|745|4|66|58|@

synthesized status: True
fn italic(&self) -> style::Style {
  *self
} // Synth time: 900 ms, AST nodes: 4 vs unsimp 66 @|900|4|66|58|@

synthesized status: True
fn underline(&self) -> style::Style {
  *self
} // Synth time: 894 ms, AST nodes: 4 vs unsimp 66 @|894|4|66|58|@

synthesized status: True
fn blink(&self) -> style::Style {
  *self
} // Synth time: 847 ms, AST nodes: 4 vs unsimp 66 @|847|4|66|58|@

synthesized status: True
fn reverse(&self) -> style::Style {
  *self
} // Synth time: 903 ms, AST nodes: 4 vs unsimp 66 @|903|4|66|58|@

synthesized status: True
fn hidden(&self) -> style::Style {
  *self
} // Synth time: 888 ms, AST nodes: 4 vs unsimp 66 @|888|4|66|58|@

synthesized status: True
fn strikethrough(&self) -> style::Style {
  *self
} // Synth time: 853 ms, AST nodes: 4 vs unsimp 66 @|853|4|66|58|@

synthesized status: True
fn fg(&self, foreground: style::Colour) -> style::Style {
  *self
} // Synth time: 929 ms, AST nodes: 4 vs unsimp 66 @|929|4|66|59|@

synthesized status: True
fn on(&self, background: style::Colour) -> style::Style {
  *self
} // Synth time: 884 ms, AST nodes: 4 vs unsimp 66 @|884|4|66|59|@

synthesized status: True
fn is_plain(self) -> bool {
  true
} // Synth time: 218 ms, AST nodes: 1 vs unsimp 1 @|218|1|1|3|@

synthesized status: True
fn default() -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 501 ms, AST nodes: 21 vs unsimp 21 @|501|21|21|22|@

synthesized status: True
fn normal(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1574 ms, AST nodes: 21 vs unsimp 21 @|1574|21|21|23|@

synthesized status: True
fn bold(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1490 ms, AST nodes: 21 vs unsimp 21 @|1490|21|21|23|@

synthesized status: True
fn dimmed(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1575 ms, AST nodes: 21 vs unsimp 21 @|1575|21|21|23|@

synthesized status: True
fn italic(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1604 ms, AST nodes: 21 vs unsimp 21 @|1604|21|21|23|@

synthesized status: True
fn underline(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1402 ms, AST nodes: 21 vs unsimp 21 @|1402|21|21|23|@

synthesized status: True
fn blink(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1586 ms, AST nodes: 21 vs unsimp 21 @|1586|21|21|23|@

synthesized status: True
fn reverse(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1596 ms, AST nodes: 21 vs unsimp 21 @|1596|21|21|23|@

synthesized status: True
fn hidden(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1572 ms, AST nodes: 21 vs unsimp 21 @|1572|21|21|23|@

synthesized status: True
fn strikethrough(self) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1580 ms, AST nodes: 21 vs unsimp 21 @|1580|21|21|23|@

synthesized status: True
fn on(self, background: style::Colour) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 20578 ms, AST nodes: 21 vs unsimp 21 @|20578|21|21|24|@

synthesized status: True
fn from(colour: style::Colour) -> style::Style {
  crate::style::Style { foreground: ::std::option::Option::None, background: ::std::option::Option::None, is_bold: true, is_dimmed: true, is_italic: true, is_underline: true, is_blink: true, is_reverse: true, is_hidden: true, is_strikethrough: true }
} // Synth time: 1659 ms, AST nodes: 21 vs unsimp 21 @|1659|21|21|23|@

synthesized status: True
fn between(first: &style::Style, next: &style::Style) -> difference::Difference {
  crate::difference::Difference::Reset
} // Synth time: 1375 ms, AST nodes: 1 vs unsimp 131 @|1375|1|131|112|@

===== crate:  anyhow-1.0.70  =====
synthesized status: True
fn _assert_send_sync() {
  ()
} // Synth time: 95 ms, AST nodes: 0 vs unsimp 0 @|95|0|0|0|@

===== crate:  arrayvec-0.7.2  =====
synthesized status: True
fn extend_panic() {
  ()
} // Synth time: 95 ms, AST nodes: 0 vs unsimp 0 @|95|0|0|0|@

synthesized status: True
fn drop(&mut self) {
  ()
} // Synth time: 195 ms, AST nodes: 0 vs unsimp 0 @|195|0|0|4|@

synthesized status: True
fn new(element: T) -> errors::CapacityError<T> {
  crate::errors::CapacityError { element }
} // Synth time: 197 ms, AST nodes: 3 vs unsimp 3 @|197|3|3|5|@

synthesized status: True
fn simplify(self) -> errors::CapacityError {
  crate::errors::CapacityError { element: () }
} // Synth time: 214 ms, AST nodes: 3 vs unsimp 3 @|214|3|3|4|@

synthesized status: True
fn element(self) -> T {
  self.element
} // Synth time: 208 ms, AST nodes: 1 vs unsimp 1 @|208|1|1|5|@

===== crate:  atty-0.2.14  =====
===== crate:  autocfg-1.1.0  =====
synthesized status: True
fn new(major: usize, minor: usize, patch: usize) -> version::Version {
  crate::version::Version { major: major as usize, minor: major as usize, patch: major as usize }
} // Synth time: 520 ms, AST nodes: 10 vs unsimp 10 @|520|10|10|14|@

===== crate:  base64-0.21.0  =====
synthesized status: True
fn new<'e>(engine: &'e E) -> chunked_encoder::ChunkedEncoder<'e, E> {
  crate::chunked_encoder::ChunkedEncoder { engine, max_input_chunk_len: 0 as usize }
} // Synth time: 263 ms, AST nodes: 6 vs unsimp 6 @|263|6|6|8|@

synthesized status: True
fn max_input_length(encoded_buf_len: usize, padded: bool) -> usize {
  encoded_buf_len
} // Synth time: 238 ms, AST nodes: 1 vs unsimp 1 @|238|1|1|7|@

synthesized status: True
fn decoded_len_estimate(&self) -> usize {
  self.decoded_len_estimate
} // Synth time: 473 ms, AST nodes: 5 vs unsimp 11 @|473|5|11|18|@

synthesized status: True
fn new(encoded_len: usize) -> engine::general_purpose::decode::GeneralPurposeEstimate {
  crate::engine::general_purpose::decode::GeneralPurposeEstimate { num_chunks: encoded_len as usize, decoded_len_estimate: encoded_len as usize }
} // Synth time: 276 ms, AST nodes: 7 vs unsimp 7 @|276|7|7|8|@

synthesized status: True
fn new() -> engine::general_purpose::GeneralPurposeConfig {
  crate::engine::general_purpose::GeneralPurposeConfig { encode_padding: true, decode_allow_trailing_bits: true, decode_padding_mode: crate::engine::DecodePaddingMode::Indifferent }
} // Synth time: 301 ms, AST nodes: 7 vs unsimp 7 @|301|7|7|8|@

synthesized status: True
fn with_encode_padding(self, padding: bool) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 308 ms, AST nodes: 1 vs unsimp 1 @|308|1|1|6|@

synthesized status: True
fn with_decode_allow_trailing_bits(self, allow: bool) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 302 ms, AST nodes: 1 vs unsimp 1 @|302|1|1|6|@

synthesized status: True
fn with_decode_padding_mode(self, mode: engine::DecodePaddingMode) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 225 ms, AST nodes: 1 vs unsimp 1 @|225|1|1|5|@

synthesized status: True
fn default() -> engine::general_purpose::GeneralPurposeConfig {
  crate::engine::general_purpose::GeneralPurposeConfig { encode_padding: true, decode_allow_trailing_bits: true, decode_padding_mode: crate::engine::DecodePaddingMode::Indifferent }
} // Synth time: 310 ms, AST nodes: 7 vs unsimp 7 @|310|7|7|8|@

synthesized status: True
fn encode_padding(&self) -> bool {
  self.decode_allow_trailing_bits
} // Synth time: 580 ms, AST nodes: 5 vs unsimp 24 @|580|5|24|24|@

synthesized status: True
fn encoded_len(bytes_len: usize, padding: bool) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 257 ms, AST nodes: 1 vs unsimp 1 @|257|1|1|6|@

synthesized status: True
fn from(e: decode::DecodeError) -> decode::DecodeSliceError {
  crate::decode::DecodeSliceError::DecodeError(e)
} // Synth time: 271 ms, AST nodes: 3 vs unsimp 3 @|271|3|3|5|@

synthesized status: True
fn decoded_len_estimate(encoded_len: usize) -> usize {
  encoded_len
} // Synth time: 214 ms, AST nodes: 1 vs unsimp 1 @|214|1|1|5|@

===== crate:  base64-0.21.5  =====
synthesized status: True
fn new<'e>(engine: &'e E) -> chunked_encoder::ChunkedEncoder<'e, E> {
  crate::chunked_encoder::ChunkedEncoder { engine }
} // Synth time: 226 ms, AST nodes: 3 vs unsimp 3 @|226|3|3|6|@

synthesized status: True
fn new(encoded_len: usize) -> engine::general_purpose::decode::GeneralPurposeEstimate {
  crate::engine::general_purpose::decode::GeneralPurposeEstimate { num_chunks: encoded_len as usize, decoded_len_estimate: encoded_len as usize }
} // Synth time: 266 ms, AST nodes: 7 vs unsimp 7 @|266|7|7|8|@

synthesized status: True
fn decoded_len_estimate(&self) -> usize {
  self.decoded_len_estimate
} // Synth time: 486 ms, AST nodes: 5 vs unsimp 11 @|486|5|11|18|@

synthesized status: True
fn with_decode_allow_trailing_bits(self, allow: bool) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 304 ms, AST nodes: 1 vs unsimp 1 @|304|1|1|6|@

synthesized status: True
fn with_decode_padding_mode(self, mode: engine::DecodePaddingMode) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 283 ms, AST nodes: 1 vs unsimp 1 @|283|1|1|5|@

synthesized status: True
fn default() -> engine::general_purpose::GeneralPurposeConfig {
  crate::engine::general_purpose::GeneralPurposeConfig { encode_padding: true, decode_allow_trailing_bits: true, decode_padding_mode: crate::engine::DecodePaddingMode::Indifferent }
} // Synth time: 308 ms, AST nodes: 7 vs unsimp 7 @|308|7|7|8|@

synthesized status: True
fn new() -> engine::general_purpose::GeneralPurposeConfig {
  crate::engine::general_purpose::GeneralPurposeConfig { encode_padding: true, decode_allow_trailing_bits: true, decode_padding_mode: crate::engine::DecodePaddingMode::Indifferent }
} // Synth time: 298 ms, AST nodes: 7 vs unsimp 7 @|298|7|7|8|@

synthesized status: True
fn with_encode_padding(self, padding: bool) -> engine::general_purpose::GeneralPurposeConfig {
  self
} // Synth time: 295 ms, AST nodes: 1 vs unsimp 1 @|295|1|1|6|@

synthesized status: True
fn encode_padding(&self) -> bool {
  self.decode_allow_trailing_bits
} // Synth time: 608 ms, AST nodes: 5 vs unsimp 24 @|608|5|24|24|@

synthesized status: True
fn new(decoded_bytes: usize, padding_index: std::option::Option<usize>) -> engine::DecodeMetadata {
  crate::engine::DecodeMetadata { decoded_len: decoded_bytes as usize, padding_offset: ::std::option::Option::None }
} // Synth time: 505 ms, AST nodes: 6 vs unsimp 6 @|505|6|6|9|@

synthesized status: True
fn encoded_len(bytes_len: usize, padding: bool) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 217 ms, AST nodes: 1 vs unsimp 1 @|217|1|1|6|@

synthesized status: True
fn from(e: decode::DecodeError) -> decode::DecodeSliceError {
  crate::decode::DecodeSliceError::DecodeError(e)
} // Synth time: 324 ms, AST nodes: 3 vs unsimp 3 @|324|3|3|5|@

synthesized status: True
fn decoded_len_estimate(encoded_len: usize) -> usize {
  encoded_len
} // Synth time: 224 ms, AST nodes: 1 vs unsimp 1 @|224|1|1|5|@

===== crate:  bitflags-2.0.2  =====
synthesized status: True
fn empty_flag() -> parser::ParseError {
  crate::parser::ParseError(crate::parser::ParseErrorKind::EmptyFlag)
} // Synth time: 224 ms, AST nodes: 3 vs unsimp 3 @|224|3|3|4|@

synthesized status: True
fn invalid_hex_flag(flag: impl fmt::Display) -> parser::ParseError {
  crate::parser::ParseError(crate::parser::ParseErrorKind::EmptyFlag)
} // Synth time: 284 ms, AST nodes: 3 vs unsimp 3 @|284|3|3|5|@

===== crate:  bitflags-2.4.1  =====
synthesized status: True
fn empty_flag() -> parser::ParseError {
  crate::parser::ParseError(crate::parser::ParseErrorKind::EmptyFlag)
} // Synth time: 225 ms, AST nodes: 3 vs unsimp 3 @|225|3|3|4|@

synthesized status: True
fn invalid_named_flag(flag: impl fmt::Display) -> parser::ParseError {
  crate::parser::ParseError(crate::parser::ParseErrorKind::EmptyFlag)
} // Synth time: 277 ms, AST nodes: 3 vs unsimp 3 @|277|3|3|5|@

synthesized status: True
fn to_writer(flags: &B, writer: impl Write) -> core::result::Result<(), core::fmt::Error> {
  ::core::result::Result::Ok(())
} // Synth time: 22955 ms, AST nodes: 3 vs unsimp 3 @|22955|3|3|6|@

synthesized status: True
fn invalid_hex_flag(flag: impl fmt::Display) -> parser::ParseError {
  crate::parser::ParseError(crate::parser::ParseErrorKind::EmptyFlag)
} // Synth time: 284 ms, AST nodes: 3 vs unsimp 3 @|284|3|3|5|@

===== crate:  block-buffer-0.10.4  =====
===== crate:  byteorder-1.4.3  =====
synthesized status: True
fn extend_sign128(val: u128, nbytes: usize) -> i128 {
  nbytes as i128
} // Synth time: 244 ms, AST nodes: 1 vs unsimp 1 @|244|1|1|6|@

synthesized status: True
fn unextend_sign(val: i64, nbytes: usize) -> u64 {
  nbytes as u64
} // Synth time: 241 ms, AST nodes: 1 vs unsimp 1 @|241|1|1|6|@

synthesized status: True
fn pack_size(n: u64) -> usize {
  n as usize
} // Synth time: 188 ms, AST nodes: 1 vs unsimp 1 @|188|1|1|4|@

synthesized status: True
fn unextend_sign128(val: i128, nbytes: usize) -> u128 {
  nbytes as u128
} // Synth time: 242 ms, AST nodes: 1 vs unsimp 1 @|242|1|1|6|@

synthesized status: False
fn default() -> BigEndian {
  ??
  result
}

synthesized status: True
fn extend_sign(val: u64, nbytes: usize) -> i64 {
  nbytes as i64
} // Synth time: 247 ms, AST nodes: 1 vs unsimp 1 @|247|1|1|6|@

synthesized status: True
fn pack_size128(n: u128) -> usize {
  0 as usize
} // Synth time: 210 ms, AST nodes: 1 vs unsimp 1 @|210|1|1|4|@

synthesized status: False
fn default() -> LittleEndian {
  ??
  result
}

===== crate:  byteorder-1.5.0  =====
synthesized status: True
fn extend_sign128(val: u128, nbytes: usize) -> i128 {
  nbytes as i128
} // Synth time: 243 ms, AST nodes: 1 vs unsimp 1 @|243|1|1|6|@

synthesized status: False
fn default() -> LittleEndian {
  ??
  result
}

synthesized status: True
fn unextend_sign(val: i64, nbytes: usize) -> u64 {
  nbytes as u64
} // Synth time: 245 ms, AST nodes: 1 vs unsimp 1 @|245|1|1|6|@

synthesized status: True
fn unextend_sign128(val: i128, nbytes: usize) -> u128 {
  nbytes as u128
} // Synth time: 240 ms, AST nodes: 1 vs unsimp 1 @|240|1|1|6|@

synthesized status: True
fn pack_size(n: u64) -> usize {
  n as usize
} // Synth time: 188 ms, AST nodes: 1 vs unsimp 1 @|188|1|1|4|@

synthesized status: True
fn pack_size128(n: u128) -> usize {
  0 as usize
} // Synth time: 200 ms, AST nodes: 1 vs unsimp 1 @|200|1|1|4|@

synthesized status: True
fn extend_sign(val: u64, nbytes: usize) -> i64 {
  nbytes as i64
} // Synth time: 250 ms, AST nodes: 1 vs unsimp 1 @|250|1|1|6|@

===== crate:  bytes-1.4.0  =====
synthesized status: True
fn advance(&mut self, cnt: usize) {
  ()
} // Synth time: 397 ms, AST nodes: 0 vs unsimp 0 @|397|0|0|13|@

synthesized status: True
fn new(a: T, b: U) -> buf::chain::Chain<T, U> {
  crate::buf::chain::Chain { a, b }
} // Synth time: 234 ms, AST nodes: 5 vs unsimp 5 @|234|5|5|8|@

synthesized status: True
fn first_ref(&self) -> &T {
  &self.a
} // Synth time: 285 ms, AST nodes: 1 vs unsimp 1 @|285|1|1|9|@

synthesized status: True
fn last_mut(&mut self) -> &mut U {
  &mut self.b
} // Synth time: 338 ms, AST nodes: 1 vs unsimp 1 @|338|1|1|13|@

synthesized status: True
fn first_mut(&mut self) -> &mut T {
  &mut self.a
} // Synth time: 338 ms, AST nodes: 1 vs unsimp 1 @|338|1|1|13|@

synthesized status: True
fn last_ref(&self) -> &U {
  &self.b
} // Synth time: 279 ms, AST nodes: 1 vs unsimp 1 @|279|1|1|9|@

synthesized status: True
fn into_inner(self) -> (T, U) {
  (self.a, self.b)
} // Synth time: 287 ms, AST nodes: 9 vs unsimp 9 @|287|9|9|10|@

synthesized status: True
fn remaining(&self) -> usize {
  0 as usize
} // Synth time: 428 ms, AST nodes: 1 vs unsimp 1 @|428|1|1|9|@

synthesized status: True
fn advance(&mut self, cnt: usize) {
  ()
} // Synth time: 485 ms, AST nodes: 0 vs unsimp 0 @|485|0|0|13|@

synthesized status: True
fn remaining_mut(&self) -> usize {
  0 as usize
} // Synth time: 434 ms, AST nodes: 1 vs unsimp 1 @|434|1|1|9|@

synthesized status: True
fn advance_mut(&mut self, cnt: usize) {
  ()
} // Synth time: 518 ms, AST nodes: 0 vs unsimp 0 @|518|0|0|13|@

synthesized status: True
fn new(inner: T) -> buf::iter::IntoIter<T> {
  crate::buf::iter::IntoIter { inner }
} // Synth time: 192 ms, AST nodes: 3 vs unsimp 3 @|192|3|3|5|@

synthesized status: True
fn into_inner(self) -> T {
  self.inner
} // Synth time: 211 ms, AST nodes: 1 vs unsimp 1 @|211|1|1|5|@

synthesized status: True
fn get_ref(&self) -> &T {
  &self.inner
} // Synth time: 257 ms, AST nodes: 1 vs unsimp 1 @|257|1|1|8|@

synthesized status: True
fn get_mut(&mut self) -> &mut T {
  &mut self.inner
} // Synth time: 281 ms, AST nodes: 1 vs unsimp 1 @|281|1|1|10|@

synthesized status: True
fn next(&mut self) -> core::option::Option<u8> {
  ::core::option::Option::None
} // Synth time: 438 ms, AST nodes: 1 vs unsimp 1 @|438|1|1|10|@

synthesized status: True
fn size_hint(&self) -> (usize, core::option::Option<usize>) {
  (0 as usize, ::core::option::Option::None)
} // Synth time: 469 ms, AST nodes: 6 vs unsimp 6 @|469|6|6|12|@

synthesized status: True
fn new(inner: T, limit: usize) -> buf::limit::Limit<T> {
  crate::buf::limit::Limit { inner, limit: limit as usize }
} // Synth time: 280 ms, AST nodes: 6 vs unsimp 6 @|280|6|6|9|@

synthesized status: True
fn into_inner(self) -> T {
  self.inner
} // Synth time: 248 ms, AST nodes: 1 vs unsimp 1 @|248|1|1|7|@

synthesized status: True
fn get_ref(&self) -> &T {
  &self.inner
} // Synth time: 351 ms, AST nodes: 1 vs unsimp 7 @|351|1|7|13|@

synthesized status: True
fn get_mut(&mut self) -> &mut T {
  &mut self.inner
} // Synth time: 376 ms, AST nodes: 1 vs unsimp 7 @|376|1|7|16|@

synthesized status: True
fn limit(&self) -> usize {
  self.limit
} // Synth time: 351 ms, AST nodes: 5 vs unsimp 5 @|351|5|5|14|@

synthesized status: True
fn set_limit(&mut self, lim: usize) {
  ()
} // Synth time: 437 ms, AST nodes: 0 vs unsimp 6 @|437|0|6|16|@

synthesized status: True
fn remaining_mut(&self) -> usize {
  self.limit
} // Synth time: 508 ms, AST nodes: 5 vs unsimp 5 @|508|5|5|14|@

synthesized status: True
fn advance_mut(&mut self, cnt: usize) {
  ()
} // Synth time: 584 ms, AST nodes: 0 vs unsimp 6 @|584|0|6|16|@

synthesized status: True
fn new(buf: B) -> buf::reader::Reader<B> {
  crate::buf::reader::Reader { buf }
} // Synth time: 198 ms, AST nodes: 3 vs unsimp 3 @|198|3|3|5|@

synthesized status: True
fn get_ref(&self) -> &B {
  &self.buf
} // Synth time: 505 ms, AST nodes: 1 vs unsimp 1 @|505|1|1|8|@

synthesized status: True
fn get_mut(&mut self) -> &mut B {
  &mut self.buf
} // Synth time: 521 ms, AST nodes: 1 vs unsimp 1 @|521|1|1|10|@

synthesized status: True
fn into_inner(self) -> B {
  self.buf
} // Synth time: 398 ms, AST nodes: 1 vs unsimp 1 @|398|1|1|5|@

synthesized status: True
fn consume(&mut self, amt: usize) {
  ()
} // Synth time: 423 ms, AST nodes: 0 vs unsimp 0 @|423|0|0|10|@

synthesized status: True
fn new(inner: T, limit: usize) -> buf::take::Take<T> {
  crate::buf::take::Take { inner, limit: limit as usize }
} // Synth time: 286 ms, AST nodes: 6 vs unsimp 6 @|286|6|6|9|@

synthesized status: True
fn into_inner(self) -> T {
  self.inner
} // Synth time: 269 ms, AST nodes: 1 vs unsimp 1 @|269|1|1|7|@

synthesized status: True
fn get_ref(&self) -> &T {
  &self.inner
} // Synth time: 341 ms, AST nodes: 1 vs unsimp 7 @|341|1|7|13|@

synthesized status: True
fn get_mut(&mut self) -> &mut T {
  &mut self.inner
} // Synth time: 375 ms, AST nodes: 1 vs unsimp 7 @|375|1|7|16|@

synthesized status: True
fn limit(&self) -> usize {
  self.limit
} // Synth time: 361 ms, AST nodes: 5 vs unsimp 5 @|361|5|5|14|@

synthesized status: True
fn set_limit(&mut self, lim: usize) {
  ()
} // Synth time: 443 ms, AST nodes: 0 vs unsimp 6 @|443|0|6|16|@

synthesized status: True
fn remaining(&self) -> usize {
  self.limit
} // Synth time: 493 ms, AST nodes: 5 vs unsimp 5 @|493|5|5|14|@

synthesized status: True
fn advance(&mut self, cnt: usize) {
  ()
} // Synth time: 553 ms, AST nodes: 0 vs unsimp 6 @|553|0|6|16|@

synthesized status: True
fn new(buf: B) -> buf::writer::Writer<B> {
  crate::buf::writer::Writer { buf }
} // Synth time: 190 ms, AST nodes: 3 vs unsimp 3 @|190|3|3|5|@

synthesized status: True
fn get_ref(&self) -> &B {
  &self.buf
} // Synth time: 526 ms, AST nodes: 1 vs unsimp 1 @|526|1|1|8|@

synthesized status: True
fn get_mut(&mut self) -> &mut B {
  &mut self.buf
} // Synth time: 564 ms, AST nodes: 1 vs unsimp 1 @|564|1|1|10|@

synthesized status: True
fn into_inner(self) -> B {
  self.buf
} // Synth time: 426 ms, AST nodes: 1 vs unsimp 1 @|426|1|1|5|@

synthesized status: True
fn _split_to_must_use() {
  ()
} // Synth time: 93 ms, AST nodes: 0 vs unsimp 0 @|93|0|0|0|@

synthesized status: True
fn _split_off_must_use() {
  ()
} // Synth time: 95 ms, AST nodes: 0 vs unsimp 0 @|95|0|0|0|@

synthesized status: True
fn original_capacity_to_repr(cap: usize) -> usize {
  cap
} // Synth time: 205 ms, AST nodes: 1 vs unsimp 1 @|205|1|1|5|@

synthesized status: True
fn original_capacity_from_repr(repr: usize) -> usize {
  repr
} // Synth time: 208 ms, AST nodes: 1 vs unsimp 1 @|208|1|1|5|@

synthesized status: True
fn _split_to_must_use() {
  ()
} // Synth time: 90 ms, AST nodes: 0 vs unsimp 0 @|90|0|0|0|@

synthesized status: True
fn _split_off_must_use() {
  ()
} // Synth time: 99 ms, AST nodes: 0 vs unsimp 0 @|99|0|0|0|@

synthesized status: True
fn _split_must_use() {
  ()
} // Synth time: 94 ms, AST nodes: 0 vs unsimp 0 @|94|0|0|0|@

===== crate:  cc-1.0.79  =====
synthesized status: True
fn verbose_stderr(&self) -> bool {
  true
} // Synth time: 279 ms, AST nodes: 1 vs unsimp 6 @|279|1|6|7|@

synthesized status: True
fn main() {
  ()
} // Synth time: 95 ms, AST nodes: 0 vs unsimp 0 @|95|0|0|0|@

===== crate:  cfg-if-1.0.0  =====
===== crate:  chrono-0.4.24  =====
===== crate:  clap-4.2.1  =====
===== crate:  crossbeam-channel-0.5.7  =====
===== crate:  crossbeam-epoch-0.9.14  =====
===== crate:  crossbeam-utils-0.8.15  =====
synthesized status: False
fn new() -> atomic::seq_lock::SeqLock {
  ??
  result
}

synthesized status: True
fn validate_read(&self, stamp: usize) -> bool {
  true
} // Synth time: 432 ms, AST nodes: 1 vs unsimp 1 @|432|1|1|14|@

synthesized status: False
fn new(val: T) -> atomic::atomic_cell::AtomicCell<T> {
  ??
  result
}

synthesized status: False
fn into_inner(self) -> T {
  ??
  result
}

synthesized status: True
fn abort(self) {
  ()
} // Synth time: 122 ms, AST nodes: 0 vs unsimp 0 @|122|0|0|1|@

synthesized status: False
fn write(&'static self) -> atomic::seq_lock::SeqLockWriteGuard {
  ??
  result
}

synthesized status: True
fn drop(&mut self) {
  ()
} // Synth time: 204 ms, AST nodes: 0 vs unsimp 0 @|204|0|0|4|@

synthesized status: True
fn optimistic_read(&self) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 363 ms, AST nodes: 1 vs unsimp 1 @|363|1|1|12|@

synthesized status: True
fn is_lock_free() -> bool {
  true
} // Synth time: 143 ms, AST nodes: 1 vs unsimp 1 @|143|1|1|2|@

synthesized status: True
fn store(&self, val: T) {
  ()
} // Synth time: 440 ms, AST nodes: 0 vs unsimp 0 @|440|0|0|3|@

synthesized status: True
fn swap(&self, val: T) -> T {
  val
} // Synth time: 236 ms, AST nodes: 1 vs unsimp 1 @|236|1|1|5|@

synthesized status: True
fn take(&self) -> T {
  std::default::Default::default()
} // Synth time: 377 ms, AST nodes: 1 vs unsimp 1 @|377|1|1|7|@

synthesized status: False
fn load(&self) -> T {
  ??
  result
}

synthesized status: True
fn compare_and_swap(&self, current: T, new: T) -> T {
  current
} // Synth time: 283 ms, AST nodes: 1 vs unsimp 1 @|283|1|1|7|@

synthesized status: True
fn compare_exchange(&self, current: T, new: T) -> std::result::Result<T, T> {
  ::std::result::Result::Ok(current)
} // Synth time: 336 ms, AST nodes: 3 vs unsimp 3 @|336|3|3|9|@

synthesized status: False
fn fetch_update(&self, f: F) -> std::result::Result<T, T> {
  ??
  result
}

synthesized status: True
fn drop(&mut self) {
  ()
} // Synth time: 203 ms, AST nodes: 0 vs unsimp 0 @|203|0|0|4|@

synthesized status: True
fn fetch_and(&self, val: bool) -> bool {
  val
} // Synth time: 244 ms, AST nodes: 1 vs unsimp 1 @|244|1|1|7|@

synthesized status: True
fn fetch_nand(&self, val: bool) -> bool {
  val
} // Synth time: 288 ms, AST nodes: 1 vs unsimp 1 @|288|1|1|7|@

synthesized status: True
fn fetch_or(&self, val: bool) -> bool {
  val
} // Synth time: 246 ms, AST nodes: 1 vs unsimp 1 @|246|1|1|7|@

synthesized status: True
fn fetch_xor(&self, val: bool) -> bool {
  val
} // Synth time: 244 ms, AST nodes: 1 vs unsimp 1 @|244|1|1|7|@

synthesized status: False
fn default() -> atomic::atomic_cell::AtomicCell<T> {
  ??
  result
}

synthesized status: False
fn from(val: T) -> atomic::atomic_cell::AtomicCell<T> {
  ??
  result
}

synthesized status: True
fn can_transmute() -> bool {
  true
} // Synth time: 143 ms, AST nodes: 1 vs unsimp 1 @|143|1|1|2|@

synthesized status: False
fn lock(addr: usize) -> &'static atomic::seq_lock::SeqLock {
  ??
  result
}

synthesized status: True
fn atomic_is_lock_free() -> bool {
  true
} // Synth time: 135 ms, AST nodes: 1 vs unsimp 1 @|135|1|1|2|@

synthesized status: True
fn new(t: T) -> cache_padded::CachePadded<T> {
  crate::cache_padded::CachePadded { value: t }
} // Synth time: 191 ms, AST nodes: 3 vs unsimp 3 @|191|3|3|5|@

synthesized status: True
fn into_inner(self) -> T {
  self.value
} // Synth time: 206 ms, AST nodes: 1 vs unsimp 1 @|206|1|1|5|@

synthesized status: True
fn deref(&self) -> &T {
  &self.value
} // Synth time: 251 ms, AST nodes: 1 vs unsimp 1 @|251|1|1|8|@

synthesized status: True
fn deref_mut(&mut self) -> &mut T {
  &mut self.value
} // Synth time: 289 ms, AST nodes: 1 vs unsimp 1 @|289|1|1|10|@

synthesized status: True
fn from(t: T) -> cache_padded::CachePadded<T> {
  crate::cache_padded::CachePadded { value: t }
} // Synth time: 193 ms, AST nodes: 3 vs unsimp 3 @|193|3|3|5|@

synthesized status: False
fn new() -> backoff::Backoff {
  ??
  result
}

synthesized status: True
fn reset(&self) {
  ()
} // Synth time: 251 ms, AST nodes: 0 vs unsimp 0 @|251|0|0|10|@

synthesized status: True
fn spin(&self) {
  ()
} // Synth time: 250 ms, AST nodes: 0 vs unsimp 0 @|250|0|0|10|@

synthesized status: True
fn snooze(&self) {
  ()
} // Synth time: 254 ms, AST nodes: 0 vs unsimp 0 @|254|0|0|10|@

synthesized status: True
fn is_completed(&self) -> bool {
  true
} // Synth time: 372 ms, AST nodes: 1 vs unsimp 1 @|372|1|1|12|@

synthesized status: False
fn default() -> backoff::Backoff {
  ??
  result
}

synthesized status: True
fn current_index() -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 160 ms, AST nodes: 1 vs unsimp 1 @|160|1|1|2|@

synthesized status: True
fn drop(&mut self) {
  ()
} // Synth time: 205 ms, AST nodes: 0 vs unsimp 0 @|205|0|0|4|@

===== crate:  digest-0.10.6  =====
===== crate:  either-1.8.1  =====
synthesized status: False
fn clone(&self) -> Either<L, R> {
  ??
  result
}

synthesized status: True
fn clone_from(&mut self, source: &Either<L, R>) {
  ()
} // Synth time: 280 ms, AST nodes: 0 vs unsimp 0 @|280|0|0|6|@

synthesized status: True
fn right(self) -> core::option::Option<R> {
  ::core::option::Option::None
} // Synth time: 337 ms, AST nodes: 1 vs unsimp 1 @|337|1|1|3|@

synthesized status: True
fn is_left(&self) -> bool {
  true
} // Synth time: 236 ms, AST nodes: 1 vs unsimp 1 @|236|1|1|4|@

synthesized status: True
fn as_ref(&self) -> Either<&L, &R> {
  match self {
    crate::Either::Left(_0) => crate::Either::Left(_0),
    crate::Either::Right(_0) => crate::Either::Right(_0),
  }
} // Synth time: 563 ms, AST nodes: 13 vs unsimp 13 @|563|13|13|20|@

synthesized status: True
fn is_right(&self) -> bool {
  true
} // Synth time: 234 ms, AST nodes: 1 vs unsimp 1 @|234|1|1|4|@

synthesized status: True
fn left(self) -> core::option::Option<L> {
  ::core::option::Option::None
} // Synth time: 500 ms, AST nodes: 1 vs unsimp 1 @|500|1|1|3|@

synthesized status: True
fn flip(self) -> Either<R, L> {
  match self {
    crate::Either::Left(_0) => crate::Either::Right(_0),
    crate::Either::Right(_0) => crate::Either::Left(_0),
  }
} // Synth time: 429 ms, AST nodes: 13 vs unsimp 13 @|429|13|13|15|@

synthesized status: False
fn map_left(self, f: F) -> Either<M, R> {
  ??
  result
}

synthesized status: False
fn map_right(self, f: F) -> Either<L, S> {
  ??
  result
}

synthesized status: False
fn either(self, f: F, g: G) -> T {
  ??
  result
}

synthesized status: False
fn either_with(self, ctx: Ctx, f: F, g: G) -> T {
  ??
  result
}

synthesized status: False
fn left_and_then(self, f: F) -> Either<S, R> {
  ??
  result
}

synthesized status: False
fn right_and_then(self, f: F) -> Either<L, S> {
  ??
  result
}

synthesized status: True
fn left_or(self, other: L) -> L {
  other
} // Synth time: 319 ms, AST nodes: 1 vs unsimp 1 @|319|1|1|4|@

synthesized status: True
fn left_or_default(self) -> L {
  core::default::Default::default()
} // Synth time: 1114 ms, AST nodes: 1 vs unsimp 1 @|1114|1|1|6|@

synthesized status: False
fn left_or_else(self, f: F) -> L {
  ??
  result
}

synthesized status: True
fn right_or(self, other: R) -> R {
  other
} // Synth time: 262 ms, AST nodes: 1 vs unsimp 1 @|262|1|1|4|@

synthesized status: True
fn right_or_default(self) -> R {
  core::default::Default::default()
} // Synth time: 1054 ms, AST nodes: 1 vs unsimp 1 @|1054|1|1|6|@

synthesized status: False
fn right_or_else(self, f: F) -> R {
  ??
  result
}

synthesized status: False
fn unwrap_left(self) -> L {
  ??
  result
}

synthesized status: False
fn unwrap_right(self) -> R {
  ??
  result
}

synthesized status: False
fn either_into(self) -> T {
  ??
  result
}

synthesized status: False
fn factor_none(self) -> core::option::Option<Either<L, R>> {
  match self {
    crate::Either::Left(_0) => match _0 {
        ::core::option::Option::None => ::core::option::Option::None,
        ::core::option::Option::Some(_0) => {
          let _0 = crate::Either::Left(_0);
          ::core::option::Option::Some(_0)
        }
      },
    crate::Either::Right(_0) => match _0 {

synthesized status: False
fn factor_err(self) -> core::result::Result<Either<L, R>, E> {
  match self {
    crate::Either::Left(_0) => match _0 {
        ::core::result::Result::Ok(_0) => {
          let _0 = crate::Either::Left(_0);
          ::core::result::Result::Ok(_0)
        }
        ::core::result::Result::Err(_0) => ::core::result::Result::Err(_0),
      },
    crate::Either::Right(_0) => match _0 {

synthesized status: False
fn factor_ok(self) -> core::result::Result<T, Either<L, R>> {
  match self {
    crate::Either::Left(_0) => match _0 {
        ::core::result::Result::Ok(_0) => ::core::result::Result::Ok(_0),
        ::core::result::Result::Err(_0) => {
          let _0 = crate::Either::Left(_0);
          ::core::result::Result::Err(_0)
        }
      },
    crate::Either::Right(_0) => match _0 {

synthesized status: False
fn factor_first(self) -> (T, Either<L, R>) {
  match self {
    crate::Either::Left(_0) => {
      let _1 = crate::Either::Left(_0.1);
      (_0.0, _1)
    }
    crate::Either::Right(_0) => {
      let _1 = crate::Either::Right(_0.1);
      (_0.0, _1)
    }

synthesized status: False
fn factor_second(self) -> (Either<L, R>, T) {
  match self {
    crate::Either::Left(_0_self) => {
      let _0_result = crate::Either::Left(_0_self.0);
      (_0_result, _0_self.1)
    }
    crate::Either::Right(_0_self) => {
      let _0_result = crate::Either::Right(_0_self.0);
      (_0_result, _0_self.1)
    }

synthesized status: True
fn into_inner(self) -> T {
  match self {
    crate::Either::Left(_0) => _0,
    crate::Either::Right(_0) => _0,
  }
} // Synth time: 273 ms, AST nodes: 9 vs unsimp 9 @|273|9|9|11|@

synthesized status: False
fn map(self, f: F) -> Either<M, M> {
  ??
  result
}

synthesized status: True
fn from(r: core::result::Result<R, L>) -> Either<L, R> {
  match r {
    ::core::result::Result::Ok(_0) => crate::Either::Right(_0),
    ::core::result::Result::Err(_0) => crate::Either::Left(_0),
  }
} // Synth time: 408 ms, AST nodes: 13 vs unsimp 13 @|408|13|13|15|@

synthesized status: True
fn into(self) -> core::result::Result<R, L> {
  match self {
    crate::Either::Left(_0) => ::core::result::Result::Err(_0),
    crate::Either::Right(_0) => ::core::result::Result::Ok(_0),
  }
} // Synth time: 428 ms, AST nodes: 13 vs unsimp 13 @|428|13|13|15|@

synthesized status: True
fn extend(&mut self, iter: T) {
  ()
} // Synth time: 405 ms, AST nodes: 0 vs unsimp 0 @|405|0|0|5|@

synthesized status: True
fn size_hint(&self) -> (usize, core::option::Option<usize>) {
  (0 as usize, ::core::option::Option::None)
} // Synth time: 425 ms, AST nodes: 6 vs unsimp 6 @|425|6|6|8|@

synthesized status: True
fn fold(self, init: Acc, f: G) -> Acc {
  init
} // Synth time: 648 ms, AST nodes: 1 vs unsimp 1 @|648|1|1|5|@

synthesized status: True
fn for_each(self, f: F) {
  ()
} // Synth time: 220 ms, AST nodes: 0 vs unsimp 0 @|220|0|0|2|@

synthesized status: True
fn count(self) -> usize {
  0 as usize
} // Synth time: 541 ms, AST nodes: 1 vs unsimp 1 @|541|1|1|3|@

synthesized status: False
fn collect(self) -> B {
  ??
  result
}

synthesized status: True
fn partition(self, f: F) -> (B, B) {
  let result_1 = core::default::Default::default();
  let result_2 = core::default::Default::default();
  (result_1, result_2)
} // Synth time: 305863 ms, AST nodes: 9 vs unsimp 9 @|305863|9|9|14|@

synthesized status: True
fn all(&mut self, f: F) -> bool {
  true
} // Synth time: 686 ms, AST nodes: 1 vs unsimp 1 @|686|1|1|7|@

synthesized status: True
fn any(&mut self, f: F) -> bool {
  true
} // Synth time: 675 ms, AST nodes: 1 vs unsimp 1 @|675|1|1|7|@

synthesized status: True
fn find_map(&mut self, f: F) -> core::option::Option<B> {
  ::core::option::Option::None
} // Synth time: 712 ms, AST nodes: 1 vs unsimp 1 @|712|1|1|7|@

synthesized status: True
fn position(&mut self, predicate: P) -> core::option::Option<usize> {
  ::core::option::Option::None
} // Synth time: 778 ms, AST nodes: 1 vs unsimp 1 @|778|1|1|7|@

synthesized status: True
fn rfold(self, init: Acc, f: G) -> Acc {
  init
} // Synth time: 388 ms, AST nodes: 1 vs unsimp 1 @|388|1|1|5|@

synthesized status: True
fn len(&self) -> usize {
  0 as usize
} // Synth time: 306 ms, AST nodes: 1 vs unsimp 1 @|306|1|1|4|@

synthesized status: True
fn consume(&mut self, amt: usize) {
  ()
} // Synth time: 344 ms, AST nodes: 0 vs unsimp 0 @|344|0|0|6|@

synthesized status: False
fn as_ref(&self) -> &Target {
  ??
  result
}

synthesized status: False
fn as_mut(&mut self) -> &mut Target {
  ??
  result
}

synthesized status: True
fn _unsized_ref_propagation() {
  ()
} // Synth time: 92 ms, AST nodes: 0 vs unsimp 0 @|92|0|0|0|@

synthesized status: True
fn _unsized_std_propagation() {
  ()
} // Synth time: 98 ms, AST nodes: 0 vs unsimp 0 @|98|0|0|0|@

===== crate:  env_logger-0.10.0  =====
===== crate:  fnv-1.0.7  =====
synthesized status: True
fn finish(&self) -> u64 {
  self.0
} // Synth time: 310 ms, AST nodes: 5 vs unsimp 5 @|310|5|5|13|@

synthesized status: True
fn default() -> FnvHasher {
  crate::FnvHasher(0 as u64)
} // Synth time: 167 ms, AST nodes: 4 vs unsimp 4 @|167|4|4|4|@

synthesized status: True
fn with_key(key: u64) -> FnvHasher {
  crate::FnvHasher(key as u64)
} // Synth time: 249 ms, AST nodes: 4 vs unsimp 4 @|249|4|4|6|@

===== crate:  futures-0.3.28  =====
===== crate:  futures-channel-0.3.28  =====
synthesized status: False
fn new(t: T) -> lock::Lock<T> {
  ??
  result
}

synthesized status: True
fn try_lock(&self) -> std::option::Option<lock::TryLock<'_, T>> {
  ::std::option::Option::None
} // Synth time: 471 ms, AST nodes: 1 vs unsimp 1 @|471|1|1|17|@

synthesized status: False
fn deref_mut(&mut self) -> &mut T {
  ??
  result
}

synthesized status: False
fn deref(&self) -> &T {
  ??
  result
}

synthesized status: True
fn drop(&mut self) {
  ()
} // Synth time: 283 ms, AST nodes: 0 vs unsimp 0 @|283|0|0|4|@

synthesized status: True
fn is_disconnected(&self) -> bool {
  true
} // Synth time: 330 ms, AST nodes: 1 vs unsimp 1 @|330|1|1|8|@

synthesized status: True
fn is_full(&self) -> bool {
  true
} // Synth time: 317 ms, AST nodes: 1 vs unsimp 1 @|317|1|1|8|@

synthesized status: True
fn is_full(&self) -> bool {
  true
} // Synth time: 415 ms, AST nodes: 1 vs unsimp 1 @|415|1|1|13|@

synthesized status: True
fn is_disconnected(&self) -> bool {
  true
} // Synth time: 464 ms, AST nodes: 1 vs unsimp 1 @|464|1|1|13|@

synthesized status: True
fn into_inner(self) -> T {
  self.val
} // Synth time: 441 ms, AST nodes: 1 vs unsimp 1 @|441|1|1|15|@

synthesized status: True
fn into_send_error(self) -> mpsc::SendError {
  crate::mpsc::SendError { kind: crate::mpsc::SendErrorKind::Full }
} // Synth time: 504 ms, AST nodes: 3 vs unsimp 3 @|504|3|3|5|@

synthesized status: True
fn is_closed(&self) -> bool {
  self.is_open
} // Synth time: 462 ms, AST nodes: 5 vs unsimp 18 @|462|5|18|20|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.num_messages;
  (de as usize, ::std::option::Option::None)
} // Synth time: 592 ms, AST nodes: 12 vs unsimp 23 @|592|12|23|23|@

synthesized status: True
fn decode_state(num: usize) -> mpsc::State {
  crate::mpsc::State { is_open: true, num_messages: num as usize }
} // Synth time: 264 ms, AST nodes: 6 vs unsimp 6 @|264|6|6|8|@

synthesized status: True
fn encode_state(state: &mpsc::State) -> usize {
  state.num_messages
} // Synth time: 536 ms, AST nodes: 5 vs unsimp 16 @|536|5|16|20|@

===== crate:  futures-core-0.3.28  =====
synthesized status: True
fn is_terminated(&self) -> bool {
  true
} // Synth time: 246 ms, AST nodes: 1 vs unsimp 1 @|246|1|1|8|@

synthesized status: True
fn is_terminated(&&mut self) -> bool {
  true
} // Synth time: 234 ms, AST nodes: 1 vs unsimp 1 @|234|1|1|6|@

synthesized status: True
fn size_hint(&&mut self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 368 ms, AST nodes: 6 vs unsimp 6 @|368|6|6|10|@

synthesized status: True
fn is_terminated(&self) -> bool {
  true
} // Synth time: 268 ms, AST nodes: 1 vs unsimp 1 @|268|1|1|8|@

synthesized status: True
fn is_terminated(&&mut self) -> bool {
  true
} // Synth time: 234 ms, AST nodes: 1 vs unsimp 1 @|234|1|1|6|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 397 ms, AST nodes: 6 vs unsimp 6 @|397|6|6|12|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 388 ms, AST nodes: 6 vs unsimp 6 @|388|6|6|12|@

synthesized status: True
fn is_terminated(&self) -> bool {
  true
} // Synth time: 301 ms, AST nodes: 1 vs unsimp 1 @|301|1|1|8|@

===== crate:  futures-io-0.3.28  =====
===== crate:  futures-sink-0.3.28  =====
===== crate:  futures-task-0.3.28  =====
synthesized status: True
fn is_shutdown(&self) -> bool {
  true
} // Synth time: 277 ms, AST nodes: 1 vs unsimp 7 @|277|1|7|10|@

synthesized status: True
fn status(&&self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 329 ms, AST nodes: 3 vs unsimp 3 @|329|3|3|7|@

synthesized status: True
fn shutdown() -> spawn::SpawnError {
  crate::spawn::SpawnError { _priv: () }
} // Synth time: 144 ms, AST nodes: 3 vs unsimp 3 @|144|3|3|3|@

synthesized status: True
fn status(&&mut self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 328 ms, AST nodes: 3 vs unsimp 3 @|328|3|3|7|@

synthesized status: True
fn status_local(&&mut self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 324 ms, AST nodes: 3 vs unsimp 3 @|324|3|3|7|@

synthesized status: True
fn status(&self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 336 ms, AST nodes: 3 vs unsimp 3 @|336|3|3|9|@

synthesized status: True
fn status_local(&&self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 316 ms, AST nodes: 3 vs unsimp 3 @|316|3|3|7|@

synthesized status: True
fn status_local(&self) -> std::result::Result<(), spawn::SpawnError> {
  ::std::result::Result::Ok(())
} // Synth time: 343 ms, AST nodes: 3 vs unsimp 3 @|343|3|3|9|@

===== crate:  futures-util-0.3.28  =====
===== crate:  generic-array-0.14.7  =====
===== crate:  getrandom-0.2.11  =====
===== crate:  getrandom-0.2.8  =====
synthesized status: True
fn code(self) -> core::num::NonZeroU32 {
  self.0
} // Synth time: 224 ms, AST nodes: 1 vs unsimp 1 @|224|1|1|6|@

synthesized status: True
fn raw_os_error(self) -> core::option::Option<i32> {
  ::core::option::Option::None
} // Synth time: 299 ms, AST nodes: 1 vs unsimp 1 @|299|1|1|5|@

synthesized status: True
fn from(code: core::num::NonZeroU32) -> error::Error {
  crate::error::Error(code)
} // Synth time: 244 ms, AST nodes: 3 vs unsimp 3 @|244|3|3|6|@

synthesized status: True
fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
  0 as usize
} // Synth time: 392 ms, AST nodes: 1 vs unsimp 1 @|392|1|1|13|@

synthesized status: False
fn new() -> util::LazyUsize {
  ??
  result
}

synthesized status: False
fn new() -> util::LazyBool {
  ??
  result
}

synthesized status: True
fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
  true
} // Synth time: 448 ms, AST nodes: 1 vs unsimp 1 @|448|1|1|17|@

synthesized status: True
fn get_errno() -> i32 {
  0 as i32
} // Synth time: 145 ms, AST nodes: 1 vs unsimp 1 @|145|1|1|2|@

synthesized status: False
fn last_os_error() -> error::Error {
  ??
  result
}

synthesized status: True
fn get_rng_fd() -> core::result::Result<i32, error::Error> {
  ::core::result::Result::Ok(0 as i32)
} // Synth time: 253 ms, AST nodes: 4 vs unsimp 4 @|253|4|4|4|@

synthesized status: True
fn drop(&mut self) {
  ()
} // Synth time: 208 ms, AST nodes: 0 vs unsimp 0 @|208|0|0|4|@

===== crate:  hashbrown-0.13.2  =====
===== crate:  heck-0.4.1  =====
===== crate:  http-0.2.9  =====
synthesized status: True
fn resolve(&self) -> std::option::Option<(usize, header::map::HashValue)> {
  ::std::option::Option::None
} // Synth time: 650 ms, AST nodes: 1 vs unsimp 26 @|650|1|26|27|@

synthesized status: True
fn to_red(&mut self) {
  ()
} // Synth time: 294 ms, AST nodes: 0 vs unsimp 0 @|294|0|0|4|@

synthesized status: True
fn is_none(&self) -> bool {
  true
} // Synth time: 618 ms, AST nodes: 1 vs unsimp 26 @|618|1|26|27|@

synthesized status: True
fn is_some(&self) -> bool {
  true
} // Synth time: 621 ms, AST nodes: 1 vs unsimp 26 @|621|1|26|27|@

synthesized status: True
fn none() -> header::map::Pos {
  let hash = crate::header::map::HashValue(0 as u16);
  crate::header::map::Pos { index: 0 as u16, hash }
} // Synth time: 209 ms, AST nodes: 11 vs unsimp 11 @|209|11|11|8|@

synthesized status: True
fn is_yellow(&self) -> bool {
  true
} // Synth time: 301 ms, AST nodes: 1 vs unsimp 1 @|301|1|1|4|@

synthesized status: True
fn is_red(&self) -> bool {
  true
} // Synth time: 249 ms, AST nodes: 1 vs unsimp 1 @|249|1|1|4|@

synthesized status: True
fn new(index: usize, hash: header::map::HashValue) -> header::map::Pos {
  let hash_result = crate::header::map::HashValue(hash.0 as u16);
  crate::header::map::Pos { index: hash.0 as u16, hash: hash_result }
} // Synth time: 451 ms, AST nodes: 15 vs unsimp 15 @|451|15|15|14|@

synthesized status: True
fn to_yellow(&mut self) {
  ()
} // Synth time: 273 ms, AST nodes: 0 vs unsimp 0 @|273|0|0|4|@

synthesized status: True
fn to_green(&mut self) {
  ()
} // Synth time: 284 ms, AST nodes: 0 vs unsimp 0 @|284|0|0|4|@

synthesized status: True
fn usable_capacity(cap: usize) -> usize {
  cap
} // Synth time: 209 ms, AST nodes: 1 vs unsimp 1 @|209|1|1|5|@

synthesized status: True
fn to_raw_capacity(n: usize) -> usize {
  n
} // Synth time: 204 ms, AST nodes: 1 vs unsimp 1 @|204|1|1|5|@

synthesized status: True
fn desired_pos(mask: u16, hash: header::map::HashValue) -> usize {
  hash.0 as usize
} // Synth time: 289 ms, AST nodes: 1 vs unsimp 1 @|289|1|1|8|@

synthesized status: True
fn probe_distance(mask: u16, hash: header::map::HashValue, current: usize) -> usize {
  current
} // Synth time: 282 ms, AST nodes: 1 vs unsimp 1 @|282|1|1|8|@

synthesized status: True
fn hash_elem_using(danger: &header::map::Danger, k: &K) -> header::map::HashValue {
  crate::header::map::HashValue(0 as u16)
} // Synth time: 355 ms, AST nodes: 4 vs unsimp 4 @|355|4|4|8|@

synthesized status: True
fn new() -> header::name::InvalidHeaderName {
  crate::header::name::InvalidHeaderName { _priv: () }
} // Synth time: 149 ms, AST nodes: 3 vs unsimp 3 @|149|3|3|3|@

synthesized status: True
fn is_visible_ascii(b: u8) -> bool {
  true
} // Synth time: 179 ms, AST nodes: 1 vs unsimp 1 @|179|1|1|4|@

synthesized status: True
fn is_valid(b: u8) -> bool {
  true
} // Synth time: 170 ms, AST nodes: 1 vs unsimp 1 @|170|1|1|4|@

synthesized status: True
fn new() -> method::InvalidMethod {
  crate::method::InvalidMethod { _priv: () }
} // Synth time: 149 ms, AST nodes: 3 vs unsimp 3 @|149|3|3|3|@

synthesized status: True
fn from_u16(src: u16) -> std::result::Result<status::StatusCode, status::InvalidStatusCode> {
  let _0 = crate::status::InvalidStatusCode { _priv: () };
  ::std::result::Result::Err(_0)
} // Synth time: 314 ms, AST nodes: 7 vs unsimp 7 @|314|7|7|7|@

synthesized status: True
fn as_u16(&self) -> u16 {
  0 as u16
} // Synth time: 468 ms, AST nodes: 1 vs unsimp 12 @|468|1|12|18|@

synthesized status: True
fn is_informational(&self) -> bool {
  true
} // Synth time: 473 ms, AST nodes: 1 vs unsimp 12 @|473|1|12|18|@

synthesized status: True
fn is_success(&self) -> bool {
  true
} // Synth time: 481 ms, AST nodes: 1 vs unsimp 12 @|481|1|12|18|@

synthesized status: True
fn is_redirection(&self) -> bool {
  true
} // Synth time: 507 ms, AST nodes: 1 vs unsimp 12 @|507|1|12|18|@

synthesized status: True
fn is_client_error(&self) -> bool {
  true
} // Synth time: 410 ms, AST nodes: 1 vs unsimp 12 @|410|1|12|18|@

synthesized status: True
fn is_server_error(&self) -> bool {
  true
} // Synth time: 481 ms, AST nodes: 1 vs unsimp 12 @|481|1|12|18|@

synthesized status: False
fn default() -> status::StatusCode {
  ??
  result
}

synthesized status: True
fn eq(&self, other: &u16) -> bool {
  true
} // Synth time: 605 ms, AST nodes: 1 vs unsimp 17 @|605|1|17|24|@

synthesized status: True
fn eq(&self, other: &status::StatusCode) -> bool {
  true
} // Synth time: 595 ms, AST nodes: 1 vs unsimp 17 @|595|1|17|24|@

synthesized status: True
fn from(status: status::StatusCode) -> u16 {
  0 as u16
} // Synth time: 199 ms, AST nodes: 1 vs unsimp 1 @|199|1|1|5|@

synthesized status: True
fn from<'a>(t: &'a status::StatusCode) -> status::StatusCode {
  *t
} // Synth time: 372 ms, AST nodes: 4 vs unsimp 12 @|372|4|12|17|@

synthesized status: True
fn new() -> status::InvalidStatusCode {
  crate::status::InvalidStatusCode { _priv: () }
} // Synth time: 146 ms, AST nodes: 3 vs unsimp 3 @|146|3|3|3|@

synthesized status: True
fn as_u16(&self) -> u16 {
  self.port
} // Synth time: 359 ms, AST nodes: 5 vs unsimp 5 @|359|5|5|14|@

synthesized status: True
fn from_str(bytes: T) -> std::result::Result<uri::port::Port<T>, uri::InvalidUri> {
  let _0 = crate::uri::port::Port { port: 0 as u16, repr: bytes };
  ::std::result::Result::Ok(_0)
} // Synth time: 482 ms, AST nodes: 10 vs unsimp 10 @|482|10|10|9|@

synthesized status: True
fn from(port: uri::port::Port<T>) -> u16 {
  0 as u16
} // Synth time: 290 ms, AST nodes: 1 vs unsimp 1 @|290|1|1|3|@

synthesized status: True
fn eq(&self, other: &uri::port::Port<U>) -> bool {
  true
} // Synth time: 709 ms, AST nodes: 1 vs unsimp 13 @|709|1|13|24|@

synthesized status: True
fn eq(&self, other: &u16) -> bool {
  true
} // Synth time: 547 ms, AST nodes: 1 vs unsimp 12 @|547|1|12|19|@

synthesized status: True
fn eq(&self, other: &uri::port::Port<T>) -> bool {
  true
} // Synth time: 521 ms, AST nodes: 1 vs unsimp 12 @|521|1|12|19|@

synthesized status: True
fn is_none(&self) -> bool {
  true
} // Synth time: 295 ms, AST nodes: 1 vs unsimp 1 @|295|1|1|4|@

synthesized status: True
fn len(&self) -> usize {
  0 as usize
} // Synth time: 469 ms, AST nodes: 1 vs unsimp 6 @|469|1|6|15|@

synthesized status: True
fn from(src: uri::scheme::Protocol) -> uri::scheme::Scheme2<T> {
  crate::uri::scheme::Scheme2::None
} // Synth time: 324 ms, AST nodes: 1 vs unsimp 1 @|324|1|1|9|@

synthesized status: True
fn from(src: uri::ErrorKind) -> uri::InvalidUri {
  crate::uri::InvalidUri(src)
} // Synth time: 437 ms, AST nodes: 3 vs unsimp 3 @|437|3|3|5|@

synthesized status: True
fn from(src: uri::ErrorKind) -> uri::InvalidUriParts {
  let _0 = crate::uri::InvalidUri(src);
  crate::uri::InvalidUriParts(_0)
} // Synth time: 449 ms, AST nodes: 7 vs unsimp 7 @|449|7|7|7|@

synthesized status: True
fn default() -> version::Version {
  crate::version::Version(crate::version::Http::Http09)
} // Synth time: 251 ms, AST nodes: 3 vs unsimp 3 @|251|3|3|4|@

synthesized status: True
fn is(&self) -> bool {
  true
} // Synth time: 350 ms, AST nodes: 1 vs unsimp 1 @|350|1|1|8|@

synthesized status: True
fn from(err: status::InvalidStatusCode) -> error::Error {
  let inner = crate::error::ErrorKind::StatusCode(err);
  crate::error::Error { inner }
} // Synth time: 335 ms, AST nodes: 7 vs unsimp 7 @|335|7|7|7|@

synthesized status: True
fn from(err: method::InvalidMethod) -> error::Error {
  let inner = crate::error::ErrorKind::Method(err);
  crate::error::Error { inner }
} // Synth time: 356 ms, AST nodes: 7 vs unsimp 7 @|356|7|7|7|@

synthesized status: True
fn from(err: uri::InvalidUri) -> error::Error {
  let inner = crate::error::ErrorKind::Uri(err);
  crate::error::Error { inner }
} // Synth time: 379 ms, AST nodes: 7 vs unsimp 7 @|379|7|7|7|@

synthesized status: True
fn from(err: uri::InvalidUriParts) -> error::Error {
  let inner = crate::error::ErrorKind::UriParts(err);
  crate::error::Error { inner }
} // Synth time: 395 ms, AST nodes: 7 vs unsimp 7 @|395|7|7|7|@

synthesized status: True
fn from(err: header::name::InvalidHeaderName) -> error::Error {
  let inner = crate::error::ErrorKind::HeaderName(err);
  crate::error::Error { inner }
} // Synth time: 387 ms, AST nodes: 7 vs unsimp 7 @|387|7|7|7|@

synthesized status: True
fn from(err: header::value::InvalidHeaderValue) -> error::Error {
  let inner = crate::error::ErrorKind::HeaderValue(err);
  crate::error::Error { inner }
} // Synth time: 393 ms, AST nodes: 7 vs unsimp 7 @|393|7|7|7|@

synthesized status: False
fn from(err: std::convert::Infallible) -> error::Error {
  ??
  result
}

synthesized status: True
fn write_u64(&mut self, id: u64) {
  ()
} // Synth time: 354 ms, AST nodes: 0 vs unsimp 6 @|354|0|6|13|@

synthesized status: True
fn finish(&self) -> u64 {
  self.0
} // Synth time: 306 ms, AST nodes: 5 vs unsimp 5 @|306|5|5|13|@

synthesized status: True
fn _assert_types() {
  ()
} // Synth time: 100 ms, AST nodes: 0 vs unsimp 0 @|100|0|0|0|@

===== crate:  hyper-0.14.25  =====
===== crate:  idna-0.3.0  =====
synthesized status: True
fn adapt(delta: u32, num_points: u32, first_time: bool) -> u32 {
  delta
} // Synth time: 285 ms, AST nodes: 1 vs unsimp 1 @|285|1|1|9|@

synthesized status: True
fn default() -> uts46::Config {
  crate::uts46::Config { use_std3_ascii_rules: true, transitional_processing: true, verify_dns_length: true, check_hyphens: true, use_idna_2008_rules: true }
} // Synth time: 284 ms, AST nodes: 11 vs unsimp 11 @|284|11|11|12|@

synthesized status: True
fn transitional_processing(self, value: bool) -> uts46::Config {
  self
} // Synth time: 234 ms, AST nodes: 1 vs unsimp 1 @|234|1|1|6|@

synthesized status: True
fn verify_dns_length(self, value: bool) -> uts46::Config {
  self
} // Synth time: 222 ms, AST nodes: 1 vs unsimp 1 @|222|1|1|6|@

synthesized status: True
fn use_idna_2008_rules(self, value: bool) -> uts46::Config {
  self
} // Synth time: 329 ms, AST nodes: 1 vs unsimp 1 @|329|1|1|6|@

synthesized status: True
fn use_std3_ascii_rules(self, value: bool) -> uts46::Config {
  self
} // Synth time: 227 ms, AST nodes: 1 vs unsimp 1 @|227|1|1|6|@

synthesized status: True
fn is_err(&self) -> bool {
  self.disallowed_in_idna_2008
} // Synth time: 990 ms, AST nodes: 5 vs unsimp 71 @|990|5|71|68|@

synthesized status: True
fn check_hyphens(self, value: bool) -> uts46::Config {
  self
} // Synth time: 229 ms, AST nodes: 1 vs unsimp 1 @|229|1|1|6|@

synthesized status: True
fn from(e: uts46::Errors) -> std::result::Result<(), uts46::Errors> {
  ::std::result::Result::Err(e)
} // Synth time: 307 ms, AST nodes: 3 vs unsimp 3 @|307|3|3|5|@

===== crate:  indexmap-1.9.3  =====
synthesized status: True
fn equivalent(&self, key: &K) -> bool {
  true
} // Synth time: 239 ms, AST nodes: 1 vs unsimp 1 @|239|1|1|6|@

synthesized status: True
fn third(t: (A, B, C)) -> C {
  t.2
} // Synth time: 245 ms, AST nodes: 1 vs unsimp 1 @|245|1|1|7|@

synthesized status: True
fn simplify_range(range: R, len: usize) -> core::ops::Range<usize> {
  ::core::ops::Range { start: len as usize, end: len }
} // Synth time: 420 ms, AST nodes: 6 vs unsimp 6 @|420|6|6|10|@

synthesized status: True
fn clone_from(&mut self, other: &Bucket<K, V>) {
  ()
} // Synth time: 805 ms, AST nodes: 0 vs unsimp 28 @|805|0|28|41|@

synthesized status: False
fn clone(&self) -> Bucket<K, V> {
  ??
  result
}

synthesized status: True
fn get(self) -> u64 {
  self.0 as u64
} // Synth time: 220 ms, AST nodes: 1 vs unsimp 1 @|220|1|1|6|@

synthesized status: True
fn value_ref(&self) -> &V {
  &self.value
} // Synth time: 624 ms, AST nodes: 1 vs unsimp 15 @|624|1|15|20|@

synthesized status: True
fn key_ref(&self) -> &K {
  &self.key
} // Synth time: 575 ms, AST nodes: 1 vs unsimp 15 @|575|1|15|20|@

synthesized status: True
fn value_mut(&mut self) -> &mut V {
  &mut self.value
} // Synth time: 617 ms, AST nodes: 1 vs unsimp 15 @|617|1|15|25|@

synthesized status: True
fn key(self) -> K {
  self.key
} // Synth time: 376 ms, AST nodes: 1 vs unsimp 1 @|376|1|1|7|@

synthesized status: True
fn value(self) -> V {
  self.value
} // Synth time: 434 ms, AST nodes: 1 vs unsimp 1 @|434|1|1|7|@

synthesized status: True
fn key_value(self) -> (K, V) {
  (self.key, self.value)
} // Synth time: 445 ms, AST nodes: 9 vs unsimp 9 @|445|9|9|14|@

synthesized status: True
fn refs(&self) -> (&K, &V) {
  (&self.key, &self.value)
} // Synth time: 750 ms, AST nodes: 11 vs unsimp 25 @|750|11|25|26|@

synthesized status: True
fn ref_mut(&mut self) -> (&K, &mut V) {
  (&mut self.key, &mut self.value)
} // Synth time: 675 ms, AST nodes: 11 vs unsimp 25 @|675|11|25|31|@

synthesized status: True
fn muts(&mut self) -> (&mut K, &mut V) {
  (&mut self.key, &mut self.value)
} // Synth time: 676 ms, AST nodes: 11 vs unsimp 25 @|676|11|25|31|@

===== crate:  itertools-0.10.5  =====
synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 541 ms, AST nodes: 6 vs unsimp 6 @|541|6|6|14|@

synthesized status: True
fn fold(self, acc: Acc, fn_acc: FnAcc) -> Acc {
  acc
} // Synth time: 5803 ms, AST nodes: 1 vs unsimp 1 @|5803|1|1|5|@

synthesized status: True
fn coalesce_pair(&mut self, t: T, item: Item) -> std::result::Result<T, (T, T)> {
  ::std::result::Result::Ok(t)
} // Synth time: 388 ms, AST nodes: 3 vs unsimp 3 @|388|3|3|10|@

synthesized status: True
fn coalesce_pair(&mut self, t: T, item: T) -> std::result::Result<T, (T, T)> {
  let _0 = (t, item);
  ::std::result::Result::Err(_0)
} // Synth time: 548 ms, AST nodes: 9 vs unsimp 9 @|548|9|9|18|@

synthesized status: True
fn dedup_pair(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 342 ms, AST nodes: 1 vs unsimp 1 @|342|1|1|11|@

synthesized status: True
fn dedup_pair(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 290 ms, AST nodes: 1 vs unsimp 1 @|290|1|1|10|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 489 ms, AST nodes: 6 vs unsimp 6 @|489|6|6|13|@

synthesized status: True
fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 1964 ms, AST nodes: 1 vs unsimp 1 @|1964|1|1|5|@

synthesized status: True
fn map_ok(iter: I, f: F) -> adaptors::map::MapSpecialCase<I, adaptors::map::MapSpecialCaseFnOk<F>> {
  let f = crate::adaptors::map::MapSpecialCaseFnOk(f);
  crate::adaptors::map::MapSpecialCase { iter, f }
} // Synth time: 920 ms, AST nodes: 9 vs unsimp 9 @|920|9|9|10|@

synthesized status: True
fn map_into(iter: I) -> adaptors::map::MapSpecialCase<I, adaptors::map::MapSpecialCaseFnInto<R>> {
  let f = crate::adaptors::map::MapSpecialCaseFnInto(::std::marker::PhantomData);
  crate::adaptors::map::MapSpecialCase { iter, f }
} // Synth time: 222 ms, AST nodes: 9 vs unsimp 9 @|222|9|9|9|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 690 ms, AST nodes: 6 vs unsimp 12 @|690|6|12|26|@

synthesized status: True
fn interleave_shortest(a: I, b: J) -> adaptors::InterleaveShortest<I, J> {
  crate::adaptors::InterleaveShortest { it0: a, it1: b, phase: true }
} // Synth time: 852 ms, AST nodes: 7 vs unsimp 7 @|852|7|7|10|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 580 ms, AST nodes: 6 vs unsimp 12 @|580|6|12|18|@

synthesized status: True
fn batching(iter: I, f: F) -> adaptors::Batching<I, F> {
  crate::adaptors::Batching { f, iter }
} // Synth time: 235 ms, AST nodes: 5 vs unsimp 5 @|235|5|5|8|@

synthesized status: True
fn step(iter: I, step: usize) -> adaptors::Step<I> {
  let result = iter.fuse();
  crate::adaptors::Step { iter: result, skip: step as usize }
} // Synth time: 1118 ms, AST nodes: 9 vs unsimp 9 @|1118|9|9|14|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.skip;
  (de as usize, ::std::option::Option::None)
} // Synth time: 599 ms, AST nodes: 12 vs unsimp 12 @|599|12|12|21|@

synthesized status: True
fn merge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 394 ms, AST nodes: 1 vs unsimp 1 @|394|1|1|11|@

synthesized status: True
fn merge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 285 ms, AST nodes: 1 vs unsimp 1 @|285|1|1|10|@

synthesized status: True
fn take_while_ref(iter: &mut I, f: F) -> adaptors::TakeWhileRef<'_, I, F> {
  crate::adaptors::TakeWhileRef { iter, f }
} // Synth time: 452 ms, AST nodes: 5 vs unsimp 5 @|452|5|5|11|@

synthesized status: True
fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 518 ms, AST nodes: 6 vs unsimp 6 @|518|6|6|13|@

synthesized status: True
fn while_some(iter: I) -> adaptors::WhileSome<I> {
  crate::adaptors::WhileSome { iter }
} // Synth time: 195 ms, AST nodes: 3 vs unsimp 3 @|195|3|3|5|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 458 ms, AST nodes: 6 vs unsimp 6 @|458|6|6|12|@

synthesized status: True
fn from(iter: I) -> adaptors::Tuple1Combination<I> {
  crate::adaptors::Tuple1Combination { iter }
} // Synth time: 198 ms, AST nodes: 3 vs unsimp 3 @|198|3|3|5|@

synthesized status: True
fn filter_ok(iter: I, f: F) -> adaptors::FilterOk<I, F> {
  crate::adaptors::FilterOk { iter, f }
} // Synth time: 352 ms, AST nodes: 5 vs unsimp 5 @|352|5|5|8|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 465 ms, AST nodes: 6 vs unsimp 6 @|465|6|6|13|@

synthesized status: True
fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 2378 ms, AST nodes: 1 vs unsimp 1 @|2378|1|1|5|@

synthesized status: False
fn transpose_result(result: std::result::Result<std::option::Option<T>, E>) -> std::option::Option<std::result::Result<T, E>> {
  ??
  result
}

synthesized status: True
fn filter_map_ok(iter: I, f: F) -> adaptors::FilterMapOk<I, F> {
  crate::adaptors::FilterMapOk { iter, f }
} // Synth time: 362 ms, AST nodes: 5 vs unsimp 5 @|362|5|5|8|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 526 ms, AST nodes: 6 vs unsimp 6 @|526|6|6|13|@

synthesized status: True
fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 2015 ms, AST nodes: 1 vs unsimp 1 @|2015|1|1|5|@

synthesized status: True
fn positions(iter: I, f: F) -> adaptors::Positions<I, F> {
  crate::adaptors::Positions { iter, f, count: 0 as usize }
} // Synth time: 906 ms, AST nodes: 8 vs unsimp 8 @|906|8|8|10|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.count;
  (de as usize, ::std::option::Option::None)
} // Synth time: 594 ms, AST nodes: 12 vs unsimp 12 @|594|12|12|18|@

synthesized status: True
fn update(iter: I, f: F) -> adaptors::Update<I, F> {
  crate::adaptors::Update { iter, f }
} // Synth time: 351 ms, AST nodes: 5 vs unsimp 5 @|351|5|5|8|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 492 ms, AST nodes: 6 vs unsimp 6 @|492|6|6|13|@

synthesized status: True
fn fold(self, init: Acc, g: G) -> Acc {
  init
} // Synth time: 2187 ms, AST nodes: 1 vs unsimp 1 @|2187|1|1|5|@

synthesized status: True
fn has_left(&self) -> bool {
  true
} // Synth time: 301 ms, AST nodes: 1 vs unsimp 1 @|301|1|1|4|@

synthesized status: True
fn has_right(&self) -> bool {
  true
} // Synth time: 303 ms, AST nodes: 1 vs unsimp 1 @|303|1|1|4|@

synthesized status: True
fn is_left(&self) -> bool {
  true
} // Synth time: 261 ms, AST nodes: 1 vs unsimp 1 @|261|1|1|4|@

synthesized status: True
fn is_right(&self) -> bool {
  true
} // Synth time: 303 ms, AST nodes: 1 vs unsimp 1 @|303|1|1|4|@

synthesized status: True
fn is_both(&self) -> bool {
  true
} // Synth time: 297 ms, AST nodes: 1 vs unsimp 1 @|297|1|1|4|@

synthesized status: True
fn left(self) -> std::option::Option<A> {
  ::std::option::Option::None
} // Synth time: 387 ms, AST nodes: 1 vs unsimp 1 @|387|1|1|3|@

synthesized status: True
fn right(self) -> std::option::Option<B> {
  ::std::option::Option::None
} // Synth time: 384 ms, AST nodes: 1 vs unsimp 1 @|384|1|1|3|@

synthesized status: True
fn both(self) -> std::option::Option<(A, B)> {
  ::std::option::Option::None
} // Synth time: 504 ms, AST nodes: 1 vs unsimp 1 @|504|1|1|3|@

synthesized status: True
fn as_ref(&self) -> either_or_both::EitherOrBoth<&A, &B> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
  }
} // Synth time: 695 ms, AST nodes: 21 vs unsimp 21 @|695|21|21|30|@

synthesized status: True
fn as_mut(&mut self) -> either_or_both::EitherOrBoth<&mut A, &mut B> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
  }
} // Synth time: 769 ms, AST nodes: 21 vs unsimp 21 @|769|21|21|38|@

synthesized status: True
fn flip(self) -> either_or_both::EitherOrBoth<B, A> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _1) => crate::either_or_both::EitherOrBoth::Both(_1, _0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
  }
} // Synth time: 577 ms, AST nodes: 23 vs unsimp 23 @|577|23|23|25|@

synthesized status: False
fn map_left(self, f: F) -> either_or_both::EitherOrBoth<M, B> {
  ??
  result
}

synthesized status: False
fn map_right(self, f: F) -> either_or_both::EitherOrBoth<A, M> {
  ??
  result
}

synthesized status: False
fn map_any(self, f: F, g: G) -> either_or_both::EitherOrBoth<L, R> {
  ??
  result
}

synthesized status: False
fn left_and_then(self, f: F) -> either_or_both::EitherOrBoth<L, B> {
  ??
  result
}

synthesized status: False
fn right_and_then(self, f: F) -> either_or_both::EitherOrBoth<A, R> {
  ??
  result
}

synthesized status: True
fn or(self, l: A, r: B) -> (A, B) {
  (l, r)
} // Synth time: 519 ms, AST nodes: 5 vs unsimp 5 @|519|5|5|9|@

synthesized status: False
fn or_default(self) -> (A, B) {
  ??
  result
}

synthesized status: False
fn or_else(self, l: L, r: R) -> (A, B) {
  ??
  result
}

synthesized status: True
fn reduce(self, f: F) -> T {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => _0,
    crate::either_or_both::EitherOrBoth::Left(_0) => _0,
    crate::either_or_both::EitherOrBoth::Right(_0) => _0,
  }
} // Synth time: 512 ms, AST nodes: 15 vs unsimp 15 @|512|15|15|20|@

synthesized status: True
fn into(self) -> std::option::Option<either::Either<A, B>> {
  ::std::option::Option::None
} // Synth time: 436 ms, AST nodes: 1 vs unsimp 1 @|436|1|1|3|@

synthesized status: True
fn fold(iterable: I, init: B, f: F) -> B {
  init
} // Synth time: 196 ms, AST nodes: 1 vs unsimp 1 @|196|1|1|5|@

synthesized status: True
fn all(iterable: I, f: F) -> bool {
  true
} // Synth time: 206 ms, AST nodes: 1 vs unsimp 1 @|206|1|1|4|@

synthesized status: True
fn any(iterable: I, f: F) -> bool {
  true
} // Synth time: 166 ms, AST nodes: 1 vs unsimp 1 @|166|1|1|4|@

synthesized status: True
fn new(iter: I, key_mapper: F) -> grouping_map::MapForGrouping<I, F> {
  crate::grouping_map::MapForGrouping(iter, key_mapper)
} // Synth time: 231 ms, AST nodes: 5 vs unsimp 5 @|231|5|5|8|@

synthesized status: True
fn new(iter: I) -> grouping_map::GroupingMap<I> {
  crate::grouping_map::GroupingMap { iter }
} // Synth time: 324 ms, AST nodes: 3 vs unsimp 3 @|324|3|3|5|@

synthesized status: True
fn new(size: usize) -> groupbylazy::ChunkIndex {
  crate::groupbylazy::ChunkIndex { size: size as usize, index: size as usize, key: size as usize }
} // Synth time: 317 ms, AST nodes: 10 vs unsimp 10 @|317|10|10|10|@

synthesized status: True
fn generate(&mut self) -> Item {
  self.0.clone()
} // Synth time: 358 ms, AST nodes: 5 vs unsimp 5 @|358|5|5|16|@

synthesized status: False
fn generate(&mut self) -> Item {
  ??
  result
}

synthesized status: True
fn kmerge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 403 ms, AST nodes: 1 vs unsimp 1 @|403|1|1|11|@

synthesized status: True
fn kmerge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 286 ms, AST nodes: 1 vs unsimp 1 @|286|1|1|10|@

synthesized status: True
fn into_option(self) -> std::option::Option<(T, T)> {
  ::std::option::Option::None
} // Synth time: 450 ms, AST nodes: 1 vs unsimp 1 @|450|1|1|3|@

synthesized status: True
fn pad_using(iter: I, min: usize, filler: F) -> pad_tail::PadUsing<I, F> {
  let result = iter.fuse();
  crate::pad_tail::PadUsing { iter: result, min: min as usize, pos: min as usize, filler }
} // Synth time: 1893 ms, AST nodes: 14 vs unsimp 14 @|1893|14|14|19|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.min;
  (de as usize, ::std::option::Option::None)
} // Synth time: 750 ms, AST nodes: 12 vs unsimp 18 @|750|12|18|27|@

synthesized status: True
fn peeking_take_while(iter: &mut I, f: F) -> peeking_take_while::PeekingTakeWhile<'_, I, F> {
  crate::peeking_take_while::PeekingTakeWhile { iter, f }
} // Synth time: 430 ms, AST nodes: 5 vs unsimp 5 @|430|5|5|11|@

synthesized status: True
fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 433 ms, AST nodes: 6 vs unsimp 6 @|433|6|6|13|@

synthesized status: True
fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 576 ms, AST nodes: 6 vs unsimp 6 @|576|6|6|13|@

synthesized status: True
fn fold<'a>(self, init: B, f: F) -> B {
  self.iter.count();
  init
} // Synth time: 14497 ms, AST nodes: 6 vs unsimp 6 @|14497|6|6|17|@

synthesized status: False
fn process_results(iterable: I, processor: F) -> std::result::Result<R, E> {
  ??
  result
}

synthesized status: True
fn repeat_n(element: A, n: usize) -> repeatn::RepeatN<A> {
  let elt = ::std::option::Option::Some(element);
  crate::repeatn::RepeatN { elt, n: n as usize }
} // Synth time: 494 ms, AST nodes: 10 vs unsimp 10 @|494|10|10|11|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.n;
  (de as usize, ::std::option::Option::None)
} // Synth time: 537 ms, AST nodes: 12 vs unsimp 12 @|537|12|12|17|@

synthesized status: True
fn add(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 282 ms, AST nodes: 1 vs unsimp 1 @|282|1|1|5|@

synthesized status: True
fn add_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 317 ms, AST nodes: 1 vs unsimp 1 @|317|1|1|6|@

synthesized status: True
fn sub_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 316 ms, AST nodes: 1 vs unsimp 1 @|316|1|1|6|@

synthesized status: True
fn mul(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 281 ms, AST nodes: 1 vs unsimp 1 @|281|1|1|5|@

synthesized status: True
fn mul_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 319 ms, AST nodes: 1 vs unsimp 1 @|319|1|1|6|@

synthesized status: True
fn pow_scalar_base(base: usize, exp: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  exp
} // Synth time: 307 ms, AST nodes: 1 vs unsimp 1 @|307|1|1|6|@

synthesized status: True
fn max(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 295 ms, AST nodes: 1 vs unsimp 1 @|295|1|1|5|@

synthesized status: True
fn min(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 299 ms, AST nodes: 1 vs unsimp 1 @|299|1|1|5|@

synthesized status: True
fn repeat_call(function: F) -> sources::RepeatCall<F> {
  crate::sources::RepeatCall { f: function }
} // Synth time: 190 ms, AST nodes: 3 vs unsimp 3 @|190|3|3|5|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 403 ms, AST nodes: 6 vs unsimp 6 @|403|6|6|12|@

synthesized status: True
fn unfold(initial_state: St, f: F) -> sources::Unfold<St, F> {
  crate::sources::Unfold { f, state: initial_state }
} // Synth time: 233 ms, AST nodes: 5 vs unsimp 5 @|233|5|5|8|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 433 ms, AST nodes: 6 vs unsimp 6 @|433|6|6|13|@

synthesized status: True
fn iterate(initial_value: St, f: F) -> sources::Iterate<St, F> {
  crate::sources::Iterate { state: initial_value, f }
} // Synth time: 242 ms, AST nodes: 5 vs unsimp 5 @|242|5|5|8|@

synthesized status: True
fn tuple_windows(iter: I) -> tuple_impl::TupleWindows<I, T> {
  crate::tuple_impl::TupleWindows { iter, last: ::std::option::Option::None }
} // Synth time: 367 ms, AST nodes: 5 vs unsimp 5 @|367|5|5|7|@

synthesized status: True
fn key_ref(&self) -> &K {
  &self.0
} // Synth time: 288 ms, AST nodes: 1 vs unsimp 1 @|288|1|1|9|@

synthesized status: True
fn key(self) -> K {
  self.0
} // Synth time: 224 ms, AST nodes: 1 vs unsimp 1 @|224|1|1|6|@

synthesized status: True
fn value(self) -> V {
  self.1
} // Synth time: 219 ms, AST nodes: 1 vs unsimp 1 @|219|1|1|6|@

synthesized status: True
fn key_ref(&self) -> &V {
  &self.0
} // Synth time: 258 ms, AST nodes: 1 vs unsimp 1 @|258|1|1|8|@

synthesized status: True
fn key(self) -> V {
  self.0
} // Synth time: 197 ms, AST nodes: 1 vs unsimp 1 @|197|1|1|5|@

synthesized status: True
fn value(self) -> V {
  self.0
} // Synth time: 208 ms, AST nodes: 1 vs unsimp 1 @|208|1|1|5|@

synthesized status: False
fn multiunzip(i: I) -> FromI {
  ??
  result
}

synthesized status: True
fn into_inner(self) -> T {
  match self {
    crate::with_position::Position::First(_0) => _0,
    crate::with_position::Position::Middle(_0) => _0,
    crate::with_position::Position::Last(_0) => _0,
    crate::with_position::Position::Only(_0) => _0,
  }
} // Synth time: 419 ms, AST nodes: 17 vs unsimp 17 @|419|17|17|21|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 502 ms, AST nodes: 6 vs unsimp 6 @|502|6|6|13|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 553 ms, AST nodes: 6 vs unsimp 6 @|553|6|6|21|@

synthesized status: False
fn multizip(t: U) -> ziptuple::Zip<T> {
  ??
  result
}

synthesized status: True
fn equal(a: I, b: J) -> bool {
  true
} // Synth time: 167 ms, AST nodes: 1 vs unsimp 1 @|167|1|1|4|@

synthesized status: True
fn assert_equal(a: I, b: J) {
  ()
} // Synth time: 118 ms, AST nodes: 0 vs unsimp 0 @|118|0|0|2|@

synthesized status: True
fn partition(iter: I, pred: F) -> usize {
  0 as usize
} // Synth time: 167 ms, AST nodes: 1 vs unsimp 1 @|167|1|1|4|@

synthesized status: True
fn into_inner(self) -> T {
  match self {
    crate::FoldWhile::Continue(_0) => _0,
    crate::FoldWhile::Done(_0) => _0,
  }
} // Synth time: 329 ms, AST nodes: 9 vs unsimp 9 @|329|9|9|11|@

synthesized status: True
fn is_done(&self) -> bool {
  true
} // Synth time: 226 ms, AST nodes: 1 vs unsimp 1 @|226|1|1|4|@

===== crate:  itertools-0.12.0  =====
synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 535 ms, AST nodes: 6 vs unsimp 6 @|535|6|6|14|@

synthesized status: True
fn fold(self, acc: Acc, fn_acc: FnAcc) -> Acc {
  acc
} // Synth time: 5880 ms, AST nodes: 1 vs unsimp 1 @|5880|1|1|5|@

synthesized status: True
fn coalesce_pair(&mut self, t: T, item: Item) -> std::result::Result<T, (T, T)> {
  ::std::result::Result::Ok(t)
} // Synth time: 359 ms, AST nodes: 3 vs unsimp 3 @|359|3|3|10|@

synthesized status: True
fn coalesce_pair(&mut self, t: T, item: T) -> std::result::Result<T, (T, T)> {
  let _0 = (t, item);
  ::std::result::Result::Err(_0)
} // Synth time: 551 ms, AST nodes: 9 vs unsimp 9 @|551|9|9|18|@

synthesized status: True
fn dedup_pair(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 285 ms, AST nodes: 1 vs unsimp 1 @|285|1|1|10|@

synthesized status: True
fn dedup_pair(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 301 ms, AST nodes: 1 vs unsimp 1 @|301|1|1|11|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 476 ms, AST nodes: 6 vs unsimp 6 @|476|6|6|13|@

synthesized status: True
fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 2265 ms, AST nodes: 1 vs unsimp 1 @|2265|1|1|5|@

synthesized status: True
fn map_ok(iter: I, f: F) -> adaptors::map::MapSpecialCase<I, adaptors::map::MapSpecialCaseFnOk<F>> {
  let f = crate::adaptors::map::MapSpecialCaseFnOk(f);
  crate::adaptors::map::MapSpecialCase { iter, f }
} // Synth time: 1030 ms, AST nodes: 9 vs unsimp 9 @|1030|9|9|10|@

synthesized status: True
fn map_into(iter: I) -> adaptors::map::MapSpecialCase<I, adaptors::map::MapSpecialCaseFnInto<R>> {
  let f = crate::adaptors::map::MapSpecialCaseFnInto(::std::marker::PhantomData);
  crate::adaptors::map::MapSpecialCase { iter, f }
} // Synth time: 233 ms, AST nodes: 9 vs unsimp 9 @|233|9|9|9|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 641 ms, AST nodes: 6 vs unsimp 12 @|641|6|12|26|@

synthesized status: True
fn interleave_shortest(a: I, b: J) -> adaptors::InterleaveShortest<I, J> {
  crate::adaptors::InterleaveShortest { it0: a, it1: b, phase: true }
} // Synth time: 882 ms, AST nodes: 7 vs unsimp 7 @|882|7|7|10|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 594 ms, AST nodes: 6 vs unsimp 12 @|594|6|12|18|@

synthesized status: True
fn batching(iter: I, f: F) -> adaptors::Batching<I, F> {
  crate::adaptors::Batching { f, iter }
} // Synth time: 221 ms, AST nodes: 5 vs unsimp 5 @|221|5|5|8|@

synthesized status: True
fn step(iter: I, step: usize) -> adaptors::Step<I> {
  let result = iter.fuse();
  crate::adaptors::Step { iter: result, skip: step as usize }
} // Synth time: 1056 ms, AST nodes: 9 vs unsimp 9 @|1056|9|9|14|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.skip;
  (de as usize, ::std::option::Option::None)
} // Synth time: 599 ms, AST nodes: 12 vs unsimp 12 @|599|12|12|21|@

synthesized status: True
fn take_while_ref(iter: &mut I, f: F) -> adaptors::TakeWhileRef<'_, I, F> {
  crate::adaptors::TakeWhileRef { iter, f }
} // Synth time: 432 ms, AST nodes: 5 vs unsimp 5 @|432|5|5|11|@

synthesized status: True
fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 507 ms, AST nodes: 6 vs unsimp 6 @|507|6|6|13|@

synthesized status: True
fn while_some(iter: I) -> adaptors::WhileSome<I> {
  crate::adaptors::WhileSome { iter }
} // Synth time: 198 ms, AST nodes: 3 vs unsimp 3 @|198|3|3|5|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 465 ms, AST nodes: 6 vs unsimp 6 @|465|6|6|12|@

synthesized status: True
fn fold(self, acc: B, f: F) -> B {
  self.iter.count();
  acc
} // Synth time: 2128 ms, AST nodes: 6 vs unsimp 6 @|2128|6|6|13|@

synthesized status: True
fn from(iter: I) -> adaptors::Tuple1Combination<I> {
  crate::adaptors::Tuple1Combination { iter }
} // Synth time: 194 ms, AST nodes: 3 vs unsimp 3 @|194|3|3|5|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 447 ms, AST nodes: 6 vs unsimp 6 @|447|6|6|12|@

synthesized status: True
fn count(self) -> usize {
  self.iter.count()
} // Synth time: 738 ms, AST nodes: 4 vs unsimp 4 @|738|4|4|12|@

synthesized status: True
fn fold(self, init: B, f: F) -> B {
  self.iter.count();
  init
} // Synth time: 1889 ms, AST nodes: 6 vs unsimp 6 @|1889|6|6|13|@

synthesized status: True
fn checked_binomial(n: usize, k: usize) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 288 ms, AST nodes: 1 vs unsimp 1 @|288|1|1|6|@

synthesized status: True
fn filter_ok(iter: I, f: F) -> adaptors::FilterOk<I, F> {
  crate::adaptors::FilterOk { iter, f }
} // Synth time: 354 ms, AST nodes: 5 vs unsimp 5 @|354|5|5|8|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 503 ms, AST nodes: 6 vs unsimp 6 @|503|6|6|13|@

synthesized status: True
fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 1913 ms, AST nodes: 1 vs unsimp 1 @|1913|1|1|5|@

synthesized status: False
fn transpose_result(result: std::result::Result<std::option::Option<T>, E>) -> std::option::Option<std::result::Result<T, E>> {
  ??
  result
}

synthesized status: True
fn filter_map_ok(iter: I, f: F) -> adaptors::FilterMapOk<I, F> {
  crate::adaptors::FilterMapOk { iter, f }
} // Synth time: 635 ms, AST nodes: 5 vs unsimp 5 @|635|5|5|8|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 689 ms, AST nodes: 6 vs unsimp 6 @|689|6|6|13|@

synthesized status: True
fn fold(self, init: Acc, fold_f: Fold) -> Acc {
  init
} // Synth time: 2964 ms, AST nodes: 1 vs unsimp 1 @|2964|1|1|5|@

synthesized status: True
fn positions(iter: I, f: F) -> adaptors::Positions<I, F> {
  crate::adaptors::Positions { iter, f, count: 0 as usize }
} // Synth time: 953 ms, AST nodes: 8 vs unsimp 8 @|953|8|8|10|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.count;
  (de as usize, ::std::option::Option::None)
} // Synth time: 588 ms, AST nodes: 12 vs unsimp 12 @|588|12|12|18|@

synthesized status: True
fn update(iter: I, f: F) -> adaptors::Update<I, F> {
  crate::adaptors::Update { iter, f }
} // Synth time: 359 ms, AST nodes: 5 vs unsimp 5 @|359|5|5|8|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 480 ms, AST nodes: 6 vs unsimp 6 @|480|6|6|13|@

synthesized status: True
fn fold(self, init: Acc, g: G) -> Acc {
  init
} // Synth time: 2214 ms, AST nodes: 1 vs unsimp 1 @|2214|1|1|5|@

synthesized status: True
fn has_left(&self) -> bool {
  true
} // Synth time: 307 ms, AST nodes: 1 vs unsimp 1 @|307|1|1|4|@

synthesized status: True
fn has_right(&self) -> bool {
  true
} // Synth time: 298 ms, AST nodes: 1 vs unsimp 1 @|298|1|1|4|@

synthesized status: True
fn is_left(&self) -> bool {
  true
} // Synth time: 306 ms, AST nodes: 1 vs unsimp 1 @|306|1|1|4|@

synthesized status: True
fn is_right(&self) -> bool {
  true
} // Synth time: 299 ms, AST nodes: 1 vs unsimp 1 @|299|1|1|4|@

synthesized status: True
fn is_both(&self) -> bool {
  true
} // Synth time: 310 ms, AST nodes: 1 vs unsimp 1 @|310|1|1|4|@

synthesized status: True
fn left(self) -> std::option::Option<A> {
  ::std::option::Option::None
} // Synth time: 382 ms, AST nodes: 1 vs unsimp 1 @|382|1|1|3|@

synthesized status: True
fn right(self) -> std::option::Option<B> {
  ::std::option::Option::None
} // Synth time: 366 ms, AST nodes: 1 vs unsimp 1 @|366|1|1|3|@

synthesized status: False
fn left_and_right(self) -> (std::option::Option<A>, std::option::Option<B>) {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _1) => {
      let _1 = ::std::option::Option::Some(_1);
      let _0 = ::std::option::Option::Some(_0);
      (_0, _1)
    }
    crate::either_or_both::EitherOrBoth::Left(_0) => {
      let _0 = ::std::option::Option::Some(_0);
      (_0, ::std::option::Option::None)

synthesized status: True
fn just_left(self) -> std::option::Option<A> {
  ::std::option::Option::None
} // Synth time: 373 ms, AST nodes: 1 vs unsimp 1 @|373|1|1|3|@

synthesized status: True
fn just_right(self) -> std::option::Option<B> {
  ::std::option::Option::None
} // Synth time: 321 ms, AST nodes: 1 vs unsimp 1 @|321|1|1|3|@

synthesized status: True
fn both(self) -> std::option::Option<(A, B)> {
  ::std::option::Option::None
} // Synth time: 475 ms, AST nodes: 1 vs unsimp 1 @|475|1|1|3|@

synthesized status: True
fn into_left(self) -> A {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => _0,
    crate::either_or_both::EitherOrBoth::Left(_0) => _0,
    crate::either_or_both::EitherOrBoth::Right(_0) => _0.into(),
  }
} // Synth time: 570 ms, AST nodes: 16 vs unsimp 16 @|570|16|16|22|@

synthesized status: True
fn into_right(self) -> B {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_, _1) => _1,
    crate::either_or_both::EitherOrBoth::Left(_0) => _0.into(),
    crate::either_or_both::EitherOrBoth::Right(_0) => _0,
  }
} // Synth time: 576 ms, AST nodes: 16 vs unsimp 16 @|576|16|16|22|@

synthesized status: True
fn as_ref(&self) -> either_or_both::EitherOrBoth<&A, &B> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
  }
} // Synth time: 708 ms, AST nodes: 21 vs unsimp 21 @|708|21|21|30|@

synthesized status: True
fn as_mut(&mut self) -> either_or_both::EitherOrBoth<&mut A, &mut B> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
  }
} // Synth time: 829 ms, AST nodes: 21 vs unsimp 21 @|829|21|21|38|@

synthesized status: True
fn flip(self) -> either_or_both::EitherOrBoth<B, A> {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _1) => crate::either_or_both::EitherOrBoth::Both(_1, _0),
    crate::either_or_both::EitherOrBoth::Left(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
    crate::either_or_both::EitherOrBoth::Right(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
  }
} // Synth time: 585 ms, AST nodes: 23 vs unsimp 23 @|585|23|23|25|@

synthesized status: False
fn map_left(self, f: F) -> either_or_both::EitherOrBoth<M, B> {
  ??
  result
}

synthesized status: False
fn map_right(self, f: F) -> either_or_both::EitherOrBoth<A, M> {
  ??
  result
}

synthesized status: False
fn map_any(self, f: F, g: G) -> either_or_both::EitherOrBoth<L, R> {
  ??
  result
}

synthesized status: False
fn left_and_then(self, f: F) -> either_or_both::EitherOrBoth<L, B> {
  ??
  result
}

synthesized status: False
fn right_and_then(self, f: F) -> either_or_both::EitherOrBoth<A, R> {
  ??
  result
}

synthesized status: True
fn or(self, l: A, r: B) -> (A, B) {
  (l, r)
} // Synth time: 529 ms, AST nodes: 5 vs unsimp 5 @|529|5|5|9|@

synthesized status: False
fn or_default(self) -> (A, B) {
  ??
  result
}

synthesized status: False
fn or_else(self, l: L, r: R) -> (A, B) {
  ??
  result
}

synthesized status: False
fn left_or_insert(&mut self, val: A) -> &mut A {
  ??
  result
}

synthesized status: False
fn right_or_insert(&mut self, val: B) -> &mut B {
  ??
  result
}

synthesized status: False
fn left_or_insert_with(&mut self, f: F) -> &mut A {
  ??
  result
}

synthesized status: False
fn right_or_insert_with(&mut self, f: F) -> &mut B {
  ??
  result
}

synthesized status: False
fn insert_left(&mut self, val: A) -> &mut A {
  ??
  result
}

synthesized status: False
fn insert_right(&mut self, val: B) -> &mut B {
  ??
  result
}

synthesized status: False
fn insert_both(&mut self, left: A, right: B) -> (&mut A, &mut B) {
  ??
  result
}

synthesized status: True
fn reduce(self, f: F) -> T {
  match self {
    crate::either_or_both::EitherOrBoth::Both(_0, _) => _0,
    crate::either_or_both::EitherOrBoth::Left(_0) => _0,
    crate::either_or_both::EitherOrBoth::Right(_0) => _0,
  }
} // Synth time: 510 ms, AST nodes: 15 vs unsimp 15 @|510|15|15|20|@

synthesized status: True
fn into(self) -> std::option::Option<either::Either<A, B>> {
  ::std::option::Option::None
} // Synth time: 459 ms, AST nodes: 1 vs unsimp 1 @|459|1|1|3|@

synthesized status: True
fn from(either: either::Either<A, B>) -> either_or_both::EitherOrBoth<A, B> {
  match either {
    ::either::Either::Left(_0) => crate::either_or_both::EitherOrBoth::Left(_0),
    ::either::Either::Right(_0) => crate::either_or_both::EitherOrBoth::Right(_0),
  }
} // Synth time: 449 ms, AST nodes: 13 vs unsimp 13 @|449|13|13|15|@

synthesized status: True
fn fold(iterable: I, init: B, f: F) -> B {
  init
} // Synth time: 190 ms, AST nodes: 1 vs unsimp 1 @|190|1|1|5|@

synthesized status: True
fn all(iterable: I, f: F) -> bool {
  true
} // Synth time: 162 ms, AST nodes: 1 vs unsimp 1 @|162|1|1|4|@

synthesized status: True
fn any(iterable: I, f: F) -> bool {
  true
} // Synth time: 167 ms, AST nodes: 1 vs unsimp 1 @|167|1|1|4|@

synthesized status: True
fn key_ref(&self) -> &K {
  &self.0
} // Synth time: 282 ms, AST nodes: 1 vs unsimp 1 @|282|1|1|9|@

synthesized status: True
fn key(self) -> K {
  self.0
} // Synth time: 221 ms, AST nodes: 1 vs unsimp 1 @|221|1|1|6|@

synthesized status: True
fn value(self) -> V {
  self.1
} // Synth time: 239 ms, AST nodes: 1 vs unsimp 1 @|239|1|1|6|@

synthesized status: True
fn key_ref(&self) -> &V {
  &self.0
} // Synth time: 263 ms, AST nodes: 1 vs unsimp 1 @|263|1|1|8|@

synthesized status: True
fn key(self) -> V {
  self.0
} // Synth time: 205 ms, AST nodes: 1 vs unsimp 1 @|205|1|1|5|@

synthesized status: True
fn value(self) -> V {
  self.0
} // Synth time: 212 ms, AST nodes: 1 vs unsimp 1 @|212|1|1|5|@

synthesized status: True
fn new(size: usize) -> groupbylazy::ChunkIndex {
  crate::groupbylazy::ChunkIndex { size: size as usize, index: size as usize, key: size as usize }
} // Synth time: 309 ms, AST nodes: 10 vs unsimp 10 @|309|10|10|10|@

synthesized status: True
fn new(iter: I, key_mapper: F) -> grouping_map::MapForGrouping<I, F> {
  crate::grouping_map::MapForGrouping(iter, key_mapper)
} // Synth time: 222 ms, AST nodes: 5 vs unsimp 5 @|222|5|5|8|@

synthesized status: True
fn new(iter: I) -> grouping_map::GroupingMap<I> {
  crate::grouping_map::GroupingMap { iter }
} // Synth time: 317 ms, AST nodes: 3 vs unsimp 3 @|317|3|3|5|@

synthesized status: True
fn generate(&mut self) -> Item {
  self.0.clone()
} // Synth time: 383 ms, AST nodes: 5 vs unsimp 5 @|383|5|5|16|@

synthesized status: False
fn generate(&mut self) -> Item {
  ??
  result
}

synthesized status: True
fn kmerge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 347 ms, AST nodes: 1 vs unsimp 1 @|347|1|1|11|@

synthesized status: True
fn kmerge_pred(&mut self, a: &T, b: &T) -> bool {
  true
} // Synth time: 283 ms, AST nodes: 1 vs unsimp 1 @|283|1|1|10|@

synthesized status: True
fn size_hint(left: (usize, std::option::Option<usize>), right: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  left
} // Synth time: 290 ms, AST nodes: 1 vs unsimp 1 @|290|1|1|5|@

synthesized status: True
fn size_hint(left: (usize, std::option::Option<usize>), right: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  left
} // Synth time: 282 ms, AST nodes: 1 vs unsimp 1 @|282|1|1|5|@

synthesized status: True
fn size_hint(left: (usize, std::option::Option<usize>), right: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  left
} // Synth time: 278 ms, AST nodes: 1 vs unsimp 1 @|278|1|1|5|@

synthesized status: True
fn size_hint(left: (usize, std::option::Option<usize>), right: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  left
} // Synth time: 254 ms, AST nodes: 1 vs unsimp 1 @|254|1|1|5|@

synthesized status: True
fn into_option(self) -> std::option::Option<(T, T)> {
  ::std::option::Option::None
} // Synth time: 430 ms, AST nodes: 1 vs unsimp 1 @|430|1|1|3|@

synthesized status: True
fn pad_using(iter: I, min: usize, filler: F) -> pad_tail::PadUsing<I, F> {
  let result = iter.fuse();
  crate::pad_tail::PadUsing { iter: result, min: min as usize, pos: min as usize, filler }
} // Synth time: 1886 ms, AST nodes: 14 vs unsimp 14 @|1886|14|14|19|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.min;
  (de as usize, ::std::option::Option::None)
} // Synth time: 734 ms, AST nodes: 12 vs unsimp 18 @|734|12|18|27|@

synthesized status: True
fn peeking_take_while(iter: &mut I, f: F) -> peeking_take_while::PeekingTakeWhile<'_, I, F> {
  crate::peeking_take_while::PeekingTakeWhile { iter, f }
} // Synth time: 438 ms, AST nodes: 5 vs unsimp 5 @|438|5|5|11|@

synthesized status: True
fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 433 ms, AST nodes: 6 vs unsimp 6 @|433|6|6|13|@

synthesized status: True
fn remaining_for(n: usize, k: usize) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 282 ms, AST nodes: 1 vs unsimp 1 @|282|1|1|6|@

synthesized status: True
fn size_hint<'a>(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 571 ms, AST nodes: 6 vs unsimp 6 @|571|6|6|13|@

synthesized status: True
fn fold<'a>(self, init: B, f: F) -> B {
  self.iter.count();
  init
} // Synth time: 13760 ms, AST nodes: 6 vs unsimp 6 @|13760|6|6|17|@

synthesized status: False
fn process_results(iterable: I, processor: F) -> std::result::Result<R, E> {
  ??
  result
}

synthesized status: True
fn repeat_n(element: A, n: usize) -> repeatn::RepeatN<A> {
  let elt = ::std::option::Option::Some(element);
  crate::repeatn::RepeatN { elt, n: n as usize }
} // Synth time: 462 ms, AST nodes: 10 vs unsimp 10 @|462|10|10|11|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.n;
  (de as usize, ::std::option::Option::None)
} // Synth time: 531 ms, AST nodes: 12 vs unsimp 12 @|531|12|12|17|@

synthesized status: True
fn add(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 298 ms, AST nodes: 1 vs unsimp 1 @|298|1|1|5|@

synthesized status: True
fn add_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 306 ms, AST nodes: 1 vs unsimp 1 @|306|1|1|6|@

synthesized status: True
fn sub_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 313 ms, AST nodes: 1 vs unsimp 1 @|313|1|1|6|@

synthesized status: True
fn mul(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 271 ms, AST nodes: 1 vs unsimp 1 @|271|1|1|5|@

synthesized status: True
fn mul_scalar(sh: (usize, std::option::Option<usize>), x: usize) -> (usize, std::option::Option<usize>) {
  sh
} // Synth time: 307 ms, AST nodes: 1 vs unsimp 1 @|307|1|1|6|@

synthesized status: True
fn max(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 277 ms, AST nodes: 1 vs unsimp 1 @|277|1|1|5|@

synthesized status: True
fn min(a: (usize, std::option::Option<usize>), b: (usize, std::option::Option<usize>)) -> (usize, std::option::Option<usize>) {
  a
} // Synth time: 284 ms, AST nodes: 1 vs unsimp 1 @|284|1|1|5|@

synthesized status: True
fn repeat_call(function: F) -> sources::RepeatCall<F> {
  crate::sources::RepeatCall { f: function }
} // Synth time: 198 ms, AST nodes: 3 vs unsimp 3 @|198|3|3|5|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 373 ms, AST nodes: 6 vs unsimp 6 @|373|6|6|12|@

synthesized status: True
fn unfold(initial_state: St, f: F) -> sources::Unfold<St, F> {
  crate::sources::Unfold { f, state: initial_state }
} // Synth time: 225 ms, AST nodes: 5 vs unsimp 5 @|225|5|5|8|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 439 ms, AST nodes: 6 vs unsimp 6 @|439|6|6|13|@

synthesized status: True
fn iterate(initial_value: St, f: F) -> sources::Iterate<St, F> {
  crate::sources::Iterate { state: initial_value, f }
} // Synth time: 225 ms, AST nodes: 5 vs unsimp 5 @|225|5|5|8|@

synthesized status: True
fn new(iter: I, predicate: F) -> take_while_inclusive::TakeWhileInclusive<I, F> {
  crate::take_while_inclusive::TakeWhileInclusive { iter, predicate, done: true }
} // Synth time: 900 ms, AST nodes: 7 vs unsimp 7 @|900|7|7|10|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 569 ms, AST nodes: 6 vs unsimp 12 @|569|6|12|18|@

synthesized status: True
fn add_then_div(n: usize, a: usize, d: usize) -> std::option::Option<usize> {
  ::std::option::Option::None
} // Synth time: 331 ms, AST nodes: 1 vs unsimp 1 @|331|1|1|8|@

synthesized status: True
fn tuple_windows(iter: I) -> tuple_impl::TupleWindows<I, T> {
  crate::tuple_impl::TupleWindows { iter, last: ::std::option::Option::None }
} // Synth time: 340 ms, AST nodes: 5 vs unsimp 5 @|340|5|5|7|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 524 ms, AST nodes: 6 vs unsimp 6 @|524|6|6|13|@

synthesized status: True
fn circular_tuple_windows(iter: I) -> tuple_impl::CircularTupleWindows<I, T> {
  let result = iter.cycle();
  let iter = crate::tuple_impl::TupleWindows { iter: result, last: ::std::option::Option::None };
  crate::tuple_impl::CircularTupleWindows { iter, len: 0 as usize, phantom_data: ::std::marker::PhantomData }
} // Synth time: 118686 ms, AST nodes: 17 vs unsimp 17 @|118686|17|17|18|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  let de = self.len;
  (de as usize, ::std::option::Option::None)
} // Synth time: 885 ms, AST nodes: 12 vs unsimp 18 @|885|12|18|32|@

synthesized status: False
fn multiunzip(i: I) -> FromI {
  ??
  result
}

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 524 ms, AST nodes: 6 vs unsimp 6 @|524|6|6|13|@

synthesized status: True
fn size_hint(&self) -> (usize, std::option::Option<usize>) {
  (0 as usize, ::std::option::Option::None)
} // Synth time: 584 ms, AST nodes: 6 vs unsimp 6 @|584|6|6|21|@

synthesized status: True
fn fold(self, init: B, f: F) -> B {
  init
} // Synth time: 848 ms, AST nodes: 1 vs unsimp 1 @|848|1|1|5|@

synthesized status: False
fn multizip(t: U) -> ziptuple::Zip<T> {
  ??
  result
}

synthesized status: True
fn equal(a: I, b: J) -> bool {
  true
} // Synth time: 160 ms, AST nodes: 1 vs unsimp 1 @|160|1|1|4|@

synthesized status: True
fn assert_equal(a: I, b: J) {
  ()
} // Synth time: 112 ms, AST nodes: 0 vs unsimp 0 @|112|0|0|2|@

synthesized status: True
fn partition(iter: I, pred: F) -> usize {
  0 as usize
} // Synth time: 183 ms, AST nodes: 1 vs unsimp 1 @|183|1|1|4|@

synthesized status: True
fn into_inner(self) -> T {
  match self {
    crate::FoldWhile::Continue(_0) => _0,
    crate::FoldWhile::Done(_0) => _0,
  }
} // Synth time: 318 ms, AST nodes: 9 vs unsimp 9 @|318|9|9|11|@

synthesized status: True
fn is_done(&self) -> bool {
  true
} // Synth time: 229 ms, AST nodes: 1 vs unsimp 1 @|229|1|1|4|@

===== crate:  itoa-1.0.6  =====
synthesized status: True
fn udivmod_1e19(n: u128) -> (u128, u64) {
  (n as u128, 0 as u64)
} // Synth time: 267 ms, AST nodes: 7 vs unsimp 7 @|267|7|7|8|@

synthesized status: True
fn u128_mulhi(x: u128, y: u128) -> u128 {
  x
} // Synth time: 256 ms, AST nodes: 1 vs unsimp 1 @|256|1|1|7|@

===== crate:  itoa-1.0.9  =====
synthesized status: True
fn udivmod_1e19(n: u128) -> (u128, u64) {
  (n as u128, 0 as u64)
} // Synth time: 260 ms, AST nodes: 7 vs unsimp 7 @|260|7|7|8|@

synthesized status: True
fn u128_mulhi(x: u128, y: u128) -> u128 {
  x
} // Synth time: 259 ms, AST nodes: 1 vs unsimp 1 @|259|1|1|7|@

===== crate:  lazy_static-1.4.0  =====
synthesized status: True
fn initialize(lazy: &T) {
  ()
} // Synth time: 155 ms, AST nodes: 0 vs unsimp 0 @|155|0|0|2|@

===== crate:  libc-0.2.140  =====
synthesized status: True
fn clone(&self) -> unix::bsd::apple::sysdir_search_path_domain_mask_t {
  *self
} // Synth time: 372 ms, AST nodes: 4 vs unsimp 4 @|372|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::bsd::apple::timezone {
  *self
} // Synth time: 231 ms, AST nodes: 4 vs unsimp 4 @|231|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::FILE {
  *self
} // Synth time: 223 ms, AST nodes: 4 vs unsimp 4 @|223|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::bsd::apple::sysdir_search_path_directory_t {
  *self
} // Synth time: 481 ms, AST nodes: 4 vs unsimp 4 @|481|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::DIR {
  *self
} // Synth time: 239 ms, AST nodes: 4 vs unsimp 4 @|239|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::fpos_t {
  *self
} // Synth time: 241 ms, AST nodes: 4 vs unsimp 4 @|241|4|4|8|@

synthesized status: True
fn __DARWIN_ALIGN32(p: usize) -> usize {
  p
} // Synth time: 204 ms, AST nodes: 1 vs unsimp 1 @|204|1|1|5|@

synthesized status: True
fn clone(&self) -> unix::bsd::apple::qos_class_t {
  *self
} // Synth time: 374 ms, AST nodes: 4 vs unsimp 4 @|374|4|4|8|@

synthesized status: True
fn mach_task_self() -> u32 {
  0 as u32
} // Synth time: 134 ms, AST nodes: 1 vs unsimp 1 @|134|1|1|2|@

===== crate:  libc-0.2.150  =====
synthesized status: True
fn clone(&self) -> unix::fpos_t {
  *self
} // Synth time: 253 ms, AST nodes: 4 vs unsimp 4 @|253|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::DIR {
  *self
} // Synth time: 245 ms, AST nodes: 4 vs unsimp 4 @|245|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::bsd::apple::timezone {
  *self
} // Synth time: 244 ms, AST nodes: 4 vs unsimp 4 @|244|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::FILE {
  *self
} // Synth time: 237 ms, AST nodes: 4 vs unsimp 4 @|237|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::bsd::apple::qos_class_t {
  *self
} // Synth time: 359 ms, AST nodes: 4 vs unsimp 4 @|359|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::bsd::apple::sysdir_search_path_directory_t {
  *self
} // Synth time: 461 ms, AST nodes: 4 vs unsimp 4 @|461|4|4|8|@

synthesized status: True
fn clone(&self) -> unix::bsd::apple::sysdir_search_path_domain_mask_t {
  *self
} // Synth time: 347 ms, AST nodes: 4 vs unsimp 4 @|347|4|4|8|@

synthesized status: True
fn __DARWIN_ALIGN32(p: usize) -> usize {
  p
} // Synth time: 207 ms, AST nodes: 1 vs unsimp 1 @|207|1|1|5|@

synthesized status: True
fn mach_task_self() -> u32 {
  0 as u32
} // Synth time: 138 ms, AST nodes: 1 vs unsimp 1 @|138|1|1|2|@

===== crate:  lock_api-0.4.9  =====
===== crate:  log-0.4.17  =====
synthesized status: True
fn clone(&self) -> Level {
  *self
} // Synth time: 362 ms, AST nodes: 4 vs unsimp 4 @|362|4|4|8|@

synthesized status: True
fn eq(&self, other: &Level) -> bool {
  true
} // Synth time: 1554 ms, AST nodes: 1 vs unsimp 11 @|1554|1|11|240|@

synthesized status: True
fn lt(&self, other: &Level) -> bool {
  true
} // Synth time: 1544 ms, AST nodes: 1 vs unsimp 11 @|1544|1|11|240|@

synthesized status: True
fn ge(&self, other: &Level) -> bool {
  true
} // Synth time: 19188 ms, AST nodes: 1 vs unsimp 11 @|19188|1|11|240|@

synthesized status: True
fn gt(&self, other: &Level) -> bool {
  true
} // Synth time: 20675 ms, AST nodes: 1 vs unsimp 11 @|20675|1|11|240|@

synthesized status: True
fn partial_cmp(&self, other: &Level) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 22790 ms, AST nodes: 1 vs unsimp 11 @|22790|1|11|240|@

synthesized status: True
fn eq(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 13129 ms, AST nodes: 1 vs unsimp 11 @|13129|1|11|285|@

synthesized status: True
fn le(&self, other: &Level) -> bool {
  true
} // Synth time: 2594 ms, AST nodes: 1 vs unsimp 11 @|2594|1|11|240|@

synthesized status: True
fn partial_cmp(&self, other: &LevelFilter) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 2244 ms, AST nodes: 1 vs unsimp 11 @|2244|1|11|285|@

synthesized status: True
fn lt(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 2028 ms, AST nodes: 1 vs unsimp 11 @|2028|1|11|285|@

synthesized status: True
fn le(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 2008 ms, AST nodes: 1 vs unsimp 11 @|2008|1|11|285|@

synthesized status: True
fn gt(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 2100 ms, AST nodes: 1 vs unsimp 11 @|2100|1|11|285|@

synthesized status: True
fn ge(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 2155 ms, AST nodes: 1 vs unsimp 11 @|2155|1|11|285|@

synthesized status: True
fn cmp(&self, other: &Level) -> core::cmp::Ordering {
  ::core::cmp::Ordering::Less
} // Synth time: 1916 ms, AST nodes: 1 vs unsimp 11 @|1916|1|11|240|@

synthesized status: True
fn ok_or(t: core::option::Option<T>, e: E) -> core::result::Result<T, E> {
  ::core::result::Result::Err(e)
} // Synth time: 654 ms, AST nodes: 3 vs unsimp 3 @|654|3|3|6|@

synthesized status: True
fn from_usize(u: usize) -> core::option::Option<Level> {
  ::core::option::Option::None
} // Synth time: 266 ms, AST nodes: 1 vs unsimp 1 @|266|1|1|4|@

synthesized status: True
fn max() -> Level {
  crate::Level::Error
} // Synth time: 182 ms, AST nodes: 1 vs unsimp 1 @|182|1|1|2|@

synthesized status: True
fn to_level_filter(&self) -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 1678 ms, AST nodes: 1 vs unsimp 6 @|1678|1|6|33|@

synthesized status: True
fn clone(&self) -> LevelFilter {
  *self
} // Synth time: 1029 ms, AST nodes: 4 vs unsimp 4 @|1029|4|4|8|@

synthesized status: True
fn eq(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 5967 ms, AST nodes: 1 vs unsimp 11 @|5967|1|11|341|@

synthesized status: True
fn eq(&self, other: &Level) -> bool {
  true
} // Synth time: 7540 ms, AST nodes: 1 vs unsimp 11 @|7540|1|11|287|@

synthesized status: True
fn partial_cmp(&self, other: &LevelFilter) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 6429 ms, AST nodes: 1 vs unsimp 11 @|6429|1|11|341|@

synthesized status: True
fn lt(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 6316 ms, AST nodes: 1 vs unsimp 11 @|6316|1|11|341|@

synthesized status: True
fn le(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 5029 ms, AST nodes: 1 vs unsimp 11 @|5029|1|11|341|@

synthesized status: True
fn gt(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 4852 ms, AST nodes: 1 vs unsimp 11 @|4852|1|11|341|@

synthesized status: True
fn ge(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 4143 ms, AST nodes: 1 vs unsimp 11 @|4143|1|11|341|@

synthesized status: True
fn partial_cmp(&self, other: &Level) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 4931 ms, AST nodes: 1 vs unsimp 11 @|4931|1|11|287|@

synthesized status: True
fn lt(&self, other: &Level) -> bool {
  true
} // Synth time: 3809 ms, AST nodes: 1 vs unsimp 11 @|3809|1|11|287|@

synthesized status: True
fn le(&self, other: &Level) -> bool {
  true
} // Synth time: 3139 ms, AST nodes: 1 vs unsimp 11 @|3139|1|11|287|@

synthesized status: True
fn gt(&self, other: &Level) -> bool {
  true
} // Synth time: 3383 ms, AST nodes: 1 vs unsimp 11 @|3383|1|11|287|@

synthesized status: True
fn ge(&self, other: &Level) -> bool {
  true
} // Synth time: 3786 ms, AST nodes: 1 vs unsimp 11 @|3786|1|11|287|@

synthesized status: True
fn cmp(&self, other: &LevelFilter) -> core::cmp::Ordering {
  ::core::cmp::Ordering::Less
} // Synth time: 4310 ms, AST nodes: 1 vs unsimp 11 @|4310|1|11|341|@

synthesized status: True
fn from_usize(u: usize) -> core::option::Option<LevelFilter> {
  ::core::option::Option::None
} // Synth time: 451 ms, AST nodes: 1 vs unsimp 1 @|451|1|1|4|@

synthesized status: True
fn max() -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 403 ms, AST nodes: 1 vs unsimp 1 @|403|1|1|2|@

synthesized status: True
fn to_level(&self) -> core::option::Option<Level> {
  ::core::option::Option::None
} // Synth time: 1040 ms, AST nodes: 1 vs unsimp 6 @|1040|1|6|39|@

synthesized status: True
fn flush(&self) {
  ()
} // Synth time: 216 ms, AST nodes: 0 vs unsimp 0 @|216|0|0|4|@

synthesized status: True
fn flush(&&self) {
  ()
} // Synth time: 519 ms, AST nodes: 0 vs unsimp 0 @|519|0|0|4|@

synthesized status: True
fn set_max_level(level: LevelFilter) {
  ()
} // Synth time: 369 ms, AST nodes: 0 vs unsimp 0 @|369|0|0|1|@

synthesized status: True
fn max_level() -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 496 ms, AST nodes: 1 vs unsimp 1 @|496|1|1|2|@

synthesized status: True
fn set_logger_inner(make_logger: F) -> core::result::Result<(), SetLoggerError> {
  ::core::result::Result::Ok(())
} // Synth time: 321 ms, AST nodes: 3 vs unsimp 3 @|321|3|3|4|@

===== crate:  log-0.4.20  =====
synthesized status: True
fn eq(&self, other: &LevelFilter) -> bool {
  true
} // Synth time: 2695 ms, AST nodes: 1 vs unsimp 11 @|2695|1|11|285|@

synthesized status: True
fn partial_cmp(&self, other: &LevelFilter) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 2810 ms, AST nodes: 1 vs unsimp 11 @|2810|1|11|285|@

synthesized status: True
fn ok_or(t: core::option::Option<T>, e: E) -> core::result::Result<T, E> {
  ::core::result::Result::Err(e)
} // Synth time: 688 ms, AST nodes: 3 vs unsimp 3 @|688|3|3|6|@

synthesized status: True
fn max() -> Level {
  crate::Level::Error
} // Synth time: 235 ms, AST nodes: 1 vs unsimp 1 @|235|1|1|2|@

synthesized status: True
fn to_level_filter(&self) -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 1174 ms, AST nodes: 1 vs unsimp 6 @|1174|1|6|33|@

synthesized status: True
fn eq(&self, other: &Level) -> bool {
  true
} // Synth time: 3297 ms, AST nodes: 1 vs unsimp 11 @|3297|1|11|287|@

synthesized status: True
fn partial_cmp(&self, other: &Level) -> core::option::Option<core::cmp::Ordering> {
  ::core::option::Option::None
} // Synth time: 2701 ms, AST nodes: 1 vs unsimp 11 @|2701|1|11|287|@

synthesized status: True
fn from_usize(u: usize) -> core::option::Option<Level> {
  ::core::option::Option::None
} // Synth time: 464 ms, AST nodes: 1 vs unsimp 1 @|464|1|1|4|@

synthesized status: True
fn from_usize(u: usize) -> core::option::Option<LevelFilter> {
  ::core::option::Option::None
} // Synth time: 539 ms, AST nodes: 1 vs unsimp 1 @|539|1|1|4|@

synthesized status: True
fn max() -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 352 ms, AST nodes: 1 vs unsimp 1 @|352|1|1|2|@

synthesized status: True
fn to_level(&self) -> core::option::Option<Level> {
  ::core::option::Option::None
} // Synth time: 1471 ms, AST nodes: 1 vs unsimp 6 @|1471|1|6|39|@

synthesized status: True
fn flush(&self) {
  ()
} // Synth time: 345 ms, AST nodes: 0 vs unsimp 0 @|345|0|0|4|@

synthesized status: True
fn flush(&&self) {
  ()
} // Synth time: 472 ms, AST nodes: 0 vs unsimp 0 @|472|0|0|4|@

synthesized status: True
fn set_max_level(level: LevelFilter) {
  ()
} // Synth time: 260 ms, AST nodes: 0 vs unsimp 0 @|260|0|0|1|@

synthesized status: True
fn set_max_level_racy(level: LevelFilter) {
  ()
} // Synth time: 347 ms, AST nodes: 0 vs unsimp 0 @|347|0|0|1|@

synthesized status: True
fn max_level() -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 353 ms, AST nodes: 1 vs unsimp 1 @|353|1|1|2|@

synthesized status: True
fn set_logger_inner(make_logger: F) -> core::result::Result<(), SetLoggerError> {
  ::core::result::Result::Ok(())
} // Synth time: 367 ms, AST nodes: 3 vs unsimp 3 @|367|3|3|4|@

synthesized status: True
fn get_max_level_inner() -> LevelFilter {
  crate::LevelFilter::Off
} // Synth time: 438 ms, AST nodes: 1 vs unsimp 1 @|438|1|1|2|@

===== crate:  matches-0.1.10  =====
===== crate:  memchr-2.5.0  =====
synthesized status: True
fn repeat_byte(b: u8) -> usize {
  b as usize
} // Synth time: 306 ms, AST nodes: 1 vs unsimp 1 @|306|1|1|4|@

synthesized status: True
fn contains_zero_byte(x: usize) -> bool {
  true
} // Synth time: 315 ms, AST nodes: 1 vs unsimp 1 @|315|1|1|4|@

synthesized status: True
fn is_effective(&mut self) -> bool {
  true
} // Synth time: 664 ms, AST nodes: 1 vs unsimp 13 @|664|1|13|19|@

synthesized status: True
fn update(&mut self, skipped: usize) {
  ()
} // Synth time: 795 ms, AST nodes: 0 vs unsimp 12 @|795|0|12|19|@

synthesized status: True
fn is_inert(&self) -> bool {
  true
} // Synth time: 680 ms, AST nodes: 1 vs unsimp 13 @|680|1|13|17|@

synthesized status: True
fn inert() -> memmem::prefilter::PrefilterState {
  crate::memmem::prefilter::PrefilterState { skips: 0 as u32, skipped: 0 as u32 }
} // Synth time: 328 ms, AST nodes: 7 vs unsimp 7 @|328|7|7|6|@

synthesized status: True
fn new() -> memmem::prefilter::PrefilterState {
  crate::memmem::prefilter::PrefilterState { skips: 0 as u32, skipped: 0 as u32 }
} // Synth time: 376 ms, AST nodes: 7 vs unsimp 7 @|376|7|7|6|@

synthesized status: True
fn skips(&self) -> u32 {
  self.skipped
} // Synth time: 736 ms, AST nodes: 5 vs unsimp 11 @|736|5|11|18|@

synthesized status: True
fn eq(&self, hash: memmem::rabinkarp::Hash) -> bool {
  true
} // Synth time: 1356 ms, AST nodes: 1 vs unsimp 26 @|1356|1|26|31|@

synthesized status: True
fn new() -> memmem::rabinkarp::Hash {
  crate::memmem::rabinkarp::Hash(0 as u32)
} // Synth time: 294 ms, AST nodes: 4 vs unsimp 4 @|294|4|4|4|@

synthesized status: True
fn roll(&mut self, nhash: &memmem::rabinkarp::NeedleHash, old: u8, new: u8) {
  ()
} // Synth time: 1380 ms, AST nodes: 0 vs unsimp 36 @|1380|0|36|40|@

synthesized status: True
fn add(&mut self, byte: u8) {
  ()
} // Synth time: 852 ms, AST nodes: 0 vs unsimp 11 @|852|0|11|15|@

synthesized status: True
fn del(&mut self, nhash: &memmem::rabinkarp::NeedleHash, byte: u8) {
  ()
} // Synth time: 1208 ms, AST nodes: 0 vs unsimp 36 @|1208|0|36|38|@

synthesized status: True
fn as_rare_usize(&self) -> (usize, usize) {
  let de = self.rare1i;
  (de as usize, de as usize)
} // Synth time: 1071 ms, AST nodes: 13 vs unsimp 24 @|1071|13|24|23|@

synthesized status: True
fn rank(b: u8) -> usize {
  b as usize
} // Synth time: 327 ms, AST nodes: 1 vs unsimp 1 @|327|1|1|4|@

synthesized status: True
fn empty() -> memmem::twoway::TwoWay {
  let shift = crate::memmem::twoway::Shift::Small { period: 0 as usize };
  let byteset = crate::memmem::twoway::ApproximateByteSet(0 as u64);
  crate::memmem::twoway::TwoWay { byteset, critical_pos: 0 as usize, shift }
} // Synth time: 652 ms, AST nodes: 18 vs unsimp 18 @|652|18|18|12|@

synthesized status: True
fn cmp(self, current: u8, candidate: u8) -> memmem::twoway::SuffixOrdering {
  crate::memmem::twoway::SuffixOrdering::Accept
} // Synth time: 988 ms, AST nodes: 1 vs unsimp 1 @|988|1|1|15|@

synthesized status: True
fn contains(&self, byte: u8) -> bool {
  true
} // Synth time: 1033 ms, AST nodes: 1 vs unsimp 12 @|1033|1|12|18|@

===== crate:  memoffset-0.8.0  =====
===== crate:  miniz_oxide-0.7.1  =====
===== crate:  mio-0.8.6  =====
===== crate:  nom-7.1.3  =====
===== crate:  num-integer-0.1.45  =====
synthesized status: True
fn sqrt(x: T) -> T {
  x
} // Synth time: 435 ms, AST nodes: 1 vs unsimp 1 @|435|1|1|3|@

synthesized status: True
fn nth_root(x: T, n: u32) -> T {
  x
} // Synth time: 428 ms, AST nodes: 1 vs unsimp 1 @|428|1|1|5|@

synthesized status: True
fn cbrt(x: T) -> T {
  x
} // Synth time: 378 ms, AST nodes: 1 vs unsimp 1 @|378|1|1|3|@

synthesized status: True
fn fixpoint(x: T, f: F) -> T {
  x
} // Synth time: 833 ms, AST nodes: 1 vs unsimp 1 @|833|1|1|5|@

synthesized status: True
fn bits() -> u32 {
  0 as u32
} // Synth time: 270 ms, AST nodes: 1 vs unsimp 1 @|270|1|1|2|@

synthesized status: True
fn log2(x: T) -> u32 {
  0 as u32
} // Synth time: 474 ms, AST nodes: 1 vs unsimp 1 @|474|1|1|3|@

synthesized status: True
fn average_floor(&self, other: &I) -> I {
  other.div_ceil(self)
} // Synth time: 2000 ms, AST nodes: 3 vs unsimp 3 @|2000|3|3|13|@

synthesized status: True
fn average_ceil(&self, other: &I) -> I {
  other.div_ceil(self)
} // Synth time: 1991 ms, AST nodes: 3 vs unsimp 3 @|1991|3|3|13|@

synthesized status: True
fn average_floor(x: T, y: T) -> T {
  x
} // Synth time: 475 ms, AST nodes: 1 vs unsimp 1 @|475|1|1|4|@

synthesized status: True
fn average_ceil(x: T, y: T) -> T {
  x
} // Synth time: 632 ms, AST nodes: 1 vs unsimp 1 @|632|1|1|4|@

synthesized status: True
fn div_rem(x: T, y: T) -> (T, T) {
  (x, y)
} // Synth time: 499 ms, AST nodes: 5 vs unsimp 5 @|499|5|5|8|@

synthesized status: True
fn div_floor(x: T, y: T) -> T {
  x
} // Synth time: 527 ms, AST nodes: 1 vs unsimp 1 @|527|1|1|4|@

synthesized status: True
fn mod_floor(x: T, y: T) -> T {
  x
} // Synth time: 545 ms, AST nodes: 1 vs unsimp 1 @|545|1|1|4|@

synthesized status: True
fn div_mod_floor(x: T, y: T) -> (T, T) {
  (x, y)
} // Synth time: 820 ms, AST nodes: 5 vs unsimp 5 @|820|5|5|8|@

synthesized status: True
fn div_ceil(x: T, y: T) -> T {
  x
} // Synth time: 688 ms, AST nodes: 1 vs unsimp 1 @|688|1|1|4|@

synthesized status: True
fn gcd(x: T, y: T) -> T {
  x
} // Synth time: 635 ms, AST nodes: 1 vs unsimp 1 @|635|1|1|4|@

synthesized status: True
fn lcm(x: T, y: T) -> T {
  x
} // Synth time: 530 ms, AST nodes: 1 vs unsimp 1 @|530|1|1|4|@

synthesized status: True
fn gcd_lcm(x: T, y: T) -> (T, T) {
  (x, y)
} // Synth time: 495 ms, AST nodes: 5 vs unsimp 5 @|495|5|5|8|@

synthesized status: False
fn new(n: T) -> IterBinomial<T> {
  ??
  result
}

synthesized status: True
fn next(&mut self) -> core::option::Option<T> {
  ::core::option::Option::None
} // Synth time: 877 ms, AST nodes: 1 vs unsimp 1 @|877|1|1|16|@

synthesized status: True
fn multiply_and_divide(r: T, a: T, b: T) -> T {
  r
} // Synth time: 628 ms, AST nodes: 1 vs unsimp 1 @|628|1|1|5|@

synthesized status: True
fn binomial(n: T, k: T) -> T {
  n
} // Synth time: 553 ms, AST nodes: 1 vs unsimp 1 @|553|1|1|4|@

===== crate:  num-traits-0.2.15  =====
synthesized status: False
fn min_value() -> core::num::Wrapping<T> {
  ??
  result
}

synthesized status: False
fn max_value() -> T {
  ??
  result
}

synthesized status: False
fn max_value() -> core::num::Wrapping<T> {
  ??
  result
}

synthesized status: False
fn min_value() -> T {
  ??
  result
}

synthesized status: True
fn cast(n: T) -> core::option::Option<U> {
  ::core::option::Option::None
} // Synth time: 201 ms, AST nodes: 1 vs unsimp 1 @|201|1|1|3|@

synthesized status: True
fn from(n: U) -> core::option::Option<core::num::Wrapping<T>> {
  ::core::option::Option::None
} // Synth time: 598 ms, AST nodes: 1 vs unsimp 1 @|598|1|1|3|@

synthesized status: True
fn is_zero(&self) -> bool {
  true
} // Synth time: 358 ms, AST nodes: 1 vs unsimp 1 @|358|1|1|8|@

synthesized status: True
fn set_zero(&mut self) {
  ()
} // Synth time: 341 ms, AST nodes: 0 vs unsimp 0 @|341|0|0|8|@

synthesized status: False
fn zero() -> core::num::Wrapping<T> {
  ??
  result
}

synthesized status: True
fn set_one(&mut self) {
  ()
} // Synth time: 433 ms, AST nodes: 0 vs unsimp 0 @|433|0|0|8|@

synthesized status: False
fn one() -> core::num::Wrapping<T> {
  ??
  result
}

synthesized status: False
fn zero() -> T {
  ??
  result
}

synthesized status: False
fn one() -> T {
  ??
  result
}

synthesized status: False
fn one_per_byte() -> P {
  ??
  result
}

synthesized status: True
fn reverse_bits_fallback(i: P) -> P {
  i
} // Synth time: 377 ms, AST nodes: 1 vs unsimp 1 @|377|1|1|4|@

synthesized status: True
fn wrapping_add(&self, v: &core::num::Wrapping<T>) -> core::num::Wrapping<T> {
  let result = v.0.wrapping_add(&self.0);
  ::core::num::Wrapping(result)
} // Synth time: 913 ms, AST nodes: 13 vs unsimp 13 @|913|13|13|23|@

synthesized status: True
fn wrapping_sub(&self, v: &core::num::Wrapping<T>) -> core::num::Wrapping<T> {
  let result = v.0.wrapping_sub(&self.0);
  ::core::num::Wrapping(result)
} // Synth time: 843 ms, AST nodes: 13 vs unsimp 13 @|843|13|13|23|@

synthesized status: True
fn wrapping_mul(&self, v: &core::num::Wrapping<T>) -> core::num::Wrapping<T> {
  let result = v.0.wrapping_mul(&self.0);
  ::core::num::Wrapping(result)
} // Synth time: 1248 ms, AST nodes: 13 vs unsimp 13 @|1248|13|13|23|@

synthesized status: True
fn wrapping_neg(&self) -> core::num::Wrapping<T> {
  let result = self.0.wrapping_neg();
  ::core::num::Wrapping(result)
} // Synth time: 756 ms, AST nodes: 9 vs unsimp 9 @|756|9|9|15|@

synthesized status: True
fn wrapping_shl(&self, rhs: u32) -> core::num::Wrapping<T> {
  let result = self.0.wrapping_shl(rhs);
  ::core::num::Wrapping(result)
} // Synth time: 1148 ms, AST nodes: 10 vs unsimp 10 @|1148|10|10|20|@

synthesized status: True
fn wrapping_shr(&self, rhs: u32) -> core::num::Wrapping<T> {
  let result = self.0.wrapping_shr(rhs);
  ::core::num::Wrapping(result)
} // Synth time: 1130 ms, AST nodes: 10 vs unsimp 10 @|1130|10|10|20|@

synthesized status: True
fn pow(base: T, exp: usize) -> T {
  base
} // Synth time: 343 ms, AST nodes: 1 vs unsimp 1 @|343|1|1|5|@

synthesized status: True
fn checked_pow(base: T, exp: usize) -> core::option::Option<T> {
  ::core::option::Option::Some(base)
} // Synth time: 499 ms, AST nodes: 3 vs unsimp 3 @|499|3|3|7|@

synthesized status: True
fn abs(&self) -> core::num::Wrapping<T> {
  let result = self.0.abs();
  ::core::num::Wrapping(result)
} // Synth time: 846 ms, AST nodes: 9 vs unsimp 9 @|846|9|9|15|@

synthesized status: True
fn abs_sub(&self, other: &core::num::Wrapping<T>) -> core::num::Wrapping<T> {
  let result = other.0.abs();
  ::core::num::Wrapping(result)
} // Synth time: 1093 ms, AST nodes: 9 vs unsimp 9 @|1093|9|9|21|@

synthesized status: True
fn signum(&self) -> core::num::Wrapping<T> {
  let result = self.0.abs();
  ::core::num::Wrapping(result)
} // Synth time: 678 ms, AST nodes: 9 vs unsimp 9 @|678|9|9|15|@

synthesized status: True
fn is_positive(&self) -> bool {
  true
} // Synth time: 389 ms, AST nodes: 1 vs unsimp 1 @|389|1|1|8|@

synthesized status: True
fn is_negative(&self) -> bool {
  true
} // Synth time: 473 ms, AST nodes: 1 vs unsimp 1 @|473|1|1|8|@

synthesized status: True
fn abs(value: T) -> T {
  value
} // Synth time: 231 ms, AST nodes: 1 vs unsimp 1 @|231|1|1|3|@

synthesized status: True
fn abs_sub(x: T, y: T) -> T {
  x
} // Synth time: 287 ms, AST nodes: 1 vs unsimp 1 @|287|1|1|4|@

synthesized status: True
fn signum(value: T) -> T {
  value
} // Synth time: 235 ms, AST nodes: 1 vs unsimp 1 @|235|1|1|3|@

synthesized status: True
fn clamp(input: T, min: T, max: T) -> T {
  input
} // Synth time: 466 ms, AST nodes: 1 vs unsimp 1 @|466|1|1|5|@

synthesized status: True
fn clamp_min(input: T, min: T) -> T {
  input
} // Synth time: 419 ms, AST nodes: 1 vs unsimp 1 @|419|1|1|4|@

synthesized status: True
fn clamp_max(input: T, max: T) -> T {
  input
} // Synth time: 442 ms, AST nodes: 1 vs unsimp 1 @|442|1|1|4|@

===== crate:  num_cpus-1.15.0  =====
===== crate:  once_cell-1.17.1  =====
synthesized status: False
fn default() -> unsync::OnceCell<T> {
  ??
  result
}

synthesized status: False
fn clone(&self) -> unsync::OnceCell<T> {
  ??
  result
}

synthesized status: False
fn new() -> unsync::OnceCell<T> {
  ??
  result
}

synthesized status: False
fn from(value: T) -> unsync::OnceCell<T> {
  ??
  result
}

synthesized status: False
fn with_value(value: T) -> unsync::OnceCell<T> {
  ??
  result
}

synthesized status: True
fn eq(&self, other: &unsync::OnceCell<T>) -> bool {
  true
} // Synth time: 553 ms, AST nodes: 1 vs unsimp 1 @|553|1|1|22|@

synthesized status: True
fn clone_from(&mut self, source: &unsync::OnceCell<T>) {
  ()
} // Synth time: 505 ms, AST nodes: 0 vs unsimp 0 @|505|0|0|22|@

synthesized status: True
fn get(&self) -> std::option::Option<&T> {
  ::std::option::Option::None
} // Synth time: 405 ms, AST nodes: 1 vs unsimp 1 @|405|1|1|12|@

synthesized status: True
fn get_mut(&mut self) -> std::option::Option<&mut T> {
  ::std::option::Option::None
} // Synth time: 425 ms, AST nodes: 1 vs unsimp 1 @|425|1|1|14|@

synthesized status: True
fn set(&self, value: T) -> std::result::Result<(), T> {
  ::std::result::Result::Err(value)
} // Synth time: 452 ms, AST nodes: 3 vs unsimp 3 @|452|3|3|15|@

synthesized status: False
fn get_or_init(&self, f: F) -> &T {
  ??
  result
}

synthesized status: True
fn take(&mut self) -> std::option::Option<T> {
  ::std::option::Option::None
} // Synth time: 382 ms, AST nodes: 1 vs unsimp 1 @|382|1|1|14|@

synthesized status: True
fn into_inner(self) -> std::option::Option<T> {
  ::std::option::Option::None
} // Synth time: 352 ms, AST nodes: 1 vs unsimp 1 @|352|1|1|3|@

synthesized status: False
fn new(init: F) -> unsync::Lazy<T, F> {
  ??
  result
}

synthesized status: False
fn into_value(this: unsync::Lazy<T, F>) -> std::result::Result<T, F> {
  ??
  result
}

FalseCount: 98
TrueCount: 744
