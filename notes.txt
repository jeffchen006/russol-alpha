docker run --rm -it -v ${PWD}/demo.rs:/demo.rs jonasalaif/russol run --release --bin ruslic /demo.rs


docker run --rm -it ... jonasalaif/russol [args]

replaced by 

cargo [args]



# build:
cargo build

# test: 
cargo run --bin ruslic ../demo.rs


cargo test --package ruslic --test top_crates -- top_crates_2 --exact --nocapture 

cargo test --release --test ci -- all_tests --nocapture



ruslic/tests/synth/paper/rust/

ruslic/tests/synth/paper/suslik/

ruslic/tests/synth/paper/verifier/




Basically russol uses 3 type prunings:

1. Ownership Rules ==> Synthetic Ownership Logic(SOL)

2. Borrowing Rules 

3. References and Prophecies




flamegraph -o my_flamegraph.svg -- ./target/release/ruslic ./demo.rs

flamegraph -- ./target/release/ruslic ./demo.rs



 java  -Dfile.encoding=UTF-8 -jar ./target/scala-2.12/suslik.jar dream/tmp-foo-5634/tmp.syn  --solutions=1



 -agentpath:/Applications/YourKit-Java-Profiler-2023.9.app/Contents/Resources/bin/mac/libyjpagent.dylib=disablestacktelemetry,exceptions=disable,delay=10000

 -agentpath:/Applications/YourKit-Java-Profiler-2023.9.app/Contents/Resources/bin/mac/libyjpagent.dylib=delay=10000

-agentpath:/Applications/YourKit-Java-Profiler-2023.9.app/Contents/Resources/bin/mac/libyjpagent.dylib=probe_disable=*



 java -agentpath:/Applications/YourKit-Java-Profiler-2023.9.app/Contents/Resources/bin/mac/libyjpagent.dylib=tracing  -Dfile.encoding=UTF-8 -jar ./target/scala-2.12/suslik.jar dream/tmp-foo-5634/tmp.syn  --solutions=1


