predicate tree(loc x, int sz, set s) {
|  true  => { x :-> tag ** tree_inner(x, tag, sz, s) }
}

predicate tree_inner(loc x, int tag, int sz, set s) {
|  tag == 1  => { sz == 1 && s == {v} ; [x,2] ** x + 1 :-> v }
|  tag == 0  => { sz == 1 + sz1 + sz2  &&  1 <= sz1 &&  1 <= sz2 &&  s == {v} ++ s1 ++ s2  ;
                 [x, 4] ** x + 1 :-> v ** (x + 2) :-> l ** (x + 3) :-> r ** tree(l, sz1, s1) ** tree(r, sz2, s2)  }
}

predicate packed_tree(loc x, int sz, set s) {
|  true  => {x :-> tag ** packed_tree_inner(x, tag, sz, s)}
}

predicate packed_tree_inner(loc x, int tag, int sz, set s) {
|  tag == 1  => { sz == 1 && s == {v} ; x + 1 :-> v }
|  tag == 0  => { sz == 1 + sz1 + sz2  &&  1 <= sz1  &&  1 <= sz2  &&  s == {v} ++ s1 ++ s2;
                 x + 1 :-> v ** packed_tree(x + 2, sz1, s1) ** packed_tree(x + 2*(1 + sz1), sz2, s2)  }
}

predicate uninitialized(loc x, loc y) {
|  x == y => { emp }
|  x != y => { x :-> v ** uninitialized(x + 1, y) }
}


