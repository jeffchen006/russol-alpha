predicate sll(loc x, set s) {
|  x == 0        => { s == {} ; emp }
|  not (x == 0)  => { s == {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** sll(nxt, s1) }
}

predicate skl_simple(loc x, loc p, set s) {
| x == p       => { s =i {} ; emp }
| not (x == p) => { s =i {v} ++ s1 ++ s2 ; [x, 3] ** x :-> v ** (x + 1) :-> down ** (x + 2) :-> fwd ** 
                                     skl_simple(down, fwd, s1) ** skl_simple(fwd, p, s2) }  
}
    
    
predicate skl_len(loc x, loc p, set s, int n) {
| x == p       => { s =i {} /\ n == 0; emp }
| not (x == p) => { s =i {v} ++ s1 ++ s2 /\ n == n1 + n2 + 1 /\ n1 >= 0 /\ n2 >= 0; 
                                     [x, 3] ** x :-> v ** (x + 1) :-> down ** (x + 2) :-> fwd ** 
                                     skl_len(down, fwd, s1, n1) ** skl_len(fwd, p, s2, n2) }  
}
        
predicate skl(loc x, loc p, int n, int lo, int hi) {
| x == p       => { n == 0 /\ lo == 7  /\  hi == 0 ; emp }
| not (x == p) => { n == 1 + n1 + n2 /\ 0 <= n1 /\ 0 <= n2 /\
                    lo <= lo1 /\ lo1 <= hi1 /\ hi1 <= lo2 /\ lo2 <= hi /\
                    0 <= lo /\ lo <= 7 /\ 0 <= hi /\ hi <= 7;
                     [x, 3] ** x :-> lo ** (x + 1) :-> down ** (x + 2) :-> fwd **
                     skl(down, fwd, n1, lo1, hi1) ** skl(fwd, p, n2, lo2, hi) }
}

predicate srtl(loc x, int len, int lo, int hi) {
|  x == 0        => { len == 0  /\  lo == 7  /\  hi == 0 ; emp }
|  not (x == 0)  => { len == 1 + len1  /\  0 <= len1  /\
                      hi == (hi1 <= lo ? lo : hi1) /\
                      lo <= lo1 /\ 0 <= lo /\ lo <= 7 ;
                      [x, 2] ** x :-> lo ** (x + 1) :-> nxt ** srtl(nxt, len1, lo1, hi1) }
}

predicate bst(loc x, int sz, int lo, int hi) {
|  x == 0        => { sz == 0 /\  lo == 7  /\  hi == 0 ; emp }
|  not (x == 0)  => { sz == 1 + sz1 + sz2  /\  0 <= sz1 /\  0 <= sz2  /\  lo == (v <= lo1 ? v : lo1)  /\  hi == (hi2 <= v ? v : hi2) /\ 
                      0 <= v /\ v <= 7 /\ hi1 <= v /\ v <= lo2 ;
                      [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** bst(l, sz1, lo1, hi1) ** bst(r, sz2, lo2, hi2)  }
}                