# -c 2 -o 2 -f 3 -p true

flatten a tree into a doubly-linked list in linear time

####

{ tree(x, s) }
void flatten(loc x)
{ dll(x, 0, s) }

####

{tree(x, s)<_alpha_517>}
{dll(x, y, s)<_alpha_518>}
void flatten (loc x) {
  if (x == 0) {
  } else {
    let l = *(x + 1);
    let r = *(x + 2);
    flatten(r);
    flatten111(r, l, x);
  }
}

{_alpha_514x < _alpha_517 && _alpha_515x < _alpha_517 && not (x == 0) ; (x + 1) :-> lx ** (x + 2) :-> rx ** x :-> vx2 ** dll(rx, y1, s2x)<_alpha_5181>[1,0] ** tree(lx, s1x)<_alpha_514x>[0,1] ** [x, 3]}
{dll(x, y, {vx2} ++ s1x ++ s2x)<_alpha_518>}
void flatten111 (loc rx, loc lx, loc x) {
  if (lx == 0) {
    if (rx == 0) {
    } else {
      *(rx + 2) = x;
      *(x + 1) = rx;
    }
  } else {
    let v = *lx;
    let l = *(lx + 1);
    let r = *(lx + 2);
    *(lx + 2) = rx;
    flatten111(rx, l, lx);
    *(x + 1) = r;
    *(x + 2) = lx;
    flatten111(lx, r, x);
  }
}

###

